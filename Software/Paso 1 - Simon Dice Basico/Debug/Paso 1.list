
Paso 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018c8  080018c8  000118c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018cc  080018cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080018d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  20000068  08001938  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  08001938  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008d2b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001812  00000000  00000000  00028dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000480  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0002aa50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000025f2  00000000  00000000  0002ae18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000158e  00000000  00000000  0002d40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e998  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000f34  00000000  00000000  0002ea14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001880 	.word	0x08001880

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08001880 	.word	0x08001880

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 f94d 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ffa2 	bl	8001198 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8f0 	bl	8000448 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8c3 	bl	80003fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200000fc 	.word	0x200000fc

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	200000fc 	.word	0x200000fc

080002ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <NVIC_EnableIRQ+0x28>)
 80002ba:	1dfa      	adds	r2, r7, #7
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	0011      	movs	r1, r2
 80002c0:	221f      	movs	r2, #31
 80002c2:	400a      	ands	r2, r1
 80002c4:	2101      	movs	r1, #1
 80002c6:	4091      	lsls	r1, r2
 80002c8:	000a      	movs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b7f      	cmp	r3, #127	; 0x7f
 80002ec:	d932      	bls.n	8000354 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ee:	4c2f      	ldr	r4, [pc, #188]	; (80003ac <NVIC_SetPriority+0xd4>)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	001a      	movs	r2, r3
 80002f6:	230f      	movs	r3, #15
 80002f8:	4013      	ands	r3, r2
 80002fa:	3b08      	subs	r3, #8
 80002fc:	0899      	lsrs	r1, r3, #2
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0018      	movs	r0, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4003      	ands	r3, r0
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0010      	movs	r0, r2
 800031e:	2203      	movs	r2, #3
 8000320:	4002      	ands	r2, r0
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	20ff      	movs	r0, #255	; 0xff
 8000326:	4090      	lsls	r0, r2
 8000328:	0002      	movs	r2, r0
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	019b      	lsls	r3, r3, #6
 8000332:	20ff      	movs	r0, #255	; 0xff
 8000334:	4018      	ands	r0, r3
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	001d      	movs	r5, r3
 800033c:	2303      	movs	r3, #3
 800033e:	402b      	ands	r3, r5
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4098      	lsls	r0, r3
 8000344:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	431a      	orrs	r2, r3
 8000348:	1d8b      	adds	r3, r1, #6
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	18e3      	adds	r3, r4, r3
 800034e:	3304      	adds	r3, #4
 8000350:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000352:	e027      	b.n	80003a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000354:	4c16      	ldr	r4, [pc, #88]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	089b      	lsrs	r3, r3, #2
 800035e:	4914      	ldr	r1, [pc, #80]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	b252      	sxtb	r2, r2
 8000366:	0892      	lsrs	r2, r2, #2
 8000368:	32c0      	adds	r2, #192	; 0xc0
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	5852      	ldr	r2, [r2, r1]
 800036e:	1df9      	adds	r1, r7, #7
 8000370:	7809      	ldrb	r1, [r1, #0]
 8000372:	0008      	movs	r0, r1
 8000374:	2103      	movs	r1, #3
 8000376:	4001      	ands	r1, r0
 8000378:	00c9      	lsls	r1, r1, #3
 800037a:	20ff      	movs	r0, #255	; 0xff
 800037c:	4088      	lsls	r0, r1
 800037e:	0001      	movs	r1, r0
 8000380:	43c9      	mvns	r1, r1
 8000382:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	0192      	lsls	r2, r2, #6
 8000388:	20ff      	movs	r0, #255	; 0xff
 800038a:	4010      	ands	r0, r2
 800038c:	1dfa      	adds	r2, r7, #7
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	0015      	movs	r5, r2
 8000392:	2203      	movs	r2, #3
 8000394:	402a      	ands	r2, r5
 8000396:	00d2      	lsls	r2, r2, #3
 8000398:	4090      	lsls	r0, r2
 800039a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800039c:	430a      	orrs	r2, r1
 800039e:	33c0      	adds	r3, #192	; 0xc0
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	511a      	str	r2, [r3, r4]
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bdb0      	pop	{r4, r5, r7, pc}
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000e100 	.word	0xe000e100

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <SysTick_Config+0x40>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d901      	bls.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e010      	b.n	80003ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SysTick_Config+0x44>)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	3a01      	subs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	2301      	movs	r3, #1
 80003d4:	425b      	negs	r3, r3
 80003d6:	2103      	movs	r1, #3
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff7d 	bl	80002d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SysTick_Config+0x44>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x44>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	00ffffff 	.word	0x00ffffff
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	230f      	movs	r3, #15
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	1c02      	adds	r2, r0, #0
 800040c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	230f      	movs	r3, #15
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b25b      	sxtb	r3, r3
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff5c 	bl	80002d8 <NVIC_SetPriority>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}

08000428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b25b      	sxtb	r3, r3
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ff36 	bl	80002ac <NVIC_EnableIRQ>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ffae 	bl	80003b4 <SysTick_Config>
 8000458:	0003      	movs	r3, r0
}
 800045a:	0018      	movs	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800047a:	e155      	b.n	8000728 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	4091      	lsls	r1, r2
 8000486:	000a      	movs	r2, r1
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <HAL_GPIO_Init+0x30>
 8000492:	e146      	b.n	8000722 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d003      	beq.n	80004a4 <HAL_GPIO_Init+0x40>
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	2b12      	cmp	r3, #18
 80004a2:	d123      	bne.n	80004ec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	08da      	lsrs	r2, r3, #3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3208      	adds	r2, #8
 80004ac:	0092      	lsls	r2, r2, #2
 80004ae:	58d3      	ldr	r3, [r2, r3]
 80004b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2207      	movs	r2, #7
 80004b6:	4013      	ands	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	220f      	movs	r2, #15
 80004bc:	409a      	lsls	r2, r3
 80004be:	0013      	movs	r3, r2
 80004c0:	43da      	mvns	r2, r3
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	691a      	ldr	r2, [r3, #16]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2107      	movs	r1, #7
 80004d0:	400b      	ands	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	409a      	lsls	r2, r3
 80004d6:	0013      	movs	r3, r2
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	4313      	orrs	r3, r2
 80004dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	08da      	lsrs	r2, r3, #3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3208      	adds	r2, #8
 80004e6:	0092      	lsls	r2, r2, #2
 80004e8:	6939      	ldr	r1, [r7, #16]
 80004ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2203      	movs	r2, #3
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	2203      	movs	r2, #3
 800050a:	401a      	ands	r2, r3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00b      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d007      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000534:	2b11      	cmp	r3, #17
 8000536:	d003      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b12      	cmp	r3, #18
 800053e:	d130      	bne.n	80005a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2203      	movs	r2, #3
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	43da      	mvns	r2, r3
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	409a      	lsls	r2, r3
 8000562:	0013      	movs	r3, r2
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	4313      	orrs	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000576:	2201      	movs	r2, #1
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	409a      	lsls	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	43da      	mvns	r2, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	4013      	ands	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	091b      	lsrs	r3, r3, #4
 800058c:	2201      	movs	r2, #1
 800058e:	401a      	ands	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	409a      	lsls	r2, r3
 8000594:	0013      	movs	r3, r2
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4313      	orrs	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	2203      	movs	r2, #3
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	43da      	mvns	r2, r3
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	4013      	ands	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0013      	movs	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	055b      	lsls	r3, r3, #21
 80005da:	4013      	ands	r3, r2
 80005dc:	d100      	bne.n	80005e0 <HAL_GPIO_Init+0x17c>
 80005de:	e0a0      	b.n	8000722 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e0:	4b57      	ldr	r3, [pc, #348]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005e2:	4a57      	ldr	r2, [pc, #348]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005e4:	6992      	ldr	r2, [r2, #24]
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	619a      	str	r2, [r3, #24]
 80005ec:	4b54      	ldr	r3, [pc, #336]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4013      	ands	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005f8:	4a52      	ldr	r2, [pc, #328]	; (8000744 <HAL_GPIO_Init+0x2e0>)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	3302      	adds	r3, #2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	589b      	ldr	r3, [r3, r2]
 8000604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2203      	movs	r2, #3
 800060a:	4013      	ands	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	220f      	movs	r2, #15
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	429a      	cmp	r2, r3
 8000624:	d019      	beq.n	800065a <HAL_GPIO_Init+0x1f6>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a47      	ldr	r2, [pc, #284]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d013      	beq.n	8000656 <HAL_GPIO_Init+0x1f2>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a46      	ldr	r2, [pc, #280]	; (800074c <HAL_GPIO_Init+0x2e8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d00d      	beq.n	8000652 <HAL_GPIO_Init+0x1ee>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a45      	ldr	r2, [pc, #276]	; (8000750 <HAL_GPIO_Init+0x2ec>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d007      	beq.n	800064e <HAL_GPIO_Init+0x1ea>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <HAL_GPIO_Init+0x2f0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d101      	bne.n	800064a <HAL_GPIO_Init+0x1e6>
 8000646:	2304      	movs	r3, #4
 8000648:	e008      	b.n	800065c <HAL_GPIO_Init+0x1f8>
 800064a:	2305      	movs	r3, #5
 800064c:	e006      	b.n	800065c <HAL_GPIO_Init+0x1f8>
 800064e:	2303      	movs	r3, #3
 8000650:	e004      	b.n	800065c <HAL_GPIO_Init+0x1f8>
 8000652:	2302      	movs	r3, #2
 8000654:	e002      	b.n	800065c <HAL_GPIO_Init+0x1f8>
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <HAL_GPIO_Init+0x1f8>
 800065a:	2300      	movs	r3, #0
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	2103      	movs	r1, #3
 8000660:	400a      	ands	r2, r1
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	4093      	lsls	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4313      	orrs	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800066c:	4935      	ldr	r1, [pc, #212]	; (8000744 <HAL_GPIO_Init+0x2e0>)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	3302      	adds	r3, #2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	43da      	mvns	r2, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4013      	ands	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	025b      	lsls	r3, r3, #9
 8000692:	4013      	ands	r3, r2
 8000694:	d003      	beq.n	800069e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	43da      	mvns	r2, r3
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	4013      	ands	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	d003      	beq.n	80006c8 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	43da      	mvns	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	4013      	ands	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	035b      	lsls	r3, r3, #13
 80006e6:	4013      	ands	r3, r2
 80006e8:	d003      	beq.n	80006f2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	43da      	mvns	r2, r3
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	039b      	lsls	r3, r3, #14
 8000710:	4013      	ands	r3, r2
 8000712:	d003      	beq.n	800071c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4313      	orrs	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	1e13      	subs	r3, r2, #0
 8000732:	d000      	beq.n	8000736 <HAL_GPIO_Init+0x2d2>
 8000734:	e6a2      	b.n	800047c <HAL_GPIO_Init+0x18>
  } 
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b006      	add	sp, #24
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000
 8000748:	48000400 	.word	0x48000400
 800074c:	48000800 	.word	0x48000800
 8000750:	48000c00 	.word	0x48000c00
 8000754:	48001000 	.word	0x48001000
 8000758:	40010400 	.word	0x40010400

0800075c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	0008      	movs	r0, r1
 8000766:	0011      	movs	r1, r2
 8000768:	1cbb      	adds	r3, r7, #2
 800076a:	1c02      	adds	r2, r0, #0
 800076c:	801a      	strh	r2, [r3, #0]
 800076e:	1c7b      	adds	r3, r7, #1
 8000770:	1c0a      	adds	r2, r1, #0
 8000772:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000774:	1c7b      	adds	r3, r7, #1
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800077c:	1cbb      	adds	r3, r7, #2
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000784:	e003      	b.n	800078e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000786:	1cbb      	adds	r3, r7, #2
 8000788:	881a      	ldrh	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	1dba      	adds	r2, r7, #6
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	4013      	ands	r3, r2
 80007ae:	d008      	beq.n	80007c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007b2:	1dba      	adds	r2, r7, #6
 80007b4:	8812      	ldrh	r2, [r2, #0]
 80007b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fde3 	bl	8001388 <HAL_GPIO_EXTI_Callback>
  }
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40010400 	.word	0x40010400

080007d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	d100      	bne.n	80007e8 <HAL_RCC_OscConfig+0x18>
 80007e6:	e08d      	b.n	8000904 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007e8:	4bc5      	ldr	r3, [pc, #788]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	220c      	movs	r2, #12
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d00e      	beq.n	8000812 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f4:	4bc2      	ldr	r3, [pc, #776]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	220c      	movs	r2, #12
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d116      	bne.n	800082e <HAL_RCC_OscConfig+0x5e>
 8000800:	4bbf      	ldr	r3, [pc, #764]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	23c0      	movs	r3, #192	; 0xc0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	401a      	ands	r2, r3
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	429a      	cmp	r2, r3
 8000810:	d10d      	bne.n	800082e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000812:	4bbb      	ldr	r3, [pc, #748]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	029b      	lsls	r3, r3, #10
 800081a:	4013      	ands	r3, r2
 800081c:	d100      	bne.n	8000820 <HAL_RCC_OscConfig+0x50>
 800081e:	e070      	b.n	8000902 <HAL_RCC_OscConfig+0x132>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d000      	beq.n	800082a <HAL_RCC_OscConfig+0x5a>
 8000828:	e06b      	b.n	8000902 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e327      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d107      	bne.n	8000846 <HAL_RCC_OscConfig+0x76>
 8000836:	4bb2      	ldr	r3, [pc, #712]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000838:	4ab1      	ldr	r2, [pc, #708]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0249      	lsls	r1, r1, #9
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e02f      	b.n	80008a6 <HAL_RCC_OscConfig+0xd6>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10c      	bne.n	8000868 <HAL_RCC_OscConfig+0x98>
 800084e:	4bac      	ldr	r3, [pc, #688]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000850:	4aab      	ldr	r2, [pc, #684]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	49ab      	ldr	r1, [pc, #684]	; (8000b04 <HAL_RCC_OscConfig+0x334>)
 8000856:	400a      	ands	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4ba9      	ldr	r3, [pc, #676]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800085c:	4aa8      	ldr	r2, [pc, #672]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	49a9      	ldr	r1, [pc, #676]	; (8000b08 <HAL_RCC_OscConfig+0x338>)
 8000862:	400a      	ands	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e01e      	b.n	80008a6 <HAL_RCC_OscConfig+0xd6>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b05      	cmp	r3, #5
 800086e:	d10e      	bne.n	800088e <HAL_RCC_OscConfig+0xbe>
 8000870:	4ba3      	ldr	r3, [pc, #652]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000872:	4aa3      	ldr	r2, [pc, #652]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	02c9      	lsls	r1, r1, #11
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	4ba0      	ldr	r3, [pc, #640]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000880:	4a9f      	ldr	r2, [pc, #636]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0249      	lsls	r1, r1, #9
 8000888:	430a      	orrs	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e00b      	b.n	80008a6 <HAL_RCC_OscConfig+0xd6>
 800088e:	4b9c      	ldr	r3, [pc, #624]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000890:	4a9b      	ldr	r2, [pc, #620]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	499b      	ldr	r1, [pc, #620]	; (8000b04 <HAL_RCC_OscConfig+0x334>)
 8000896:	400a      	ands	r2, r1
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b99      	ldr	r3, [pc, #612]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800089c:	4a98      	ldr	r2, [pc, #608]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4999      	ldr	r1, [pc, #612]	; (8000b08 <HAL_RCC_OscConfig+0x338>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d014      	beq.n	80008d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ae:	f7ff fcf3 	bl	8000298 <HAL_GetTick>
 80008b2:	0003      	movs	r3, r0
 80008b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b6:	e008      	b.n	80008ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b8:	f7ff fcee 	bl	8000298 <HAL_GetTick>
 80008bc:	0002      	movs	r2, r0
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b64      	cmp	r3, #100	; 0x64
 80008c4:	d901      	bls.n	80008ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e2d9      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	4b8d      	ldr	r3, [pc, #564]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	029b      	lsls	r3, r3, #10
 80008d2:	4013      	ands	r3, r2
 80008d4:	d0f0      	beq.n	80008b8 <HAL_RCC_OscConfig+0xe8>
 80008d6:	e015      	b.n	8000904 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d8:	f7ff fcde 	bl	8000298 <HAL_GetTick>
 80008dc:	0003      	movs	r3, r0
 80008de:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e0:	e008      	b.n	80008f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e2:	f7ff fcd9 	bl	8000298 <HAL_GetTick>
 80008e6:	0002      	movs	r2, r0
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b64      	cmp	r3, #100	; 0x64
 80008ee:	d901      	bls.n	80008f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008f0:	2303      	movs	r3, #3
 80008f2:	e2c4      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f4:	4b82      	ldr	r3, [pc, #520]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	d1f0      	bne.n	80008e2 <HAL_RCC_OscConfig+0x112>
 8000900:	e000      	b.n	8000904 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000902:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2202      	movs	r2, #2
 800090a:	4013      	ands	r3, r2
 800090c:	d100      	bne.n	8000910 <HAL_RCC_OscConfig+0x140>
 800090e:	e06c      	b.n	80009ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000910:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	220c      	movs	r2, #12
 8000916:	4013      	ands	r3, r2
 8000918:	d00e      	beq.n	8000938 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800091a:	4b79      	ldr	r3, [pc, #484]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	220c      	movs	r2, #12
 8000920:	4013      	ands	r3, r2
 8000922:	2b08      	cmp	r3, #8
 8000924:	d11f      	bne.n	8000966 <HAL_RCC_OscConfig+0x196>
 8000926:	4b76      	ldr	r3, [pc, #472]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	23c0      	movs	r3, #192	; 0xc0
 800092c:	025b      	lsls	r3, r3, #9
 800092e:	401a      	ands	r2, r3
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	429a      	cmp	r2, r3
 8000936:	d116      	bne.n	8000966 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000938:	4b71      	ldr	r3, [pc, #452]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2202      	movs	r2, #2
 800093e:	4013      	ands	r3, r2
 8000940:	d005      	beq.n	800094e <HAL_RCC_OscConfig+0x17e>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d001      	beq.n	800094e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e297      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	4a6c      	ldr	r2, [pc, #432]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000950:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	21f8      	movs	r1, #248	; 0xf8
 8000956:	438b      	bics	r3, r1
 8000958:	0019      	movs	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	430b      	orrs	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000964:	e041      	b.n	80009ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d024      	beq.n	80009b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000970:	4a63      	ldr	r2, [pc, #396]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800097a:	f7ff fc8d 	bl	8000298 <HAL_GetTick>
 800097e:	0003      	movs	r3, r0
 8000980:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000982:	e008      	b.n	8000996 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000984:	f7ff fc88 	bl	8000298 <HAL_GetTick>
 8000988:	0002      	movs	r2, r0
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d901      	bls.n	8000996 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e273      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2202      	movs	r2, #2
 800099c:	4013      	ands	r3, r2
 800099e:	d0f1      	beq.n	8000984 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a0:	4a57      	ldr	r2, [pc, #348]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009a2:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	21f8      	movs	r1, #248	; 0xf8
 80009a8:	438b      	bics	r3, r1
 80009aa:	0019      	movs	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e018      	b.n	80009ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	2101      	movs	r1, #1
 80009c0:	438a      	bics	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c4:	f7ff fc68 	bl	8000298 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009cc:	e008      	b.n	80009e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fc63 	bl	8000298 <HAL_GetTick>
 80009d2:	0002      	movs	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d901      	bls.n	80009e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e24e      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2202      	movs	r2, #2
 80009e6:	4013      	ands	r3, r2
 80009e8:	d1f1      	bne.n	80009ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2208      	movs	r2, #8
 80009f0:	4013      	ands	r3, r2
 80009f2:	d036      	beq.n	8000a62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d019      	beq.n	8000a30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 80009fe:	4a40      	ldr	r2, [pc, #256]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a02:	2101      	movs	r1, #1
 8000a04:	430a      	orrs	r2, r1
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a08:	f7ff fc46 	bl	8000298 <HAL_GetTick>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a10:	e008      	b.n	8000a24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a12:	f7ff fc41 	bl	8000298 <HAL_GetTick>
 8000a16:	0002      	movs	r2, r0
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d901      	bls.n	8000a24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a20:	2303      	movs	r3, #3
 8000a22:	e22c      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d0f1      	beq.n	8000a12 <HAL_RCC_OscConfig+0x242>
 8000a2e:	e018      	b.n	8000a62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a32:	4a33      	ldr	r2, [pc, #204]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a36:	2101      	movs	r1, #1
 8000a38:	438a      	bics	r2, r1
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a3c:	f7ff fc2c 	bl	8000298 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a44:	e008      	b.n	8000a58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a46:	f7ff fc27 	bl	8000298 <HAL_GetTick>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d901      	bls.n	8000a58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a54:	2303      	movs	r3, #3
 8000a56:	e212      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d1f1      	bne.n	8000a46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2204      	movs	r2, #4
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d100      	bne.n	8000a6e <HAL_RCC_OscConfig+0x29e>
 8000a6c:	e0b6      	b.n	8000bdc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a6e:	2317      	movs	r3, #23
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	055b      	lsls	r3, r3, #21
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d111      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a86:	69d2      	ldr	r2, [r2, #28]
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0549      	lsls	r1, r1, #21
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	055b      	lsls	r3, r3, #21
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a9e:	2317      	movs	r3, #23
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_RCC_OscConfig+0x33c>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	d11a      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_RCC_OscConfig+0x33c>)
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_RCC_OscConfig+0x33c>)
 8000ab6:	6812      	ldr	r2, [r2, #0]
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0049      	lsls	r1, r1, #1
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ac0:	f7ff fbea 	bl	8000298 <HAL_GetTick>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac8:	e008      	b.n	8000adc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aca:	f7ff fbe5 	bl	8000298 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b64      	cmp	r3, #100	; 0x64
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e1d0      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_RCC_OscConfig+0x33c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d0f0      	beq.n	8000aca <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d10f      	bne.n	8000b10 <HAL_RCC_OscConfig+0x340>
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000af2:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_RCC_OscConfig+0x330>)
 8000af4:	6a12      	ldr	r2, [r2, #32]
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	621a      	str	r2, [r3, #32]
 8000afc:	e036      	b.n	8000b6c <HAL_RCC_OscConfig+0x39c>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000
 8000b04:	fffeffff 	.word	0xfffeffff
 8000b08:	fffbffff 	.word	0xfffbffff
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10c      	bne.n	8000b32 <HAL_RCC_OscConfig+0x362>
 8000b18:	4bc9      	ldr	r3, [pc, #804]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b1a:	4ac9      	ldr	r2, [pc, #804]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b1c:	6a12      	ldr	r2, [r2, #32]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	438a      	bics	r2, r1
 8000b22:	621a      	str	r2, [r3, #32]
 8000b24:	4bc6      	ldr	r3, [pc, #792]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b26:	4ac6      	ldr	r2, [pc, #792]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b28:	6a12      	ldr	r2, [r2, #32]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	621a      	str	r2, [r3, #32]
 8000b30:	e01c      	b.n	8000b6c <HAL_RCC_OscConfig+0x39c>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	d10c      	bne.n	8000b54 <HAL_RCC_OscConfig+0x384>
 8000b3a:	4bc1      	ldr	r3, [pc, #772]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b3c:	4ac0      	ldr	r2, [pc, #768]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b3e:	6a12      	ldr	r2, [r2, #32]
 8000b40:	2104      	movs	r1, #4
 8000b42:	430a      	orrs	r2, r1
 8000b44:	621a      	str	r2, [r3, #32]
 8000b46:	4bbe      	ldr	r3, [pc, #760]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b48:	4abd      	ldr	r2, [pc, #756]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b4a:	6a12      	ldr	r2, [r2, #32]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	621a      	str	r2, [r3, #32]
 8000b52:	e00b      	b.n	8000b6c <HAL_RCC_OscConfig+0x39c>
 8000b54:	4bba      	ldr	r3, [pc, #744]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b56:	4aba      	ldr	r2, [pc, #744]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b58:	6a12      	ldr	r2, [r2, #32]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	438a      	bics	r2, r1
 8000b5e:	621a      	str	r2, [r3, #32]
 8000b60:	4bb7      	ldr	r3, [pc, #732]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b62:	4ab7      	ldr	r2, [pc, #732]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b64:	6a12      	ldr	r2, [r2, #32]
 8000b66:	2104      	movs	r1, #4
 8000b68:	438a      	bics	r2, r1
 8000b6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d014      	beq.n	8000b9e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b74:	f7ff fb90 	bl	8000298 <HAL_GetTick>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7c:	e009      	b.n	8000b92 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fb8b 	bl	8000298 <HAL_GetTick>
 8000b82:	0002      	movs	r2, r0
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4aae      	ldr	r2, [pc, #696]	; (8000e44 <HAL_RCC_OscConfig+0x674>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e175      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b92:	4bab      	ldr	r3, [pc, #684]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d0f0      	beq.n	8000b7e <HAL_RCC_OscConfig+0x3ae>
 8000b9c:	e013      	b.n	8000bc6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b9e:	f7ff fb7b 	bl	8000298 <HAL_GetTick>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba6:	e009      	b.n	8000bbc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba8:	f7ff fb76 	bl	8000298 <HAL_GetTick>
 8000bac:	0002      	movs	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	4aa4      	ldr	r2, [pc, #656]	; (8000e44 <HAL_RCC_OscConfig+0x674>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e160      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bbc:	4ba0      	ldr	r3, [pc, #640]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	d1f0      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bc6:	2317      	movs	r3, #23
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d105      	bne.n	8000bdc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bd0:	4b9b      	ldr	r3, [pc, #620]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bd2:	4a9b      	ldr	r2, [pc, #620]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bd4:	69d2      	ldr	r2, [r2, #28]
 8000bd6:	499c      	ldr	r1, [pc, #624]	; (8000e48 <HAL_RCC_OscConfig+0x678>)
 8000bd8:	400a      	ands	r2, r1
 8000bda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2210      	movs	r2, #16
 8000be2:	4013      	ands	r3, r2
 8000be4:	d063      	beq.n	8000cae <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d12a      	bne.n	8000c44 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bee:	4b94      	ldr	r3, [pc, #592]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bf0:	4a93      	ldr	r2, [pc, #588]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bfa:	4b91      	ldr	r3, [pc, #580]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000bfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c06:	f7ff fb47 	bl	8000298 <HAL_GetTick>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c10:	f7ff fb42 	bl	8000298 <HAL_GetTick>
 8000c14:	0002      	movs	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e12d      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d0f1      	beq.n	8000c10 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c2c:	4a84      	ldr	r2, [pc, #528]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c2e:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c32:	21f8      	movs	r1, #248	; 0xf8
 8000c34:	438b      	bics	r3, r1
 8000c36:	0019      	movs	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	430b      	orrs	r3, r1
 8000c40:	6353      	str	r3, [r2, #52]	; 0x34
 8000c42:	e034      	b.n	8000cae <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	3305      	adds	r3, #5
 8000c4a:	d111      	bne.n	8000c70 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c4c:	4b7c      	ldr	r3, [pc, #496]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c4e:	4a7c      	ldr	r2, [pc, #496]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c52:	2104      	movs	r1, #4
 8000c54:	438a      	bics	r2, r1
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c58:	4a79      	ldr	r2, [pc, #484]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c5a:	4b79      	ldr	r3, [pc, #484]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	21f8      	movs	r1, #248	; 0xf8
 8000c60:	438b      	bics	r3, r1
 8000c62:	0019      	movs	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6353      	str	r3, [r2, #52]	; 0x34
 8000c6e:	e01e      	b.n	8000cae <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c70:	4b73      	ldr	r3, [pc, #460]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c72:	4a73      	ldr	r2, [pc, #460]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c76:	2104      	movs	r1, #4
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c7c:	4b70      	ldr	r3, [pc, #448]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c7e:	4a70      	ldr	r2, [pc, #448]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c82:	2101      	movs	r1, #1
 8000c84:	438a      	bics	r2, r1
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c88:	f7ff fb06 	bl	8000298 <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c92:	f7ff fb01 	bl	8000298 <HAL_GetTick>
 8000c96:	0002      	movs	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e0ec      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ca4:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca8:	2202      	movs	r2, #2
 8000caa:	4013      	ands	r3, r2
 8000cac:	d1f1      	bne.n	8000c92 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d05c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	d00e      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000cc4:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	220c      	movs	r2, #12
 8000cca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d114      	bne.n	8000cfa <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000cd0:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	23c0      	movs	r3, #192	; 0xc0
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	401a      	ands	r2, r3
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d10b      	bne.n	8000cfa <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000ce2:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	025b      	lsls	r3, r3, #9
 8000cea:	4013      	ands	r3, r2
 8000cec:	d040      	beq.n	8000d70 <HAL_RCC_OscConfig+0x5a0>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d03c      	beq.n	8000d70 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0c1      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d01b      	beq.n	8000d3a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000d02:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d04:	4a4e      	ldr	r2, [pc, #312]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0249      	lsls	r1, r1, #9
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fac2 	bl	8000298 <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d1a:	f7ff fabd 	bl	8000298 <HAL_GetTick>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e0a8      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	025b      	lsls	r3, r3, #9
 8000d34:	4013      	ands	r3, r2
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x54a>
 8000d38:	e01b      	b.n	8000d72 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d3c:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d40:	4942      	ldr	r1, [pc, #264]	; (8000e4c <HAL_RCC_OscConfig+0x67c>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d46:	f7ff faa7 	bl	8000298 <HAL_GetTick>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d50:	f7ff faa2 	bl	8000298 <HAL_GetTick>
 8000d54:	0002      	movs	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e08d      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x580>
 8000d6e:	e000      	b.n	8000d72 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d70:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <HAL_RCC_OscConfig+0x5ac>
 8000d7a:	e07f      	b.n	8000e7c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	220c      	movs	r2, #12
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x5ba>
 8000d88:	e076      	b.n	8000e78 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d14b      	bne.n	8000e2a <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d94:	4a2a      	ldr	r2, [pc, #168]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	492d      	ldr	r1, [pc, #180]	; (8000e50 <HAL_RCC_OscConfig+0x680>)
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fa7b 	bl	8000298 <HAL_GetTick>
 8000da2:	0003      	movs	r3, r0
 8000da4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da8:	f7ff fa76 	bl	8000298 <HAL_GetTick>
 8000dac:	0002      	movs	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e061      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	049b      	lsls	r3, r3, #18
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	210f      	movs	r1, #15
 8000dce:	438b      	bics	r3, r1
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	491c      	ldr	r1, [pc, #112]	; (8000e54 <HAL_RCC_OscConfig+0x684>)
 8000de2:	4019      	ands	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	4303      	orrs	r3, r0
 8000dee:	430b      	orrs	r3, r1
 8000df0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0449      	lsls	r1, r1, #17
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fa4a 	bl	8000298 <HAL_GetTick>
 8000e04:	0003      	movs	r3, r0
 8000e06:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e0a:	f7ff fa45 	bl	8000298 <HAL_GetTick>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e030      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	049b      	lsls	r3, r3, #18
 8000e24:	4013      	ands	r3, r2
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x63a>
 8000e28:	e028      	b.n	8000e7c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_RCC_OscConfig+0x670>)
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <HAL_RCC_OscConfig+0x680>)
 8000e32:	400a      	ands	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fa2f 	bl	8000298 <HAL_GetTick>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3e:	e014      	b.n	8000e6a <HAL_RCC_OscConfig+0x69a>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	00001388 	.word	0x00001388
 8000e48:	efffffff 	.word	0xefffffff
 8000e4c:	fffeffff 	.word	0xfffeffff
 8000e50:	feffffff 	.word	0xfeffffff
 8000e54:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e58:	f7ff fa1e 	bl	8000298 <HAL_GetTick>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e009      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_RCC_OscConfig+0x6b8>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	049b      	lsls	r3, r3, #18
 8000e72:	4013      	ands	r3, r2
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x688>
 8000e76:	e001      	b.n	8000e7c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b006      	add	sp, #24
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e9a:	4b7a      	ldr	r3, [pc, #488]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d211      	bcs.n	8000ecc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea8:	4b76      	ldr	r3, [pc, #472]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 8000eaa:	4a76      	ldr	r2, [pc, #472]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	2101      	movs	r1, #1
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eba:	4b72      	ldr	r3, [pc, #456]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0d7      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d009      	beq.n	8000eea <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed6:	4a6c      	ldr	r2, [pc, #432]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	21f0      	movs	r1, #240	; 0xf0
 8000ede:	438b      	bics	r3, r1
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0x6a>
 8000ef4:	e089      	b.n	800100a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b62      	ldr	r3, [pc, #392]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d120      	bne.n	8000f4c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0b6      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d107      	bne.n	8000f26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	049b      	lsls	r3, r3, #18
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d114      	bne.n	8000f4c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0aa      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d107      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	4013      	ands	r3, r2
 8000f38:	d108      	bne.n	8000f4c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e09e      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3e:	4b52      	ldr	r3, [pc, #328]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e097      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f4e:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2103      	movs	r1, #3
 8000f54:	438b      	bics	r3, r1
 8000f56:	0019      	movs	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f60:	f7ff f99a 	bl	8000298 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d111      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f70:	e009      	b.n	8000f86 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f72:	f7ff f991 	bl	8000298 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_RCC_ClockConfig+0x200>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e07a      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d1ef      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xe6>
 8000f92:	e03a      	b.n	800100a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d111      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	e009      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9e:	f7ff f97b 	bl	8000298 <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <HAL_RCC_ClockConfig+0x200>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e064      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d1ef      	bne.n	8000f9e <HAL_RCC_ClockConfig+0x112>
 8000fbe:	e024      	b.n	800100a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d11b      	bne.n	8001000 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000fc8:	e009      	b.n	8000fde <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fca:	f7ff f965 	bl	8000298 <HAL_GetTick>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_RCC_ClockConfig+0x200>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e04e      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d1ef      	bne.n	8000fca <HAL_RCC_ClockConfig+0x13e>
 8000fea:	e00e      	b.n	800100a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fec:	f7ff f954 	bl	8000298 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <HAL_RCC_ClockConfig+0x200>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e03d      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	220c      	movs	r2, #12
 8001006:	4013      	ands	r3, r2
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	401a      	ands	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d911      	bls.n	800103c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	2101      	movs	r1, #1
 8001020:	438a      	bics	r2, r1
 8001022:	0011      	movs	r1, r2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_RCC_ClockConfig+0x1f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	401a      	ands	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d001      	beq.n	800103c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e01f      	b.n	800107c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2204      	movs	r2, #4
 8001042:	4013      	ands	r3, r2
 8001044:	d008      	beq.n	8001058 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4910      	ldr	r1, [pc, #64]	; (8001090 <HAL_RCC_ClockConfig+0x204>)
 800104e:	4019      	ands	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	430b      	orrs	r3, r1
 8001056:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001058:	f000 f820 	bl	800109c <HAL_RCC_GetSysClockFreq>
 800105c:	0001      	movs	r1, r0
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_RCC_ClockConfig+0x1fc>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	220f      	movs	r2, #15
 8001066:	4013      	ands	r3, r2
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_RCC_ClockConfig+0x208>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	000a      	movs	r2, r1
 800106e:	40da      	lsrs	r2, r3
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_RCC_ClockConfig+0x20c>)
 8001072:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff f8e7 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40022000 	.word	0x40022000
 8001088:	40021000 	.word	0x40021000
 800108c:	00001388 	.word	0x00001388
 8001090:	fffff8ff 	.word	0xfffff8ff
 8001094:	080018b8 	.word	0x080018b8
 8001098:	20000000 	.word	0x20000000

0800109c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b08f      	sub	sp, #60	; 0x3c
 80010a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80010a2:	2314      	movs	r3, #20
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_RCC_GetSysClockFreq+0xe8>)
 80010a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010aa:	c313      	stmia	r3!, {r0, r1, r4}
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4a35      	ldr	r2, [pc, #212]	; (8001188 <HAL_RCC_GetSysClockFreq+0xec>)
 80010b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010b6:	c313      	stmia	r3!, {r0, r1, r4}
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_RCC_GetSysClockFreq+0xf0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	220c      	movs	r2, #12
 80010da:	4013      	ands	r3, r2
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d006      	beq.n	80010ee <HAL_RCC_GetSysClockFreq+0x52>
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d043      	beq.n	800116c <HAL_RCC_GetSysClockFreq+0xd0>
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d144      	bne.n	8001172 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_RCC_GetSysClockFreq+0xf4>)
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010ec:	e044      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	0c9b      	lsrs	r3, r3, #18
 80010f2:	220f      	movs	r2, #15
 80010f4:	4013      	ands	r3, r2
 80010f6:	2214      	movs	r2, #20
 80010f8:	18ba      	adds	r2, r7, r2
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	220f      	movs	r2, #15
 8001104:	4013      	ands	r3, r2
 8001106:	1d3a      	adds	r2, r7, #4
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800110c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800110e:	23c0      	movs	r3, #192	; 0xc0
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	401a      	ands	r2, r3
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d109      	bne.n	8001130 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800111c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001120:	f7fe fff2 	bl	8000108 <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	001a      	movs	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	4353      	muls	r3, r2
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
 800112e:	e01a      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	401a      	ands	r2, r3
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	429a      	cmp	r2, r3
 800113e:	d109      	bne.n	8001154 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001144:	f7fe ffe0 	bl	8000108 <__udivsi3>
 8001148:	0003      	movs	r3, r0
 800114a:	001a      	movs	r2, r3
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	4353      	muls	r3, r2
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
 8001152:	e008      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001158:	f7fe ffd6 	bl	8000108 <__udivsi3>
 800115c:	0003      	movs	r3, r0
 800115e:	001a      	movs	r2, r3
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	4353      	muls	r3, r2
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800116a:	e005      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001170:	e002      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001176:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b00f      	add	sp, #60	; 0x3c
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	08001898 	.word	0x08001898
 8001188:	080018a8 	.word	0x080018a8
 800118c:	40021000 	.word	0x40021000
 8001190:	007a1200 	.word	0x007a1200
 8001194:	02dc6c00 	.word	0x02dc6c00

08001198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000000 	.word	0x20000000

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f7ff f835 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f811 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 f853 	bl	8001264 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	//LED Test
	simon_t* simon = simon_init(HAL_GetTick());
 80011be:	f7ff f86b 	bl	8000298 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 f8f7 	bl	80013b8 <simon_init>
 80011ca:	0003      	movs	r3, r0
 80011cc:	607b      	str	r3, [r7, #4]
	_IRQ_BTN_handler = simon->_IRQ_BTN_handler;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011d2:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <main+0x2c>)
 80011d4:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011d6:	e7fe      	b.n	80011d6 <main+0x2a>
 80011d8:	20000084 	.word	0x20000084

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b092      	sub	sp, #72	; 0x48
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	2314      	movs	r3, #20
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	0018      	movs	r0, r3
 80011e8:	2334      	movs	r3, #52	; 0x34
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f000 fa8f 	bl	8001710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	0018      	movs	r0, r3
 80011f6:	2310      	movs	r3, #16
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f000 fa88 	bl	8001710 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2314      	movs	r3, #20
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2202      	movs	r2, #2
 8001206:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2314      	movs	r3, #20
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2314      	movs	r3, #20
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	2210      	movs	r2, #16
 8001216:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001218:	2314      	movs	r3, #20
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	2314      	movs	r3, #20
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fad3 	bl	80007d0 <HAL_RCC_OscConfig>
 800122a:	1e03      	subs	r3, r0, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800122e:	f000 f8bd 	bl	80013ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2100      	movs	r1, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff fe1c 	bl	8000e8c <HAL_RCC_ClockConfig>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001258:	f000 f8a8 	bl	80013ac <Error_Handler>
  }
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b012      	add	sp, #72	; 0x48
 8001262:	bd80      	pop	{r7, pc}

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	230c      	movs	r3, #12
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	0018      	movs	r0, r3
 8001270:	2314      	movs	r3, #20
 8001272:	001a      	movs	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	f000 fa4b 	bl	8001710 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <MX_GPIO_Init+0x118>)
 800127c:	4a3f      	ldr	r2, [pc, #252]	; (800137c <MX_GPIO_Init+0x118>)
 800127e:	6952      	ldr	r2, [r2, #20]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0289      	lsls	r1, r1, #10
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <MX_GPIO_Init+0x118>)
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <MX_GPIO_Init+0x118>)
 8001298:	4a38      	ldr	r2, [pc, #224]	; (800137c <MX_GPIO_Init+0x118>)
 800129a:	6952      	ldr	r2, [r2, #20]
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	02c9      	lsls	r1, r1, #11
 80012a0:	430a      	orrs	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <MX_GPIO_Init+0x118>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	02db      	lsls	r3, r3, #11
 80012ac:	4013      	ands	r3, r2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b2:	2390      	movs	r3, #144	; 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff fa4e 	bl	800075c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012c0:	23c0      	movs	r3, #192	; 0xc0
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_GPIO_Init+0x11c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	0019      	movs	r1, r3
 80012ca:	f7ff fa47 	bl	800075c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2220      	movs	r2, #32
 80012d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	230c      	movs	r3, #12
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	230c      	movs	r3, #12
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	230c      	movs	r3, #12
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	230c      	movs	r3, #12
 80012f0:	18fa      	adds	r2, r7, r3
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff f8b3 	bl	8000464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012fe:	230c      	movs	r3, #12
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2238      	movs	r2, #56	; 0x38
 8001304:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001306:	230c      	movs	r3, #12
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_GPIO_Init+0x120>)
 800130c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	230c      	movs	r3, #12
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	230c      	movs	r3, #12
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	4a19      	ldr	r2, [pc, #100]	; (8001380 <MX_GPIO_Init+0x11c>)
 800131c:	0019      	movs	r1, r3
 800131e:	0010      	movs	r0, r2
 8001320:	f7ff f8a0 	bl	8000464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001324:	230c      	movs	r3, #12
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	22c0      	movs	r2, #192	; 0xc0
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	230c      	movs	r3, #12
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2201      	movs	r2, #1
 8001334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	230c      	movs	r3, #12
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	230c      	movs	r3, #12
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	230c      	movs	r3, #12
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <MX_GPIO_Init+0x11c>)
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f7ff f888 	bl	8000464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2006      	movs	r0, #6
 800135a:	f7ff f84f 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800135e:	2006      	movs	r0, #6
 8001360:	f7ff f862 	bl	8000428 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2007      	movs	r0, #7
 800136a:	f7ff f847 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800136e:	2007      	movs	r0, #7
 8001370:	f7ff f85a 	bl	8000428 <HAL_NVIC_EnableIRQ>

}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b008      	add	sp, #32
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400
 8001384:	10110000 	.word	0x10110000

08001388 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	801a      	strh	r2, [r3, #0]
	_IRQ_BTN_handler(GPIO_Pin);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x20>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1dba      	adds	r2, r7, #6
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	0010      	movs	r0, r2
 800139e:	4798      	blx	r3
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000084 	.word	0x20000084

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <simon_init>:
static void simon_generate_random_sequence(simon_t* game_data);
static void simon_display_leds(simon_t* game_data);
static void simon_check_user_sequence(simon_t* game_data);


simon_t* simon_init(long int random_seed){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	static simon_t game_data[1];
	srand48(random_seed);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fa50 	bl	8001868 <srand48>
	game_data->level = 0;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <simon_init+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
	game_data->game_flags = SIMON_GAME_ON;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <simon_init+0x40>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	721a      	strb	r2, [r3, #8]
	game_data->display_speed = 2;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <simon_init+0x40>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	605a      	str	r2, [r3, #4]
	game_data->_IRQ_BTN_handler = simon_LL_init(&game_data->game_flags,game_data->user_sequence,&game_data->user_sequence_position);
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <simon_init+0x44>)
 80013dc:	4908      	ldr	r1, [pc, #32]	; (8001400 <simon_init+0x48>)
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <simon_init+0x4c>)
 80013e0:	0018      	movs	r0, r3
 80013e2:	f000 f811 	bl	8001408 <simon_LL_init>
 80013e6:	0002      	movs	r2, r0
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <simon_init+0x40>)
 80013ea:	659a      	str	r2, [r3, #88]	; 0x58
	return game_data;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <simon_init+0x40>)
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	20000088 	.word	0x20000088
 80013fc:	20000090 	.word	0x20000090
 8001400:	200000b8 	.word	0x200000b8
 8001404:	200000dc 	.word	0x200000dc

08001408 <simon_LL_init>:

static uint8_t* flags;
static int* user_sequence;
static int* user_sequence_position;

IRQ_fcn_t simon_LL_init(uint8_t* _flags, int* _user_sequence, int* _user_sequence_position){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	flags = _flags;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <simon_LL_init+0x28>)
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]
	user_sequence = _user_sequence;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <simon_LL_init+0x2c>)
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	601a      	str	r2, [r3, #0]
	user_sequence_position = _user_sequence_position;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <simon_LL_init+0x30>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
	return BTN_interrupt_handler;
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <simon_LL_init+0x34>)
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000e4 	.word	0x200000e4
 8001434:	200000e8 	.word	0x200000e8
 8001438:	200000ec 	.word	0x200000ec
 800143c:	08001441 	.word	0x08001441

08001440 <BTN_interrupt_handler>:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
	}
}

static void BTN_interrupt_handler(uint16_t GPIO_PIN){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	1dbb      	adds	r3, r7, #6
 800144a:	801a      	strh	r2, [r3, #0]
	if((*flags) & SIMON_LISTEN_TO_SECUENCE && (*user_sequence_position) < SIMON_MAX_LEVEL){
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <BTN_interrupt_handler+0x88>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	001a      	movs	r2, r3
 8001454:	2304      	movs	r3, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d032      	beq.n	80014c0 <BTN_interrupt_handler+0x80>
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <BTN_interrupt_handler+0x8c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b08      	cmp	r3, #8
 8001462:	dc2d      	bgt.n	80014c0 <BTN_interrupt_handler+0x80>
		switch(GPIO_PIN){
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2b10      	cmp	r3, #16
 800146a:	d004      	beq.n	8001476 <BTN_interrupt_handler+0x36>
 800146c:	2b20      	cmp	r3, #32
 800146e:	d00c      	beq.n	800148a <BTN_interrupt_handler+0x4a>
 8001470:	2b08      	cmp	r3, #8
 8001472:	d014      	beq.n	800149e <BTN_interrupt_handler+0x5e>
			break;
		case GPIO_PIN_3:
			user_sequence[*(user_sequence_position)] = SIMON_BTN_3;
			break;
		default:
			return;
 8001474:	e024      	b.n	80014c0 <BTN_interrupt_handler+0x80>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_1;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <BTN_interrupt_handler+0x90>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <BTN_interrupt_handler+0x8c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	18d3      	adds	r3, r2, r3
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
			break;
 8001488:	e013      	b.n	80014b2 <BTN_interrupt_handler+0x72>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_2;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <BTN_interrupt_handler+0x90>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <BTN_interrupt_handler+0x8c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
			break;
 800149c:	e009      	b.n	80014b2 <BTN_interrupt_handler+0x72>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_3;
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <BTN_interrupt_handler+0x90>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <BTN_interrupt_handler+0x8c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
			break;
 80014b0:	46c0      	nop			; (mov r8, r8)
		}
		*(user_sequence_position) += 1;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <BTN_interrupt_handler+0x8c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <BTN_interrupt_handler+0x8c>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	3201      	adds	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
	}
}
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	200000e4 	.word	0x200000e4
 80014cc:	200000ec 	.word	0x200000ec
 80014d0:	200000e8 	.word	0x200000e8

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x44>)
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x44>)
 80014de:	6992      	ldr	r2, [r2, #24]
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x44>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x44>)
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x44>)
 80014f6:	69d2      	ldr	r2, [r2, #28]
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0549      	lsls	r1, r1, #21
 80014fc:	430a      	orrs	r2, r1
 80014fe:	61da      	str	r2, [r3, #28]
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_MspInit+0x44>)
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	055b      	lsls	r3, r3, #21
 8001508:	4013      	ands	r3, r2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f7fe fe9c 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001552:	2008      	movs	r0, #8
 8001554:	f7ff f920 	bl	8000798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001562:	2010      	movs	r0, #16
 8001564:	f7ff f918 	bl	8000798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001568:	2020      	movs	r0, #32
 800156a:	f7ff f915 	bl	8000798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x50>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x16>
		heap_end = &end;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <_sbrk+0x50>)
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <_sbrk+0x54>)
 8001588:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <_sbrk+0x50>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <_sbrk+0x50>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	18d3      	adds	r3, r2, r3
 8001598:	466a      	mov	r2, sp
 800159a:	4293      	cmp	r3, r2
 800159c:	d907      	bls.n	80015ae <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800159e:	f000 f883 	bl	80016a8 <__errno>
 80015a2:	0003      	movs	r3, r0
 80015a4:	220c      	movs	r2, #12
 80015a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	425b      	negs	r3, r3
 80015ac:	e006      	b.n	80015bc <_sbrk+0x48>
	}

	heap_end += incr;
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <_sbrk+0x50>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	18d2      	adds	r2, r2, r3
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <_sbrk+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200000f0 	.word	0x200000f0
 80015c8:	20000104 	.word	0x20000104

080015cc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <SystemInit+0x70>)
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <SystemInit+0x70>)
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <SystemInit+0x70>)
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <SystemInit+0x70>)
 80015e0:	6852      	ldr	r2, [r2, #4]
 80015e2:	4917      	ldr	r1, [pc, #92]	; (8001640 <SystemInit+0x74>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemInit+0x70>)
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <SystemInit+0x70>)
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	4915      	ldr	r1, [pc, #84]	; (8001644 <SystemInit+0x78>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <SystemInit+0x70>)
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <SystemInit+0x70>)
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <SystemInit+0x7c>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <SystemInit+0x70>)
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <SystemInit+0x70>)
 8001604:	6852      	ldr	r2, [r2, #4]
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <SystemInit+0x80>)
 8001608:	400a      	ands	r2, r1
 800160a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <SystemInit+0x70>)
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <SystemInit+0x70>)
 8001610:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001612:	210f      	movs	r1, #15
 8001614:	438a      	bics	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <SystemInit+0x70>)
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <SystemInit+0x70>)
 800161c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800161e:	490c      	ldr	r1, [pc, #48]	; (8001650 <SystemInit+0x84>)
 8001620:	400a      	ands	r2, r1
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SystemInit+0x70>)
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <SystemInit+0x70>)
 8001628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <SystemInit+0x70>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	08ffb80c 	.word	0x08ffb80c
 8001644:	fef6ffff 	.word	0xfef6ffff
 8001648:	fffbffff 	.word	0xfffbffff
 800164c:	ffc0ffff 	.word	0xffc0ffff
 8001650:	fffcfe2c 	.word	0xfffcfe2c

08001654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001656:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800167e:	f7ff ffa5 	bl	80015cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001682:	f000 f817 	bl	80016b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001686:	f7ff fd91 	bl	80011ac <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   r0, =_estack
 800168c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001698:	080018d0 	.word	0x080018d0
  ldr r2, =_sbss
 800169c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016a0:	20000104 	.word	0x20000104

080016a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_COMP_IRQHandler>
	...

080016a8 <__errno>:
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <__errno+0x8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000004 	.word	0x20000004

080016b4 <__libc_init_array>:
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	2600      	movs	r6, #0
 80016b8:	4d0c      	ldr	r5, [pc, #48]	; (80016ec <__libc_init_array+0x38>)
 80016ba:	4c0d      	ldr	r4, [pc, #52]	; (80016f0 <__libc_init_array+0x3c>)
 80016bc:	1b64      	subs	r4, r4, r5
 80016be:	10a4      	asrs	r4, r4, #2
 80016c0:	42a6      	cmp	r6, r4
 80016c2:	d109      	bne.n	80016d8 <__libc_init_array+0x24>
 80016c4:	2600      	movs	r6, #0
 80016c6:	f000 f8db 	bl	8001880 <_init>
 80016ca:	4d0a      	ldr	r5, [pc, #40]	; (80016f4 <__libc_init_array+0x40>)
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <__libc_init_array+0x44>)
 80016ce:	1b64      	subs	r4, r4, r5
 80016d0:	10a4      	asrs	r4, r4, #2
 80016d2:	42a6      	cmp	r6, r4
 80016d4:	d105      	bne.n	80016e2 <__libc_init_array+0x2e>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	00b3      	lsls	r3, r6, #2
 80016da:	58eb      	ldr	r3, [r5, r3]
 80016dc:	4798      	blx	r3
 80016de:	3601      	adds	r6, #1
 80016e0:	e7ee      	b.n	80016c0 <__libc_init_array+0xc>
 80016e2:	00b3      	lsls	r3, r6, #2
 80016e4:	58eb      	ldr	r3, [r5, r3]
 80016e6:	4798      	blx	r3
 80016e8:	3601      	adds	r6, #1
 80016ea:	e7f2      	b.n	80016d2 <__libc_init_array+0x1e>
 80016ec:	080018c8 	.word	0x080018c8
 80016f0:	080018c8 	.word	0x080018c8
 80016f4:	080018c8 	.word	0x080018c8
 80016f8:	080018cc 	.word	0x080018cc

080016fc <malloc>:
 80016fc:	b510      	push	{r4, lr}
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <malloc+0x10>)
 8001700:	0001      	movs	r1, r0
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f000 f80c 	bl	8001720 <_malloc_r>
 8001708:	bd10      	pop	{r4, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20000004 	.word	0x20000004

08001710 <memset>:
 8001710:	0003      	movs	r3, r0
 8001712:	1882      	adds	r2, r0, r2
 8001714:	4293      	cmp	r3, r2
 8001716:	d100      	bne.n	800171a <memset+0xa>
 8001718:	4770      	bx	lr
 800171a:	7019      	strb	r1, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	e7f9      	b.n	8001714 <memset+0x4>

08001720 <_malloc_r>:
 8001720:	2303      	movs	r3, #3
 8001722:	b570      	push	{r4, r5, r6, lr}
 8001724:	1ccd      	adds	r5, r1, #3
 8001726:	439d      	bics	r5, r3
 8001728:	3508      	adds	r5, #8
 800172a:	0006      	movs	r6, r0
 800172c:	2d0c      	cmp	r5, #12
 800172e:	d21e      	bcs.n	800176e <_malloc_r+0x4e>
 8001730:	250c      	movs	r5, #12
 8001732:	42a9      	cmp	r1, r5
 8001734:	d81d      	bhi.n	8001772 <_malloc_r+0x52>
 8001736:	0030      	movs	r0, r6
 8001738:	f000 f8a0 	bl	800187c <__malloc_lock>
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <_malloc_r+0xb4>)
 800173e:	6814      	ldr	r4, [r2, #0]
 8001740:	0021      	movs	r1, r4
 8001742:	2900      	cmp	r1, #0
 8001744:	d119      	bne.n	800177a <_malloc_r+0x5a>
 8001746:	4c24      	ldr	r4, [pc, #144]	; (80017d8 <_malloc_r+0xb8>)
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <_malloc_r+0x36>
 800174e:	0030      	movs	r0, r6
 8001750:	f000 f844 	bl	80017dc <_sbrk_r>
 8001754:	6020      	str	r0, [r4, #0]
 8001756:	0029      	movs	r1, r5
 8001758:	0030      	movs	r0, r6
 800175a:	f000 f83f 	bl	80017dc <_sbrk_r>
 800175e:	1c43      	adds	r3, r0, #1
 8001760:	d12c      	bne.n	80017bc <_malloc_r+0x9c>
 8001762:	230c      	movs	r3, #12
 8001764:	0030      	movs	r0, r6
 8001766:	6033      	str	r3, [r6, #0]
 8001768:	f000 f889 	bl	800187e <__malloc_unlock>
 800176c:	e003      	b.n	8001776 <_malloc_r+0x56>
 800176e:	2d00      	cmp	r5, #0
 8001770:	dadf      	bge.n	8001732 <_malloc_r+0x12>
 8001772:	230c      	movs	r3, #12
 8001774:	6033      	str	r3, [r6, #0]
 8001776:	2000      	movs	r0, #0
 8001778:	bd70      	pop	{r4, r5, r6, pc}
 800177a:	680b      	ldr	r3, [r1, #0]
 800177c:	1b5b      	subs	r3, r3, r5
 800177e:	d41a      	bmi.n	80017b6 <_malloc_r+0x96>
 8001780:	2b0b      	cmp	r3, #11
 8001782:	d903      	bls.n	800178c <_malloc_r+0x6c>
 8001784:	600b      	str	r3, [r1, #0]
 8001786:	18cc      	adds	r4, r1, r3
 8001788:	6025      	str	r5, [r4, #0]
 800178a:	e003      	b.n	8001794 <_malloc_r+0x74>
 800178c:	428c      	cmp	r4, r1
 800178e:	d10e      	bne.n	80017ae <_malloc_r+0x8e>
 8001790:	6863      	ldr	r3, [r4, #4]
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	0030      	movs	r0, r6
 8001796:	f000 f872 	bl	800187e <__malloc_unlock>
 800179a:	0020      	movs	r0, r4
 800179c:	2207      	movs	r2, #7
 800179e:	300b      	adds	r0, #11
 80017a0:	1d23      	adds	r3, r4, #4
 80017a2:	4390      	bics	r0, r2
 80017a4:	1ac3      	subs	r3, r0, r3
 80017a6:	d0e7      	beq.n	8001778 <_malloc_r+0x58>
 80017a8:	425a      	negs	r2, r3
 80017aa:	50e2      	str	r2, [r4, r3]
 80017ac:	e7e4      	b.n	8001778 <_malloc_r+0x58>
 80017ae:	684b      	ldr	r3, [r1, #4]
 80017b0:	6063      	str	r3, [r4, #4]
 80017b2:	000c      	movs	r4, r1
 80017b4:	e7ee      	b.n	8001794 <_malloc_r+0x74>
 80017b6:	000c      	movs	r4, r1
 80017b8:	6849      	ldr	r1, [r1, #4]
 80017ba:	e7c2      	b.n	8001742 <_malloc_r+0x22>
 80017bc:	2303      	movs	r3, #3
 80017be:	1cc4      	adds	r4, r0, #3
 80017c0:	439c      	bics	r4, r3
 80017c2:	42a0      	cmp	r0, r4
 80017c4:	d0e0      	beq.n	8001788 <_malloc_r+0x68>
 80017c6:	1a21      	subs	r1, r4, r0
 80017c8:	0030      	movs	r0, r6
 80017ca:	f000 f807 	bl	80017dc <_sbrk_r>
 80017ce:	1c43      	adds	r3, r0, #1
 80017d0:	d1da      	bne.n	8001788 <_malloc_r+0x68>
 80017d2:	e7c6      	b.n	8001762 <_malloc_r+0x42>
 80017d4:	200000f4 	.word	0x200000f4
 80017d8:	200000f8 	.word	0x200000f8

080017dc <_sbrk_r>:
 80017dc:	2300      	movs	r3, #0
 80017de:	b570      	push	{r4, r5, r6, lr}
 80017e0:	4c06      	ldr	r4, [pc, #24]	; (80017fc <_sbrk_r+0x20>)
 80017e2:	0005      	movs	r5, r0
 80017e4:	0008      	movs	r0, r1
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	f7ff fec4 	bl	8001574 <_sbrk>
 80017ec:	1c43      	adds	r3, r0, #1
 80017ee:	d103      	bne.n	80017f8 <_sbrk_r+0x1c>
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d000      	beq.n	80017f8 <_sbrk_r+0x1c>
 80017f6:	602b      	str	r3, [r5, #0]
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	20000100 	.word	0x20000100

08001800 <_srand48_r>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001804:	0005      	movs	r5, r0
 8001806:	000c      	movs	r4, r1
 8001808:	4f12      	ldr	r7, [pc, #72]	; (8001854 <_srand48_r+0x54>)
 800180a:	4e13      	ldr	r6, [pc, #76]	; (8001858 <_srand48_r+0x58>)
 800180c:	2b00      	cmp	r3, #0
 800180e:	d113      	bne.n	8001838 <_srand48_r+0x38>
 8001810:	2018      	movs	r0, #24
 8001812:	f7ff ff73 	bl	80016fc <malloc>
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <_srand48_r+0x5c>)
 8001818:	63a8      	str	r0, [r5, #56]	; 0x38
 800181a:	8043      	strh	r3, [r0, #2]
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_srand48_r+0x60>)
 800181e:	2201      	movs	r2, #1
 8001820:	8083      	strh	r3, [r0, #4]
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_srand48_r+0x64>)
 8001824:	8007      	strh	r7, [r0, #0]
 8001826:	8103      	strh	r3, [r0, #8]
 8001828:	2305      	movs	r3, #5
 800182a:	8143      	strh	r3, [r0, #10]
 800182c:	3306      	adds	r3, #6
 800182e:	8183      	strh	r3, [r0, #12]
 8001830:	2300      	movs	r3, #0
 8001832:	6102      	str	r2, [r0, #16]
 8001834:	6143      	str	r3, [r0, #20]
 8001836:	80c6      	strh	r6, [r0, #6]
 8001838:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <_srand48_r+0x64>)
 800183c:	805c      	strh	r4, [r3, #2]
 800183e:	811a      	strh	r2, [r3, #8]
 8001840:	2205      	movs	r2, #5
 8001842:	0c24      	lsrs	r4, r4, #16
 8001844:	815a      	strh	r2, [r3, #10]
 8001846:	3206      	adds	r2, #6
 8001848:	801f      	strh	r7, [r3, #0]
 800184a:	80de      	strh	r6, [r3, #6]
 800184c:	809c      	strh	r4, [r3, #4]
 800184e:	819a      	strh	r2, [r3, #12]
 8001850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	0000330e 	.word	0x0000330e
 8001858:	ffffe66d 	.word	0xffffe66d
 800185c:	ffffabcd 	.word	0xffffabcd
 8001860:	00001234 	.word	0x00001234
 8001864:	ffffdeec 	.word	0xffffdeec

08001868 <srand48>:
 8001868:	b510      	push	{r4, lr}
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <srand48+0x10>)
 800186c:	0001      	movs	r1, r0
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f7ff ffc6 	bl	8001800 <_srand48_r>
 8001874:	bd10      	pop	{r4, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000004 	.word	0x20000004

0800187c <__malloc_lock>:
 800187c:	4770      	bx	lr

0800187e <__malloc_unlock>:
 800187e:	4770      	bx	lr

08001880 <_init>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr

0800188c <_fini>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr
