
Jornadas de formacion IV Ceeibis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000068  08002a18  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000144  08002a18  00020144  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dc0d  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001de9  00000000  00000000  0002dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000960  00000000  00000000  0002fa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000888  00000000  00000000  000303e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000045d2  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002bcd  00000000  00000000  00035242  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00037e0f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022a8  00000000  00000000  00037e8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002960 	.word	0x08002960

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002960 	.word	0x08002960

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f001 ffef 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000424:	f000 ffc0 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 8000428:	0002      	movs	r2, r0
 800042a:	23fa      	movs	r3, #250	; 0xfa
 800042c:	0099      	lsls	r1, r3, #2
 800042e:	0010      	movs	r0, r2
 8000430:	f7ff fe6a 	bl	8000108 <__udivsi3>
 8000434:	0003      	movs	r3, r0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 f90e 	bl	8000658 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	425b      	negs	r3, r3
 8000442:	2200      	movs	r2, #0
 8000444:	0018      	movs	r0, r3
 8000446:	f000 f8e1 	bl	800060c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  uwTick++;
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <HAL_IncTick+0x14>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	4b02      	ldr	r3, [pc, #8]	; (8000468 <HAL_IncTick+0x14>)
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000fc 	.word	0x200000fc

0800046c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  return uwTick;
 8000470:	4b02      	ldr	r3, [pc, #8]	; (800047c <HAL_GetTick+0x10>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	200000fc 	.word	0x200000fc

08000480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff0 	bl	800046c <HAL_GetTick>
 800048c:	0003      	movs	r3, r0
 800048e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	d002      	beq.n	80004a0 <HAL_Delay+0x20>
  {
     wait++;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	f7ff ffe3 	bl	800046c <HAL_GetTick>
 80004a6:	0002      	movs	r2, r0
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1ad2      	subs	r2, r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d3f7      	bcc.n	80004a2 <HAL_Delay+0x22>
  {
  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b004      	add	sp, #16
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <NVIC_EnableIRQ+0x28>)
 80004ca:	1dfa      	adds	r2, r7, #7
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	0011      	movs	r1, r2
 80004d0:	221f      	movs	r2, #31
 80004d2:	400a      	ands	r2, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	4091      	lsls	r1, r2
 80004d8:	000a      	movs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b7f      	cmp	r3, #127	; 0x7f
 80004fc:	d932      	bls.n	8000564 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fe:	4c2f      	ldr	r4, [pc, #188]	; (80005bc <NVIC_SetPriority+0xd4>)
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	230f      	movs	r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	3b08      	subs	r3, #8
 800050c:	0899      	lsrs	r1, r3, #2
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <NVIC_SetPriority+0xd4>)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0018      	movs	r0, r3
 8000516:	230f      	movs	r3, #15
 8000518:	4003      	ands	r3, r0
 800051a:	3b08      	subs	r3, #8
 800051c:	089b      	lsrs	r3, r3, #2
 800051e:	3306      	adds	r3, #6
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	3304      	adds	r3, #4
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1dfa      	adds	r2, r7, #7
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	0010      	movs	r0, r2
 800052e:	2203      	movs	r2, #3
 8000530:	4002      	ands	r2, r0
 8000532:	00d2      	lsls	r2, r2, #3
 8000534:	20ff      	movs	r0, #255	; 0xff
 8000536:	4090      	lsls	r0, r2
 8000538:	0002      	movs	r2, r0
 800053a:	43d2      	mvns	r2, r2
 800053c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	019b      	lsls	r3, r3, #6
 8000542:	20ff      	movs	r0, #255	; 0xff
 8000544:	4018      	ands	r0, r3
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	001d      	movs	r5, r3
 800054c:	2303      	movs	r3, #3
 800054e:	402b      	ands	r3, r5
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4098      	lsls	r0, r3
 8000554:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	431a      	orrs	r2, r3
 8000558:	1d8b      	adds	r3, r1, #6
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	18e3      	adds	r3, r4, r3
 800055e:	3304      	adds	r3, #4
 8000560:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000562:	e027      	b.n	80005b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000564:	4c16      	ldr	r4, [pc, #88]	; (80005c0 <NVIC_SetPriority+0xd8>)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b25b      	sxtb	r3, r3
 800056c:	089b      	lsrs	r3, r3, #2
 800056e:	4914      	ldr	r1, [pc, #80]	; (80005c0 <NVIC_SetPriority+0xd8>)
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	b252      	sxtb	r2, r2
 8000576:	0892      	lsrs	r2, r2, #2
 8000578:	32c0      	adds	r2, #192	; 0xc0
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	5852      	ldr	r2, [r2, r1]
 800057e:	1df9      	adds	r1, r7, #7
 8000580:	7809      	ldrb	r1, [r1, #0]
 8000582:	0008      	movs	r0, r1
 8000584:	2103      	movs	r1, #3
 8000586:	4001      	ands	r1, r0
 8000588:	00c9      	lsls	r1, r1, #3
 800058a:	20ff      	movs	r0, #255	; 0xff
 800058c:	4088      	lsls	r0, r1
 800058e:	0001      	movs	r1, r0
 8000590:	43c9      	mvns	r1, r1
 8000592:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	0192      	lsls	r2, r2, #6
 8000598:	20ff      	movs	r0, #255	; 0xff
 800059a:	4010      	ands	r0, r2
 800059c:	1dfa      	adds	r2, r7, #7
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	0015      	movs	r5, r2
 80005a2:	2203      	movs	r2, #3
 80005a4:	402a      	ands	r2, r5
 80005a6:	00d2      	lsls	r2, r2, #3
 80005a8:	4090      	lsls	r0, r2
 80005aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ac:	430a      	orrs	r2, r1
 80005ae:	33c0      	adds	r3, #192	; 0xc0
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	511a      	str	r2, [r3, r4]
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bdb0      	pop	{r4, r5, r7, pc}
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000e100 	.word	0xe000e100

080005c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <SysTick_Config+0x40>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d901      	bls.n	80005da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d6:	2301      	movs	r3, #1
 80005d8:	e010      	b.n	80005fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SysTick_Config+0x44>)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	3a01      	subs	r2, #1
 80005e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005e2:	2301      	movs	r3, #1
 80005e4:	425b      	negs	r3, r3
 80005e6:	2103      	movs	r1, #3
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff7d 	bl	80004e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SysTick_Config+0x44>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SysTick_Config+0x44>)
 80005f6:	2207      	movs	r2, #7
 80005f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	00ffffff 	.word	0x00ffffff
 8000608:	e000e010 	.word	0xe000e010

0800060c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	230f      	movs	r3, #15
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	1c02      	adds	r2, r0, #0
 800061c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff5c 	bl	80004e8 <NVIC_SetPriority>
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}

08000638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff36 	bl	80004bc <NVIC_EnableIRQ>
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ffae 	bl	80005c4 <SysTick_Config>
 8000668:	0003      	movs	r3, r0
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800068a:	e155      	b.n	8000938 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2101      	movs	r1, #1
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	4091      	lsls	r1, r2
 8000696:	000a      	movs	r2, r1
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d100      	bne.n	80006a4 <HAL_GPIO_Init+0x30>
 80006a2:	e146      	b.n	8000932 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d003      	beq.n	80006b4 <HAL_GPIO_Init+0x40>
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2b12      	cmp	r3, #18
 80006b2:	d123      	bne.n	80006fc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	08da      	lsrs	r2, r3, #3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3208      	adds	r2, #8
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	58d3      	ldr	r3, [r2, r3]
 80006c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	2207      	movs	r2, #7
 80006c6:	4013      	ands	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	220f      	movs	r2, #15
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0013      	movs	r3, r2
 80006d0:	43da      	mvns	r2, r3
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2107      	movs	r1, #7
 80006e0:	400b      	ands	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	409a      	lsls	r2, r3
 80006e6:	0013      	movs	r3, r2
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	08da      	lsrs	r2, r3, #3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3208      	adds	r2, #8
 80006f6:	0092      	lsls	r2, r2, #2
 80006f8:	6939      	ldr	r1, [r7, #16]
 80006fa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2203      	movs	r2, #3
 8000708:	409a      	lsls	r2, r3
 800070a:	0013      	movs	r3, r2
 800070c:	43da      	mvns	r2, r3
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2203      	movs	r2, #3
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	409a      	lsls	r2, r3
 8000722:	0013      	movs	r3, r2
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d00b      	beq.n	8000750 <HAL_GPIO_Init+0xdc>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d007      	beq.n	8000750 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000744:	2b11      	cmp	r3, #17
 8000746:	d003      	beq.n	8000750 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b12      	cmp	r3, #18
 800074e:	d130      	bne.n	80007b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	2203      	movs	r2, #3
 800075c:	409a      	lsls	r2, r3
 800075e:	0013      	movs	r3, r2
 8000760:	43da      	mvns	r2, r3
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	409a      	lsls	r2, r3
 8000772:	0013      	movs	r3, r2
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	4313      	orrs	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000786:	2201      	movs	r2, #1
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
 800078c:	0013      	movs	r3, r2
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	2201      	movs	r2, #1
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	2203      	movs	r2, #3
 80007be:	409a      	lsls	r2, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	43da      	mvns	r2, r3
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	4013      	ands	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	409a      	lsls	r2, r3
 80007d4:	0013      	movs	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	4313      	orrs	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	055b      	lsls	r3, r3, #21
 80007ea:	4013      	ands	r3, r2
 80007ec:	d100      	bne.n	80007f0 <HAL_GPIO_Init+0x17c>
 80007ee:	e0a0      	b.n	8000932 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f0:	4b57      	ldr	r3, [pc, #348]	; (8000950 <HAL_GPIO_Init+0x2dc>)
 80007f2:	4a57      	ldr	r2, [pc, #348]	; (8000950 <HAL_GPIO_Init+0x2dc>)
 80007f4:	6992      	ldr	r2, [r2, #24]
 80007f6:	2101      	movs	r1, #1
 80007f8:	430a      	orrs	r2, r1
 80007fa:	619a      	str	r2, [r3, #24]
 80007fc:	4b54      	ldr	r3, [pc, #336]	; (8000950 <HAL_GPIO_Init+0x2dc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	2201      	movs	r2, #1
 8000802:	4013      	ands	r3, r2
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000808:	4a52      	ldr	r2, [pc, #328]	; (8000954 <HAL_GPIO_Init+0x2e0>)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	3302      	adds	r3, #2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	589b      	ldr	r3, [r3, r2]
 8000814:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	2203      	movs	r2, #3
 800081a:	4013      	ands	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	220f      	movs	r2, #15
 8000820:	409a      	lsls	r2, r3
 8000822:	0013      	movs	r3, r2
 8000824:	43da      	mvns	r2, r3
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	2390      	movs	r3, #144	; 0x90
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	429a      	cmp	r2, r3
 8000834:	d019      	beq.n	800086a <HAL_GPIO_Init+0x1f6>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a47      	ldr	r2, [pc, #284]	; (8000958 <HAL_GPIO_Init+0x2e4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d013      	beq.n	8000866 <HAL_GPIO_Init+0x1f2>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a46      	ldr	r2, [pc, #280]	; (800095c <HAL_GPIO_Init+0x2e8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d00d      	beq.n	8000862 <HAL_GPIO_Init+0x1ee>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a45      	ldr	r2, [pc, #276]	; (8000960 <HAL_GPIO_Init+0x2ec>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0x1ea>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a44      	ldr	r2, [pc, #272]	; (8000964 <HAL_GPIO_Init+0x2f0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_GPIO_Init+0x1e6>
 8000856:	2304      	movs	r3, #4
 8000858:	e008      	b.n	800086c <HAL_GPIO_Init+0x1f8>
 800085a:	2305      	movs	r3, #5
 800085c:	e006      	b.n	800086c <HAL_GPIO_Init+0x1f8>
 800085e:	2303      	movs	r3, #3
 8000860:	e004      	b.n	800086c <HAL_GPIO_Init+0x1f8>
 8000862:	2302      	movs	r3, #2
 8000864:	e002      	b.n	800086c <HAL_GPIO_Init+0x1f8>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <HAL_GPIO_Init+0x1f8>
 800086a:	2300      	movs	r3, #0
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	2103      	movs	r1, #3
 8000870:	400a      	ands	r2, r1
 8000872:	0092      	lsls	r2, r2, #2
 8000874:	4093      	lsls	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800087c:	4935      	ldr	r1, [pc, #212]	; (8000954 <HAL_GPIO_Init+0x2e0>)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	3302      	adds	r3, #2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	43da      	mvns	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	025b      	lsls	r3, r3, #9
 80008a2:	4013      	ands	r3, r2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	43da      	mvns	r2, r3
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	029b      	lsls	r3, r3, #10
 80008cc:	4013      	ands	r3, r2
 80008ce:	d003      	beq.n	80008d8 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	43da      	mvns	r2, r3
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	035b      	lsls	r3, r3, #13
 80008f6:	4013      	ands	r3, r2
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	43da      	mvns	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	039b      	lsls	r3, r3, #14
 8000920:	4013      	ands	r3, r2
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_GPIO_Init+0x2f4>)
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	40da      	lsrs	r2, r3
 8000940:	1e13      	subs	r3, r2, #0
 8000942:	d000      	beq.n	8000946 <HAL_GPIO_Init+0x2d2>
 8000944:	e6a2      	b.n	800068c <HAL_GPIO_Init+0x18>
  } 
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b006      	add	sp, #24
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000
 8000958:	48000400 	.word	0x48000400
 800095c:	48000800 	.word	0x48000800
 8000960:	48000c00 	.word	0x48000c00
 8000964:	48001000 	.word	0x48001000
 8000968:	40010400 	.word	0x40010400

0800096c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	0008      	movs	r0, r1
 8000976:	0011      	movs	r1, r2
 8000978:	1cbb      	adds	r3, r7, #2
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	801a      	strh	r2, [r3, #0]
 800097e:	1c7b      	adds	r3, r7, #1
 8000980:	1c0a      	adds	r2, r1, #0
 8000982:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000984:	1c7b      	adds	r3, r7, #1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800098c:	1cbb      	adds	r3, r7, #2
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000994:	e003      	b.n	800099e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000996:	1cbb      	adds	r3, r7, #2
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	1dba      	adds	r2, r7, #6
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	d008      	beq.n	80009d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80009c2:	1dba      	adds	r2, r7, #6
 80009c4:	8812      	ldrh	r2, [r2, #0]
 80009c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fb1f 	bl	8002010 <HAL_GPIO_EXTI_Callback>
  }
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40010400 	.word	0x40010400

080009e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	d100      	bne.n	80009f8 <HAL_RCC_OscConfig+0x18>
 80009f6:	e08d      	b.n	8000b14 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009f8:	4bc5      	ldr	r3, [pc, #788]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	220c      	movs	r2, #12
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d00e      	beq.n	8000a22 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a04:	4bc2      	ldr	r3, [pc, #776]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	220c      	movs	r2, #12
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d116      	bne.n	8000a3e <HAL_RCC_OscConfig+0x5e>
 8000a10:	4bbf      	ldr	r3, [pc, #764]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	23c0      	movs	r3, #192	; 0xc0
 8000a16:	025b      	lsls	r3, r3, #9
 8000a18:	401a      	ands	r2, r3
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d10d      	bne.n	8000a3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a22:	4bbb      	ldr	r3, [pc, #748]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0x50>
 8000a2e:	e070      	b.n	8000b12 <HAL_RCC_OscConfig+0x132>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d000      	beq.n	8000a3a <HAL_RCC_OscConfig+0x5a>
 8000a38:	e06b      	b.n	8000b12 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e327      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d107      	bne.n	8000a56 <HAL_RCC_OscConfig+0x76>
 8000a46:	4bb2      	ldr	r3, [pc, #712]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a48:	4ab1      	ldr	r2, [pc, #708]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0249      	lsls	r1, r1, #9
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e02f      	b.n	8000ab6 <HAL_RCC_OscConfig+0xd6>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10c      	bne.n	8000a78 <HAL_RCC_OscConfig+0x98>
 8000a5e:	4bac      	ldr	r3, [pc, #688]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a60:	4aab      	ldr	r2, [pc, #684]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	49ab      	ldr	r1, [pc, #684]	; (8000d14 <HAL_RCC_OscConfig+0x334>)
 8000a66:	400a      	ands	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	4ba9      	ldr	r3, [pc, #676]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a6c:	4aa8      	ldr	r2, [pc, #672]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	49a9      	ldr	r1, [pc, #676]	; (8000d18 <HAL_RCC_OscConfig+0x338>)
 8000a72:	400a      	ands	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e01e      	b.n	8000ab6 <HAL_RCC_OscConfig+0xd6>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d10e      	bne.n	8000a9e <HAL_RCC_OscConfig+0xbe>
 8000a80:	4ba3      	ldr	r3, [pc, #652]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a82:	4aa3      	ldr	r2, [pc, #652]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	02c9      	lsls	r1, r1, #11
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	4ba0      	ldr	r3, [pc, #640]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a90:	4a9f      	ldr	r2, [pc, #636]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0249      	lsls	r1, r1, #9
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	e00b      	b.n	8000ab6 <HAL_RCC_OscConfig+0xd6>
 8000a9e:	4b9c      	ldr	r3, [pc, #624]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000aa0:	4a9b      	ldr	r2, [pc, #620]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	499b      	ldr	r1, [pc, #620]	; (8000d14 <HAL_RCC_OscConfig+0x334>)
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	4b99      	ldr	r3, [pc, #612]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000aac:	4a98      	ldr	r2, [pc, #608]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4999      	ldr	r1, [pc, #612]	; (8000d18 <HAL_RCC_OscConfig+0x338>)
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d014      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000abe:	f7ff fcd5 	bl	800046c <HAL_GetTick>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac6:	e008      	b.n	8000ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac8:	f7ff fcd0 	bl	800046c <HAL_GetTick>
 8000acc:	0002      	movs	r2, r0
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b64      	cmp	r3, #100	; 0x64
 8000ad4:	d901      	bls.n	8000ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e2d9      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ada:	4b8d      	ldr	r3, [pc, #564]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	029b      	lsls	r3, r3, #10
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d0f0      	beq.n	8000ac8 <HAL_RCC_OscConfig+0xe8>
 8000ae6:	e015      	b.n	8000b14 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fcc0 	bl	800046c <HAL_GetTick>
 8000aec:	0003      	movs	r3, r0
 8000aee:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af0:	e008      	b.n	8000b04 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af2:	f7ff fcbb 	bl	800046c <HAL_GetTick>
 8000af6:	0002      	movs	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b64      	cmp	r3, #100	; 0x64
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e2c4      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	4b82      	ldr	r3, [pc, #520]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	029b      	lsls	r3, r3, #10
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d1f0      	bne.n	8000af2 <HAL_RCC_OscConfig+0x112>
 8000b10:	e000      	b.n	8000b14 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d100      	bne.n	8000b20 <HAL_RCC_OscConfig+0x140>
 8000b1e:	e06c      	b.n	8000bfa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b20:	4b7b      	ldr	r3, [pc, #492]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	220c      	movs	r2, #12
 8000b26:	4013      	ands	r3, r2
 8000b28:	d00e      	beq.n	8000b48 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b2a:	4b79      	ldr	r3, [pc, #484]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	220c      	movs	r2, #12
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d11f      	bne.n	8000b76 <HAL_RCC_OscConfig+0x196>
 8000b36:	4b76      	ldr	r3, [pc, #472]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	401a      	ands	r2, r3
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d116      	bne.n	8000b76 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b48:	4b71      	ldr	r3, [pc, #452]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d005      	beq.n	8000b5e <HAL_RCC_OscConfig+0x17e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d001      	beq.n	8000b5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e297      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5e:	4a6c      	ldr	r2, [pc, #432]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b60:	4b6b      	ldr	r3, [pc, #428]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	21f8      	movs	r1, #248	; 0xf8
 8000b66:	438b      	bics	r3, r1
 8000b68:	0019      	movs	r1, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b74:	e041      	b.n	8000bfa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d024      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b7e:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b80:	4a63      	ldr	r2, [pc, #396]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fc6f 	bl	800046c <HAL_GetTick>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b92:	e008      	b.n	8000ba6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b94:	f7ff fc6a 	bl	800046c <HAL_GetTick>
 8000b98:	0002      	movs	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e273      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba6:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	d0f1      	beq.n	8000b94 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb0:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000bb2:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	21f8      	movs	r1, #248	; 0xf8
 8000bb8:	438b      	bics	r3, r1
 8000bba:	0019      	movs	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e018      	b.n	8000bfa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000bca:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	438a      	bics	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fc4a 	bl	800046c <HAL_GetTick>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bdc:	e008      	b.n	8000bf0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bde:	f7ff fc45 	bl	800046c <HAL_GetTick>
 8000be2:	0002      	movs	r2, r0
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e24e      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf0:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d1f1      	bne.n	8000bde <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2208      	movs	r2, #8
 8000c00:	4013      	ands	r3, r2
 8000c02:	d036      	beq.n	8000c72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d019      	beq.n	8000c40 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c18:	f7ff fc28 	bl	800046c <HAL_GetTick>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c22:	f7ff fc23 	bl	800046c <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e22c      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d0f1      	beq.n	8000c22 <HAL_RCC_OscConfig+0x242>
 8000c3e:	e018      	b.n	8000c72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c46:	2101      	movs	r1, #1
 8000c48:	438a      	bics	r2, r1
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fc0e 	bl	800046c <HAL_GetTick>
 8000c50:	0003      	movs	r3, r0
 8000c52:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c54:	e008      	b.n	8000c68 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c56:	f7ff fc09 	bl	800046c <HAL_GetTick>
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d901      	bls.n	8000c68 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000c64:	2303      	movs	r3, #3
 8000c66:	e212      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d1f1      	bne.n	8000c56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2204      	movs	r2, #4
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d100      	bne.n	8000c7e <HAL_RCC_OscConfig+0x29e>
 8000c7c:	e0b6      	b.n	8000dec <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c7e:	2317      	movs	r3, #23
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	055b      	lsls	r3, r3, #21
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d111      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000c96:	69d2      	ldr	r2, [r2, #28]
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	61da      	str	r2, [r3, #28]
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	055b      	lsls	r3, r3, #21
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cae:	2317      	movs	r3, #23
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_RCC_OscConfig+0x33c>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d11a      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_RCC_OscConfig+0x33c>)
 8000cc4:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <HAL_RCC_OscConfig+0x33c>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0049      	lsls	r1, r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fbcc 	bl	800046c <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cda:	f7ff fbc7 	bl	800046c <HAL_GetTick>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e1d0      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_RCC_OscConfig+0x33c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10f      	bne.n	8000d20 <HAL_RCC_OscConfig+0x340>
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <HAL_RCC_OscConfig+0x330>)
 8000d04:	6a12      	ldr	r2, [r2, #32]
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	621a      	str	r2, [r3, #32]
 8000d0c:	e036      	b.n	8000d7c <HAL_RCC_OscConfig+0x39c>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000
 8000d14:	fffeffff 	.word	0xfffeffff
 8000d18:	fffbffff 	.word	0xfffbffff
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0x362>
 8000d28:	4bc9      	ldr	r3, [pc, #804]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d2a:	4ac9      	ldr	r2, [pc, #804]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d2c:	6a12      	ldr	r2, [r2, #32]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	438a      	bics	r2, r1
 8000d32:	621a      	str	r2, [r3, #32]
 8000d34:	4bc6      	ldr	r3, [pc, #792]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d36:	4ac6      	ldr	r2, [pc, #792]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d38:	6a12      	ldr	r2, [r2, #32]
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	621a      	str	r2, [r3, #32]
 8000d40:	e01c      	b.n	8000d7c <HAL_RCC_OscConfig+0x39c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x384>
 8000d4a:	4bc1      	ldr	r3, [pc, #772]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d4c:	4ac0      	ldr	r2, [pc, #768]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d4e:	6a12      	ldr	r2, [r2, #32]
 8000d50:	2104      	movs	r1, #4
 8000d52:	430a      	orrs	r2, r1
 8000d54:	621a      	str	r2, [r3, #32]
 8000d56:	4bbe      	ldr	r3, [pc, #760]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d58:	4abd      	ldr	r2, [pc, #756]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d5a:	6a12      	ldr	r2, [r2, #32]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	621a      	str	r2, [r3, #32]
 8000d62:	e00b      	b.n	8000d7c <HAL_RCC_OscConfig+0x39c>
 8000d64:	4bba      	ldr	r3, [pc, #744]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d66:	4aba      	ldr	r2, [pc, #744]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d68:	6a12      	ldr	r2, [r2, #32]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	621a      	str	r2, [r3, #32]
 8000d70:	4bb7      	ldr	r3, [pc, #732]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d72:	4ab7      	ldr	r2, [pc, #732]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000d74:	6a12      	ldr	r2, [r2, #32]
 8000d76:	2104      	movs	r1, #4
 8000d78:	438a      	bics	r2, r1
 8000d7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d014      	beq.n	8000dae <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d84:	f7ff fb72 	bl	800046c <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8c:	e009      	b.n	8000da2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fb6d 	bl	800046c <HAL_GetTick>
 8000d92:	0002      	movs	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	4aae      	ldr	r2, [pc, #696]	; (8001054 <HAL_RCC_OscConfig+0x674>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e175      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da2:	4bab      	ldr	r3, [pc, #684]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x3ae>
 8000dac:	e013      	b.n	8000dd6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fb5d 	bl	800046c <HAL_GetTick>
 8000db2:	0003      	movs	r3, r0
 8000db4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db6:	e009      	b.n	8000dcc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db8:	f7ff fb58 	bl	800046c <HAL_GetTick>
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	4aa4      	ldr	r2, [pc, #656]	; (8001054 <HAL_RCC_OscConfig+0x674>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e160      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dcc:	4ba0      	ldr	r3, [pc, #640]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dd6:	2317      	movs	r3, #23
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d105      	bne.n	8000dec <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000de2:	4a9b      	ldr	r2, [pc, #620]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000de4:	69d2      	ldr	r2, [r2, #28]
 8000de6:	499c      	ldr	r1, [pc, #624]	; (8001058 <HAL_RCC_OscConfig+0x678>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2210      	movs	r2, #16
 8000df2:	4013      	ands	r3, r2
 8000df4:	d063      	beq.n	8000ebe <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d12a      	bne.n	8000e54 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dfe:	4b94      	ldr	r3, [pc, #592]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e00:	4a93      	ldr	r2, [pc, #588]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e04:	2104      	movs	r1, #4
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e0a:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e0c:	4a90      	ldr	r2, [pc, #576]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e16:	f7ff fb29 	bl	800046c <HAL_GetTick>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e20:	f7ff fb24 	bl	800046c <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e12d      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e32:	4b87      	ldr	r3, [pc, #540]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	2202      	movs	r2, #2
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d0f1      	beq.n	8000e20 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e3c:	4a84      	ldr	r2, [pc, #528]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e3e:	4b84      	ldr	r3, [pc, #528]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	21f8      	movs	r1, #248	; 0xf8
 8000e44:	438b      	bics	r3, r1
 8000e46:	0019      	movs	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	6353      	str	r3, [r2, #52]	; 0x34
 8000e52:	e034      	b.n	8000ebe <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	3305      	adds	r3, #5
 8000e5a:	d111      	bne.n	8000e80 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e5c:	4b7c      	ldr	r3, [pc, #496]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e5e:	4a7c      	ldr	r2, [pc, #496]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e62:	2104      	movs	r1, #4
 8000e64:	438a      	bics	r2, r1
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e68:	4a79      	ldr	r2, [pc, #484]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e6a:	4b79      	ldr	r3, [pc, #484]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6e:	21f8      	movs	r1, #248	; 0xf8
 8000e70:	438b      	bics	r3, r1
 8000e72:	0019      	movs	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e7e:	e01e      	b.n	8000ebe <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e80:	4b73      	ldr	r3, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e82:	4a73      	ldr	r2, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e86:	2104      	movs	r1, #4
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000e8c:	4b70      	ldr	r3, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e8e:	4a70      	ldr	r2, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e92:	2101      	movs	r1, #1
 8000e94:	438a      	bics	r2, r1
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fae8 	bl	800046c <HAL_GetTick>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ea2:	f7ff fae3 	bl	800046c <HAL_GetTick>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e0ec      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000eb4:	4b66      	ldr	r3, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	2202      	movs	r2, #2
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d1f1      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d05c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ec8:	4b61      	ldr	r3, [pc, #388]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b0c      	cmp	r3, #12
 8000ed2:	d00e      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ed4:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	220c      	movs	r2, #12
 8000eda:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d114      	bne.n	8000f0a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	23c0      	movs	r3, #192	; 0xc0
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	401a      	ands	r2, r3
 8000eea:	23c0      	movs	r3, #192	; 0xc0
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d10b      	bne.n	8000f0a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	4013      	ands	r3, r2
 8000efc:	d040      	beq.n	8000f80 <HAL_RCC_OscConfig+0x5a0>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d03c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c1      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01b      	beq.n	8000f4a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f12:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0249      	lsls	r1, r1, #9
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff faa4 	bl	800046c <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f2a:	f7ff fa9f 	bl	800046c <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e0a8      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	025b      	lsls	r3, r3, #9
 8000f44:	4013      	ands	r3, r2
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x54a>
 8000f48:	e01b      	b.n	8000f82 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f4c:	4a40      	ldr	r2, [pc, #256]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f50:	4942      	ldr	r1, [pc, #264]	; (800105c <HAL_RCC_OscConfig+0x67c>)
 8000f52:	400a      	ands	r2, r1
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fa89 	bl	800046c <HAL_GetTick>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f60:	f7ff fa84 	bl	800046c <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e08d      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f72:	4b37      	ldr	r3, [pc, #220]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x580>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f80:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d100      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5ac>
 8000f8a:	e07f      	b.n	800108c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	220c      	movs	r2, #12
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5ba>
 8000f98:	e076      	b.n	8001088 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d14b      	bne.n	800103a <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	492d      	ldr	r1, [pc, #180]	; (8001060 <HAL_RCC_OscConfig+0x680>)
 8000faa:	400a      	ands	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fa5d 	bl	800046c <HAL_GetTick>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb8:	f7ff fa58 	bl	800046c <HAL_GetTick>
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e061      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	049b      	lsls	r3, r3, #18
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	210f      	movs	r1, #15
 8000fde:	438b      	bics	r3, r1
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	491c      	ldr	r1, [pc, #112]	; (8001064 <HAL_RCC_OscConfig+0x684>)
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0449      	lsls	r1, r1, #17
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fa2c 	bl	800046c <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fa27 	bl	800046c <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e030      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	049b      	lsls	r3, r3, #18
 8001034:	4013      	ands	r3, r2
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x63a>
 8001038:	e028      	b.n	800108c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_RCC_OscConfig+0x670>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <HAL_RCC_OscConfig+0x680>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fa11 	bl	800046c <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x69a>
 8001050:	40021000 	.word	0x40021000
 8001054:	00001388 	.word	0x00001388
 8001058:	efffffff 	.word	0xefffffff
 800105c:	fffeffff 	.word	0xfffeffff
 8001060:	feffffff 	.word	0xfeffffff
 8001064:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fa00 	bl	800046c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e009      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_RCC_OscConfig+0x6b8>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	049b      	lsls	r3, r3, #18
 8001082:	4013      	ands	r3, r2
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x688>
 8001086:	e001      	b.n	800108c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b006      	add	sp, #24
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010aa:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	401a      	ands	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d211      	bcs.n	80010dc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 80010ba:	4a76      	ldr	r2, [pc, #472]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	0011      	movs	r1, r2
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	401a      	ands	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0d7      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2202      	movs	r2, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	d009      	beq.n	80010fa <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e6:	4a6c      	ldr	r2, [pc, #432]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 80010e8:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	21f0      	movs	r1, #240	; 0xf0
 80010ee:	438b      	bics	r3, r1
 80010f0:	0019      	movs	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	430b      	orrs	r3, r1
 80010f8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d100      	bne.n	8001106 <HAL_RCC_ClockConfig+0x6a>
 8001104:	e089      	b.n	800121a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b62      	ldr	r3, [pc, #392]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d120      	bne.n	800115c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0b6      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	049b      	lsls	r3, r3, #18
 800112e:	4013      	ands	r3, r2
 8001130:	d114      	bne.n	800115c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0aa      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800113e:	4b56      	ldr	r3, [pc, #344]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	4013      	ands	r3, r2
 8001148:	d108      	bne.n	800115c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e09e      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e097      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 800115e:	4b4e      	ldr	r3, [pc, #312]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2103      	movs	r1, #3
 8001164:	438b      	bics	r3, r1
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	430b      	orrs	r3, r1
 800116e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff f97c 	bl	800046c <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d111      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	e009      	b.n	8001196 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001182:	f7ff f973 	bl	800046c <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	4a43      	ldr	r2, [pc, #268]	; (800129c <HAL_RCC_ClockConfig+0x200>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e07a      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	220c      	movs	r2, #12
 800119c:	4013      	ands	r3, r2
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d1ef      	bne.n	8001182 <HAL_RCC_ClockConfig+0xe6>
 80011a2:	e03a      	b.n	800121a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d111      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ac:	e009      	b.n	80011c2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ae:	f7ff f95d 	bl	800046c <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4a38      	ldr	r2, [pc, #224]	; (800129c <HAL_RCC_ClockConfig+0x200>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e064      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	220c      	movs	r2, #12
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d1ef      	bne.n	80011ae <HAL_RCC_ClockConfig+0x112>
 80011ce:	e024      	b.n	800121a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d11b      	bne.n	8001210 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80011d8:	e009      	b.n	80011ee <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011da:	f7ff f947 	bl	800046c <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a2d      	ldr	r2, [pc, #180]	; (800129c <HAL_RCC_ClockConfig+0x200>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e04e      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	220c      	movs	r2, #12
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d1ef      	bne.n	80011da <HAL_RCC_ClockConfig+0x13e>
 80011fa:	e00e      	b.n	800121a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff f936 	bl	800046c <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <HAL_RCC_ClockConfig+0x200>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e03d      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	220c      	movs	r2, #12
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	401a      	ands	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d911      	bls.n	800124c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	2101      	movs	r1, #1
 8001230:	438a      	bics	r2, r1
 8001232:	0011      	movs	r1, r2
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_RCC_ClockConfig+0x1f8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	401a      	ands	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e01f      	b.n	800128c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2204      	movs	r2, #4
 8001252:	4013      	ands	r3, r2
 8001254:	d008      	beq.n	8001268 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4910      	ldr	r1, [pc, #64]	; (80012a0 <HAL_RCC_ClockConfig+0x204>)
 800125e:	4019      	ands	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	430b      	orrs	r3, r1
 8001266:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001268:	f000 f820 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 800126c:	0001      	movs	r1, r0
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1fc>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	220f      	movs	r2, #15
 8001276:	4013      	ands	r3, r2
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_RCC_ClockConfig+0x208>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	000a      	movs	r2, r1
 800127e:	40da      	lsrs	r2, r3
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x20c>)
 8001282:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff f8c9 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40022000 	.word	0x40022000
 8001298:	40021000 	.word	0x40021000
 800129c:	00001388 	.word	0x00001388
 80012a0:	fffff8ff 	.word	0xfffff8ff
 80012a4:	08002998 	.word	0x08002998
 80012a8:	20000000 	.word	0x20000000

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08f      	sub	sp, #60	; 0x3c
 80012b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012b2:	2314      	movs	r3, #20
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_RCC_GetSysClockFreq+0xe8>)
 80012b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012ba:	c313      	stmia	r3!, {r0, r1, r4}
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4a35      	ldr	r2, [pc, #212]	; (8001398 <HAL_RCC_GetSysClockFreq+0xec>)
 80012c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012c6:	c313      	stmia	r3!, {r0, r1, r4}
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_RCC_GetSysClockFreq+0xf0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	220c      	movs	r2, #12
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d006      	beq.n	80012fe <HAL_RCC_GetSysClockFreq+0x52>
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d043      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0xd0>
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d144      	bne.n	8001382 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012fc:	e044      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	220f      	movs	r2, #15
 8001304:	4013      	ands	r3, r2
 8001306:	2214      	movs	r2, #20
 8001308:	18ba      	adds	r2, r7, r2
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	220f      	movs	r2, #15
 8001314:	4013      	ands	r3, r2
 8001316:	1d3a      	adds	r2, r7, #4
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800131c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131e:	23c0      	movs	r3, #192	; 0xc0
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	401a      	ands	r2, r3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	429a      	cmp	r2, r3
 800132a:	d109      	bne.n	8001340 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800132c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001330:	f7fe feea 	bl	8000108 <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	4353      	muls	r3, r2
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
 800133e:	e01a      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001342:	23c0      	movs	r3, #192	; 0xc0
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	401a      	ands	r2, r3
 8001348:	23c0      	movs	r3, #192	; 0xc0
 800134a:	025b      	lsls	r3, r3, #9
 800134c:	429a      	cmp	r2, r3
 800134e:	d109      	bne.n	8001364 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001354:	f7fe fed8 	bl	8000108 <__udivsi3>
 8001358:	0003      	movs	r3, r0
 800135a:	001a      	movs	r2, r3
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	4353      	muls	r3, r2
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
 8001362:	e008      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001368:	f7fe fece 	bl	8000108 <__udivsi3>
 800136c:	0003      	movs	r3, r0
 800136e:	001a      	movs	r2, r3
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	4353      	muls	r3, r2
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800137a:	e005      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001380:	e002      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001386:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b00f      	add	sp, #60	; 0x3c
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	08002978 	.word	0x08002978
 8001398:	08002988 	.word	0x08002988
 800139c:	40021000 	.word	0x40021000
 80013a0:	007a1200 	.word	0x007a1200
 80013a4:	02dc6c00 	.word	0x02dc6c00

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e01e      	b.n	800140c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	223d      	movs	r2, #61	; 0x3d
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	223c      	movs	r2, #60	; 0x3c
 80013de:	2100      	movs	r1, #0
 80013e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 f825 	bl	8002434 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	223d      	movs	r2, #61	; 0x3d
 80013ee:	2102      	movs	r1, #2
 80013f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	0019      	movs	r1, r3
 80013fc:	0010      	movs	r0, r2
 80013fe:	f000 f8c1 	bl	8001584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	223d      	movs	r2, #61	; 0x3d
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	223c      	movs	r2, #60	; 0x3c
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800142a:	2302      	movs	r3, #2
 800142c:	e0a4      	b.n	8001578 <HAL_TIM_PWM_ConfigChannel+0x164>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	223c      	movs	r2, #60	; 0x3c
 8001432:	2101      	movs	r1, #1
 8001434:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	223d      	movs	r2, #61	; 0x3d
 800143a:	2102      	movs	r1, #2
 800143c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d029      	beq.n	8001498 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001444:	d802      	bhi.n	800144c <HAL_TIM_PWM_ConfigChannel+0x38>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800144a:	e08c      	b.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800144c:	2b08      	cmp	r3, #8
 800144e:	d046      	beq.n	80014de <HAL_TIM_PWM_ConfigChannel+0xca>
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d065      	beq.n	8001520 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001454:	e087      	b.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f912 	bl	8001688 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	6992      	ldr	r2, [r2, #24]
 800146e:	2108      	movs	r1, #8
 8001470:	430a      	orrs	r2, r1
 8001472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6992      	ldr	r2, [r2, #24]
 800147e:	2104      	movs	r1, #4
 8001480:	438a      	bics	r2, r1
 8001482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	6991      	ldr	r1, [r2, #24]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	6912      	ldr	r2, [r2, #16]
 8001492:	430a      	orrs	r2, r1
 8001494:	619a      	str	r2, [r3, #24]
    break;
 8001496:	e066      	b.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f97f 	bl	80017a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6992      	ldr	r2, [r2, #24]
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0109      	lsls	r1, r1, #4
 80014b4:	430a      	orrs	r2, r1
 80014b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	6992      	ldr	r2, [r2, #24]
 80014c2:	492f      	ldr	r1, [pc, #188]	; (8001580 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	6991      	ldr	r1, [r2, #24]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	6912      	ldr	r2, [r2, #16]
 80014d6:	0212      	lsls	r2, r2, #8
 80014d8:	430a      	orrs	r2, r1
 80014da:	619a      	str	r2, [r3, #24]
    break;
 80014dc:	e043      	b.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	0011      	movs	r1, r2
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f9e6 	bl	80018b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	69d2      	ldr	r2, [r2, #28]
 80014f6:	2108      	movs	r1, #8
 80014f8:	430a      	orrs	r2, r1
 80014fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	69d2      	ldr	r2, [r2, #28]
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	69d1      	ldr	r1, [r2, #28]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	6912      	ldr	r2, [r2, #16]
 800151a:	430a      	orrs	r2, r1
 800151c:	61da      	str	r2, [r3, #28]
    break;
 800151e:	e022      	b.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	0011      	movs	r1, r2
 8001528:	0018      	movs	r0, r3
 800152a:	f000 fa51 	bl	80019d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	69d2      	ldr	r2, [r2, #28]
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0109      	lsls	r1, r1, #4
 800153c:	430a      	orrs	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	69d2      	ldr	r2, [r2, #28]
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800154c:	400a      	ands	r2, r1
 800154e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	69d1      	ldr	r1, [r2, #28]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	6912      	ldr	r2, [r2, #16]
 800155e:	0212      	lsls	r2, r2, #8
 8001560:	430a      	orrs	r2, r1
 8001562:	61da      	str	r2, [r3, #28]
    break;
 8001564:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	223d      	movs	r2, #61	; 0x3d
 800156a:	2101      	movs	r1, #1
 800156c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	223c      	movs	r2, #60	; 0x3c
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	fffffbff 	.word	0xfffffbff

08001584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <TIM_Base_SetConfig+0xe8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d008      	beq.n	80015b2 <TIM_Base_SetConfig+0x2e>
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d003      	beq.n	80015b2 <TIM_Base_SetConfig+0x2e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a30      	ldr	r2, [pc, #192]	; (8001670 <TIM_Base_SetConfig+0xec>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d108      	bne.n	80015c4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2270      	movs	r2, #112	; 0x70
 80015b6:	4393      	bics	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a29      	ldr	r2, [pc, #164]	; (800166c <TIM_Base_SetConfig+0xe8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d018      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d013      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <TIM_Base_SetConfig+0xec>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00f      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <TIM_Base_SetConfig+0xf0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00b      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <TIM_Base_SetConfig+0xf4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <TIM_Base_SetConfig+0xf8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d003      	beq.n	80015fe <TIM_Base_SetConfig+0x7a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <TIM_Base_SetConfig+0xfc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d108      	bne.n	8001610 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <TIM_Base_SetConfig+0x100>)
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	4393      	bics	r3, r2
 8001616:	001a      	movs	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <TIM_Base_SetConfig+0xe8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00b      	beq.n	8001656 <TIM_Base_SetConfig+0xd2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <TIM_Base_SetConfig+0xf4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <TIM_Base_SetConfig+0xd2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <TIM_Base_SetConfig+0xf8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d003      	beq.n	8001656 <TIM_Base_SetConfig+0xd2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <TIM_Base_SetConfig+0xfc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d103      	bne.n	800165e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	615a      	str	r2, [r3, #20]
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b004      	add	sp, #16
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40000400 	.word	0x40000400
 8001674:	40002000 	.word	0x40002000
 8001678:	40014000 	.word	0x40014000
 800167c:	40014400 	.word	0x40014400
 8001680:	40014800 	.word	0x40014800
 8001684:	fffffcff 	.word	0xfffffcff

08001688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	001a      	movs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2270      	movs	r2, #112	; 0x70
 80016c2:	4393      	bics	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2203      	movs	r2, #3
 80016ca:	4393      	bics	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2202      	movs	r2, #2
 80016dc:	4393      	bics	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <TIM_OC1_SetConfig+0x104>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00b      	beq.n	800170a <TIM_OC1_SetConfig+0x82>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <TIM_OC1_SetConfig+0x108>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <TIM_OC1_SetConfig+0x82>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a25      	ldr	r2, [pc, #148]	; (8001794 <TIM_OC1_SetConfig+0x10c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <TIM_OC1_SetConfig+0x82>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <TIM_OC1_SetConfig+0x110>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10c      	bne.n	8001724 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2208      	movs	r2, #8
 800170e:	4393      	bics	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2204      	movs	r2, #4
 8001720:	4393      	bics	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a19      	ldr	r2, [pc, #100]	; (800178c <TIM_OC1_SetConfig+0x104>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00b      	beq.n	8001744 <TIM_OC1_SetConfig+0xbc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <TIM_OC1_SetConfig+0x108>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <TIM_OC1_SetConfig+0xbc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <TIM_OC1_SetConfig+0x10c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d003      	beq.n	8001744 <TIM_OC1_SetConfig+0xbc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a16      	ldr	r2, [pc, #88]	; (8001798 <TIM_OC1_SetConfig+0x110>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <TIM_OC1_SetConfig+0x114>)
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <TIM_OC1_SetConfig+0x118>)
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	621a      	str	r2, [r3, #32]
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b006      	add	sp, #24
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40012c00 	.word	0x40012c00
 8001790:	40014000 	.word	0x40014000
 8001794:	40014400 	.word	0x40014400
 8001798:	40014800 	.word	0x40014800
 800179c:	fffffeff 	.word	0xfffffeff
 80017a0:	fffffdff 	.word	0xfffffdff

080017a4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	2210      	movs	r2, #16
 80017c0:	4393      	bics	r3, r2
 80017c2:	001a      	movs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <TIM_OC2_SetConfig+0xf4>)
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a2d      	ldr	r2, [pc, #180]	; (800189c <TIM_OC2_SetConfig+0xf8>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2220      	movs	r2, #32
 80017fa:	4393      	bics	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <TIM_OC2_SetConfig+0xfc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	4393      	bics	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	4393      	bics	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <TIM_OC2_SetConfig+0xfc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00b      	beq.n	800184e <TIM_OC2_SetConfig+0xaa>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <TIM_OC2_SetConfig+0x100>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <TIM_OC2_SetConfig+0xaa>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <TIM_OC2_SetConfig+0x104>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d003      	beq.n	800184e <TIM_OC2_SetConfig+0xaa>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <TIM_OC2_SetConfig+0x108>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d113      	bne.n	8001876 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <TIM_OC2_SetConfig+0x10c>)
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <TIM_OC2_SetConfig+0x110>)
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	621a      	str	r2, [r3, #32]
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b006      	add	sp, #24
 8001896:	bd80      	pop	{r7, pc}
 8001898:	ffff8fff 	.word	0xffff8fff
 800189c:	fffffcff 	.word	0xfffffcff
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40014000 	.word	0x40014000
 80018a8:	40014400 	.word	0x40014400
 80018ac:	40014800 	.word	0x40014800
 80018b0:	fffffbff 	.word	0xfffffbff
 80018b4:	fffff7ff 	.word	0xfffff7ff

080018b8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <TIM_OC3_SetConfig+0xf0>)
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2270      	movs	r2, #112	; 0x70
 80018f0:	4393      	bics	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4393      	bics	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <TIM_OC3_SetConfig+0xf4>)
 800190a:	4013      	ands	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <TIM_OC3_SetConfig+0xf8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10d      	bne.n	800193e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <TIM_OC3_SetConfig+0xfc>)
 8001926:	4013      	ands	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <TIM_OC3_SetConfig+0x100>)
 800193a:	4013      	ands	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <TIM_OC3_SetConfig+0xf8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00b      	beq.n	800195e <TIM_OC3_SetConfig+0xa6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <TIM_OC3_SetConfig+0x104>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <TIM_OC3_SetConfig+0xa6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <TIM_OC3_SetConfig+0x108>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d003      	beq.n	800195e <TIM_OC3_SetConfig+0xa6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <TIM_OC3_SetConfig+0x10c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d113      	bne.n	8001986 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <TIM_OC3_SetConfig+0x110>)
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <TIM_OC3_SetConfig+0x114>)
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	621a      	str	r2, [r3, #32]
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	fffffeff 	.word	0xfffffeff
 80019ac:	fffffdff 	.word	0xfffffdff
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	fffff7ff 	.word	0xfffff7ff
 80019b8:	fffffbff 	.word	0xfffffbff
 80019bc:	40014000 	.word	0x40014000
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800
 80019c8:	ffffefff 	.word	0xffffefff
 80019cc:	ffffdfff 	.word	0xffffdfff

080019d0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <TIM_OC4_SetConfig+0xbc>)
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <TIM_OC4_SetConfig+0xc0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <TIM_OC4_SetConfig+0xc4>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <TIM_OC4_SetConfig+0xc8>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	031b      	lsls	r3, r3, #12
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <TIM_OC4_SetConfig+0xcc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00b      	beq.n	8001a54 <TIM_OC4_SetConfig+0x84>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <TIM_OC4_SetConfig+0xd0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <TIM_OC4_SetConfig+0x84>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <TIM_OC4_SetConfig+0xd4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <TIM_OC4_SetConfig+0x84>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <TIM_OC4_SetConfig+0xd8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d109      	bne.n	8001a68 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <TIM_OC4_SetConfig+0xdc>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	621a      	str	r2, [r3, #32]
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b006      	add	sp, #24
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	ffffefff 	.word	0xffffefff
 8001a90:	ffff8fff 	.word	0xffff8fff
 8001a94:	fffffcff 	.word	0xfffffcff
 8001a98:	ffffdfff 	.word	0xffffdfff
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40014800 	.word	0x40014800
 8001aac:	ffffbfff 	.word	0xffffbfff

08001ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	223c      	movs	r2, #60	; 0x3c
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e032      	b.n	8001b2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	223c      	movs	r2, #60	; 0x3c
 8001acc:	2101      	movs	r1, #1
 8001ace:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	223d      	movs	r2, #61	; 0x3d
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6852      	ldr	r2, [r2, #4]
 8001ae2:	2170      	movs	r1, #112	; 0x70
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6851      	ldr	r1, [r2, #4]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	6892      	ldr	r2, [r2, #8]
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	438a      	bics	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	6891      	ldr	r1, [r2, #8]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	6852      	ldr	r2, [r2, #4]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	223d      	movs	r2, #61	; 0x3d
 8001b20:	2101      	movs	r1, #1
 8001b22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	223c      	movs	r2, #60	; 0x3c
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	223c      	movs	r2, #60	; 0x3c
 8001b4a:	5c9b      	ldrb	r3, [r3, r2]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e04d      	b.n	8001bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	223c      	movs	r2, #60	; 0x3c
 8001b58:	2101      	movs	r1, #1
 8001b5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	223d      	movs	r2, #61	; 0x3d
 8001b60:	2102      	movs	r1, #2
 8001b62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	4393      	bics	r3, r2
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8001b78:	401a      	ands	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8001b86:	401a      	ands	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8001b94:	401a      	ands	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8001bcc:	401a      	ands	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223d      	movs	r2, #61	; 0x3d
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223c      	movs	r2, #60	; 0x3c
 8001bea:	2100      	movs	r1, #0
 8001bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	fffffcff 	.word	0xfffffcff
 8001bfc:	fffffbff 	.word	0xfffffbff
 8001c00:	fffff7ff 	.word	0xfffff7ff
 8001c04:	ffffefff 	.word	0xffffefff
 8001c08:	ffffdfff 	.word	0xffffdfff
 8001c0c:	ffffbfff 	.word	0xffffbfff
 8001c10:	ffff7fff 	.word	0xffff7fff

08001c14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c1a:	f7fe fbeb 	bl	80003f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c1e:	f000 f853 	bl	8001cc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c22:	f000 f933 	bl	8001e8c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001c26:	f000 f893 	bl	8001d50 <MX_TIM1_Init>

	/* USER CODE BEGIN 2 */
	//LED Test
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <main+0xac>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	0019      	movs	r1, r3
 8001c34:	f7fe fe9a 	bl	800096c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001c38:	23fa      	movs	r3, #250	; 0xfa
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe fc1f 	bl	8000480 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <main+0xac>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	f7fe fe8e 	bl	800096c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <main+0xac>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	0019      	movs	r1, r3
 8001c5a:	f7fe fe87 	bl	800096c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001c5e:	23fa      	movs	r3, #250	; 0xfa
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7fe fc0c 	bl	8000480 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <main+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	0019      	movs	r1, r3
 8001c72:	f7fe fe7b 	bl	800096c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c76:	2390      	movs	r3, #144	; 0x90
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe fe74 	bl	800096c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001c84:	23fa      	movs	r3, #250	; 0xfa
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fbf9 	bl	8000480 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c8e:	2390      	movs	r3, #144	; 0x90
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe fe68 	bl	800096c <HAL_GPIO_WritePin>
	simon_t* simon = simon_init(HAL_GetTick());
 8001c9c:	f7fe fbe6 	bl	800046c <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f9cc 	bl	8002040 <simon_init>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	607b      	str	r3, [r7, #4]
	_IRQ_BTN_handler = simon->_IRQ_BTN_handler;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <main+0xb0>)
 8001cb2:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		simon_play(simon);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 f9ea 	bl	8002090 <simon_play>
 8001cbc:	e7fa      	b.n	8001cb4 <main+0xa0>
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	20000084 	.word	0x20000084

08001cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b092      	sub	sp, #72	; 0x48
 8001ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cce:	2314      	movs	r3, #20
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	2334      	movs	r3, #52	; 0x34
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f000 fd41 	bl	8002760 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f000 fd3a 	bl	8002760 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cec:	2314      	movs	r3, #20
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfc:	2314      	movs	r3, #20
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2210      	movs	r2, #16
 8001d02:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d04:	2314      	movs	r3, #20
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d0c:	2314      	movs	r3, #20
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe fe65 	bl	80009e0 <HAL_RCC_OscConfig>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x56>
		Error_Handler();
 8001d1a:	f000 f98b 	bl	8002034 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2100      	movs	r1, #0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff f9ae 	bl	800109c <HAL_RCC_ClockConfig>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x80>
		Error_Handler();
 8001d44:	f000 f976 	bl	8002034 <Error_Handler>
	}
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b012      	add	sp, #72	; 0x48
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b090      	sub	sp, #64	; 0x40
 8001d54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d56:	2338      	movs	r3, #56	; 0x38
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	001a      	movs	r2, r3
 8001d60:	2100      	movs	r1, #0
 8001d62:	f000 fcfd 	bl	8002760 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d66:	231c      	movs	r3, #28
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	231c      	movs	r3, #28
 8001d6e:	001a      	movs	r2, r3
 8001d70:	2100      	movs	r1, #0
 8001d72:	f000 fcf5 	bl	8002760 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001d76:	003b      	movs	r3, r7
 8001d78:	0018      	movs	r0, r3
 8001d7a:	231c      	movs	r3, #28
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f000 fcee 	bl	8002760 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <MX_TIM1_Init+0x138>)
 8001d88:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 66;
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001d8c:	2242      	movs	r2, #66	; 0x42
 8001d8e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 200;
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001d98:	22c8      	movs	r2, #200	; 0xc8
 8001d9a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fb03 	bl	80013bc <HAL_TIM_PWM_Init>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x6e>
		Error_Handler();
 8001dba:	f000 f93b 	bl	8002034 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2338      	movs	r3, #56	; 0x38
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2338      	movs	r3, #56	; 0x38
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001dce:	2338      	movs	r3, #56	; 0x38
 8001dd0:	18fa      	adds	r2, r7, r3
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fe6a 	bl	8001ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8001de0:	f000 f928 	bl	8002034 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de4:	231c      	movs	r3, #28
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2260      	movs	r2, #96	; 0x60
 8001dea:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 100;
 8001dec:	231c      	movs	r3, #28
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2264      	movs	r2, #100	; 0x64
 8001df2:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	231c      	movs	r3, #28
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dfc:	231c      	movs	r3, #28
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e04:	231c      	movs	r3, #28
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e0c:	231c      	movs	r3, #28
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e14:	231c      	movs	r3, #28
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001e1c:	231c      	movs	r3, #28
 8001e1e:	18f9      	adds	r1, r7, r3
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff faf5 	bl	8001414 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM1_Init+0xe2>
			!= HAL_OK) {
		Error_Handler();
 8001e2e:	f000 f901 	bl	8002034 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e32:	003b      	movs	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e38:	003b      	movs	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3e:	003b      	movs	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001e44:	003b      	movs	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e4a:	003b      	movs	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e50:	003b      	movs	r3, r7
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0192      	lsls	r2, r2, #6
 8001e56:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e58:	003b      	movs	r3, r7
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001e5e:	003a      	movs	r2, r7
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001e62:	0011      	movs	r1, r2
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff fe67 	bl	8001b38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0x122>
			!= HAL_OK) {
		Error_Handler();
 8001e6e:	f000 f8e1 	bl	8002034 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <MX_TIM1_Init+0x134>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 fafd 	bl	8002474 <HAL_TIM_MspPostInit>

}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b010      	add	sp, #64	; 0x40
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	20000100 	.word	0x20000100
 8001e88:	40012c00 	.word	0x40012c00

08001e8c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e92:	230c      	movs	r3, #12
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	0018      	movs	r0, r3
 8001e98:	2314      	movs	r3, #20
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f000 fc5f 	bl	8002760 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001ea2:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ea4:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ea6:	6952      	ldr	r2, [r2, #20]
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0289      	lsls	r1, r1, #10
 8001eac:	430a      	orrs	r2, r1
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001ebe:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ec2:	6952      	ldr	r2, [r2, #20]
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	02c9      	lsls	r1, r1, #11
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	02db      	lsls	r3, r3, #11
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001ede:	6952      	ldr	r2, [r2, #20]
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0309      	lsls	r1, r1, #12
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <MX_GPIO_Init+0x16c>)
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	031b      	lsls	r3, r3, #12
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001ef6:	4941      	ldr	r1, [pc, #260]	; (8001ffc <MX_GPIO_Init+0x170>)
 8001ef8:	2390      	movs	r3, #144	; 0x90
 8001efa:	05db      	lsls	r3, r3, #23
 8001efc:	2200      	movs	r2, #0
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe fd34 	bl	800096c <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9,
 8001f04:	493e      	ldr	r1, [pc, #248]	; (8002000 <MX_GPIO_Init+0x174>)
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <MX_GPIO_Init+0x178>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7fe fd2e 	bl	800096c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <MX_GPIO_Init+0x17c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7fe fd28 	bl	800096c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
	 PA4 PA5 PA6 PA7
	 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <MX_GPIO_Init+0x170>)
 8001f22:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	230c      	movs	r3, #12
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	230c      	movs	r3, #12
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	18fa      	adds	r2, r7, r3
 8001f40:	2390      	movs	r3, #144	; 0x90
 8001f42:	05db      	lsls	r3, r3, #23
 8001f44:	0011      	movs	r1, r2
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7fe fb94 	bl	8000674 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB6 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <MX_GPIO_Init+0x174>)
 8001f52:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	230c      	movs	r3, #12
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	230c      	movs	r3, #12
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <MX_GPIO_Init+0x178>)
 8001f72:	0019      	movs	r1, r3
 8001f74:	0010      	movs	r0, r2
 8001f76:	f7fe fb7d 	bl	8000674 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	230c      	movs	r3, #12
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	230c      	movs	r3, #12
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <MX_GPIO_Init+0x17c>)
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	f7fe fb66 	bl	8000674 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2238      	movs	r2, #56	; 0x38
 8001fae:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	4a15      	ldr	r2, [pc, #84]	; (800200c <MX_GPIO_Init+0x180>)
 8001fb6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <MX_GPIO_Init+0x178>)
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	0010      	movs	r0, r2
 8001fca:	f7fe fb53 	bl	8000674 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2006      	movs	r0, #6
 8001fd4:	f7fe fb1a 	bl	800060c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f7fe fb2d 	bl	8000638 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f7fe fb12 	bl	800060c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001fe8:	2007      	movs	r0, #7
 8001fea:	f7fe fb25 	bl	8000638 <HAL_NVIC_EnableIRQ>

}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b008      	add	sp, #32
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	000002ff 	.word	0x000002ff
 8002000:	00000341 	.word	0x00000341
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	10110000 	.word	0x10110000

08002010 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	0002      	movs	r2, r0
 8002018:	1dbb      	adds	r3, r7, #6
 800201a:	801a      	strh	r2, [r3, #0]
	_IRQ_BTN_handler(GPIO_Pin);
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_GPIO_EXTI_Callback+0x20>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1dba      	adds	r2, r7, #6
 8002022:	8812      	ldrh	r2, [r2, #0]
 8002024:	0010      	movs	r0, r2
 8002026:	4798      	blx	r3
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000084 	.word	0x20000084

08002034 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <simon_init>:
static void simon_generate_random_sequence(simon_t* game_data);
static void simon_display_leds(simon_t* game_data);
static void simon_check_user_sequence(simon_t* game_data);


simon_t* simon_init(long int random_seed){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	static simon_t game_data[1];
	srand48(random_seed);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0018      	movs	r0, r3
 800204c:	f000 fc7c 	bl	8002948 <srand48>
	game_data->level = 0;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <simon_init+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
	game_data->game_flags = SIMON_GAME_ON;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <simon_init+0x40>)
 8002058:	2201      	movs	r2, #1
 800205a:	721a      	strb	r2, [r3, #8]
	game_data->display_speed = 2;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <simon_init+0x40>)
 800205e:	2202      	movs	r2, #2
 8002060:	605a      	str	r2, [r3, #4]
	game_data->_IRQ_BTN_handler = simon_LL_init(&game_data->game_flags,game_data->user_sequence,&game_data->user_sequence_position);
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <simon_init+0x44>)
 8002064:	4908      	ldr	r1, [pc, #32]	; (8002088 <simon_init+0x48>)
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <simon_init+0x4c>)
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f8b9 	bl	80021e0 <simon_LL_init>
 800206e:	0002      	movs	r2, r0
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <simon_init+0x40>)
 8002072:	659a      	str	r2, [r3, #88]	; 0x58
	return game_data;
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <simon_init+0x40>)
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000088 	.word	0x20000088
 8002084:	20000090 	.word	0x20000090
 8002088:	200000b8 	.word	0x200000b8
 800208c:	200000dc 	.word	0x200000dc

08002090 <simon_play>:
void simon_reset(simon_t* game_data){
	game_data->level = 0;
	game_data->game_flags = SIMON_GAME_ON;
}

void simon_play(simon_t* game_data){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	game_data->level = 0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
	while(game_data->game_flags & SIMON_GAME_ON){
 800209e:	e028      	b.n	80020f2 <simon_play+0x62>
		game_data->level++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
		simon_generate_random_sequence(game_data);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f82a 	bl	8002106 <simon_generate_random_sequence>
		simon_display_leds(game_data);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 f849 	bl	800214c <simon_display_leds>
		game_data->game_flags |= SIMON_LISTEN_TO_SECUENCE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7a1b      	ldrb	r3, [r3, #8]
 80020be:	2204      	movs	r2, #4
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	721a      	strb	r2, [r3, #8]
		while(game_data->user_sequence_position < game_data->level);
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf9      	blt.n	80020ca <simon_play+0x3a>
		game_data->game_flags ^= SIMON_LISTEN_TO_SECUENCE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7a1b      	ldrb	r3, [r3, #8]
 80020da:	2204      	movs	r2, #4
 80020dc:	4053      	eors	r3, r2
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	721a      	strb	r2, [r3, #8]
		simon_check_user_sequence(game_data);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f852 	bl	8002190 <simon_check_user_sequence>
		game_data->user_sequence_position = 0;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
	while(game_data->game_flags & SIMON_GAME_ON){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7a1b      	ldrb	r3, [r3, #8]
 80020f6:	001a      	movs	r2, r3
 80020f8:	2301      	movs	r3, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1d0      	bne.n	80020a0 <simon_play+0x10>
	}
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}

08002106 <simon_generate_random_sequence>:


static void simon_generate_random_sequence(simon_t* game_data){
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < game_data->level; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e012      	b.n	800213a <simon_generate_random_sequence+0x34>
		game_data->led_sequence[i] = lrand48()%3;
 8002114:	f000 fb12 	bl	800273c <lrand48>
 8002118:	0003      	movs	r3, r0
 800211a:	2103      	movs	r1, #3
 800211c:	0018      	movs	r0, r3
 800211e:	f7fe f963 	bl	80003e8 <__aeabi_idivmod>
 8002122:	000b      	movs	r3, r1
 8002124:	0019      	movs	r1, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3302      	adds	r3, #2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	3304      	adds	r3, #4
 8002132:	6019      	str	r1, [r3, #0]
	for(i = 0; i < game_data->level; i++)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	dce7      	bgt.n	8002114 <simon_generate_random_sequence+0xe>
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}

0800214c <simon_display_leds>:

static void simon_display_leds(simon_t* game_data){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < game_data->level; i++){
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e00f      	b.n	800217a <simon_display_leds+0x2e>
		LED_display(game_data->led_sequence[i],game_data->display_speed);
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3302      	adds	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	18d3      	adds	r3, r2, r3
 8002164:	3304      	adds	r3, #4
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0019      	movs	r1, r3
 800216e:	0010      	movs	r0, r2
 8002170:	f000 f852 	bl	8002218 <LED_display>
	for(int i = 0; i < game_data->level; i++){
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	dcea      	bgt.n	800215a <simon_display_leds+0xe>
	}
	LED_toggle_effect();
 8002184:	f000 f8a6 	bl	80022d4 <LED_toggle_effect>
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}

08002190 <simon_check_user_sequence>:

static void simon_check_user_sequence(simon_t* game_data){
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < game_data->level;i++){
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e017      	b.n	80021ce <simon_check_user_sequence+0x3e>
		if(game_data->user_sequence[i] != game_data->led_sequence[i]){
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	320c      	adds	r2, #12
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	58d2      	ldr	r2, [r2, r3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3302      	adds	r3, #2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	18cb      	adds	r3, r1, r3
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d006      	beq.n	80021c8 <simon_check_user_sequence+0x38>
			game_data->game_flags ^= SIMON_GAME_ON;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7a1b      	ldrb	r3, [r3, #8]
 80021be:	2201      	movs	r2, #1
 80021c0:	4053      	eors	r3, r2
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < game_data->level;i++){
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dce2      	bgt.n	800219e <simon_check_user_sequence+0xe>
		}
	}
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b004      	add	sp, #16
 80021de:	bd80      	pop	{r7, pc}

080021e0 <simon_LL_init>:

static uint8_t* flags;
static int* user_sequence;
static int* user_sequence_position;

IRQ_fcn_t simon_LL_init(uint8_t* _flags, int* _user_sequence, int* _user_sequence_position){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	flags = _flags;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <simon_LL_init+0x28>)
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
	user_sequence = _user_sequence;
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <simon_LL_init+0x2c>)
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	601a      	str	r2, [r3, #0]
	user_sequence_position = _user_sequence_position;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <simon_LL_init+0x30>)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
	return BTN_interrupt_handler;
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <simon_LL_init+0x34>)
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200000e4 	.word	0x200000e4
 800220c:	200000e8 	.word	0x200000e8
 8002210:	200000ec 	.word	0x200000ec
 8002214:	08002359 	.word	0x08002359

08002218 <LED_display>:

void LED_display(int led_number,int display_speed){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
	switch(led_number){
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d01c      	beq.n	8002262 <LED_display+0x4a>
 8002228:	2b02      	cmp	r3, #2
 800222a:	d032      	beq.n	8002292 <LED_display+0x7a>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d000      	beq.n	8002232 <LED_display+0x1a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
		HAL_Delay(2000/display_speed);
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
		break;
	default:
		return;
 8002230:	e04a      	b.n	80022c8 <LED_display+0xb0>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4826      	ldr	r0, [pc, #152]	; (80022d0 <LED_display+0xb8>)
 8002238:	2201      	movs	r2, #1
 800223a:	0019      	movs	r1, r3
 800223c:	f7fe fb96 	bl	800096c <HAL_GPIO_WritePin>
		HAL_Delay(2000/display_speed);
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	23fa      	movs	r3, #250	; 0xfa
 8002244:	00d8      	lsls	r0, r3, #3
 8002246:	f7fd ffe9 	bl	800021c <__divsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe f917 	bl	8000480 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	481e      	ldr	r0, [pc, #120]	; (80022d0 <LED_display+0xb8>)
 8002258:	2200      	movs	r2, #0
 800225a:	0019      	movs	r1, r3
 800225c:	f7fe fb86 	bl	800096c <HAL_GPIO_WritePin>
		break;
 8002260:	e02f      	b.n	80022c2 <LED_display+0xaa>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	481a      	ldr	r0, [pc, #104]	; (80022d0 <LED_display+0xb8>)
 8002268:	2201      	movs	r2, #1
 800226a:	0019      	movs	r1, r3
 800226c:	f7fe fb7e 	bl	800096c <HAL_GPIO_WritePin>
		HAL_Delay(2000/display_speed);
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	23fa      	movs	r3, #250	; 0xfa
 8002274:	00d8      	lsls	r0, r3, #3
 8002276:	f7fd ffd1 	bl	800021c <__divsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe f8ff 	bl	8000480 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4812      	ldr	r0, [pc, #72]	; (80022d0 <LED_display+0xb8>)
 8002288:	2200      	movs	r2, #0
 800228a:	0019      	movs	r1, r3
 800228c:	f7fe fb6e 	bl	800096c <HAL_GPIO_WritePin>
		break;
 8002290:	e017      	b.n	80022c2 <LED_display+0xaa>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8002292:	2390      	movs	r3, #144	; 0x90
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	2201      	movs	r2, #1
 8002298:	2120      	movs	r1, #32
 800229a:	0018      	movs	r0, r3
 800229c:	f7fe fb66 	bl	800096c <HAL_GPIO_WritePin>
		HAL_Delay(2000/display_speed);
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	23fa      	movs	r3, #250	; 0xfa
 80022a4:	00d8      	lsls	r0, r3, #3
 80022a6:	f7fd ffb9 	bl	800021c <__divsi3>
 80022aa:	0003      	movs	r3, r0
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fe f8e7 	bl	8000480 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80022b2:	2390      	movs	r3, #144	; 0x90
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	2200      	movs	r2, #0
 80022b8:	2120      	movs	r1, #32
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fe fb56 	bl	800096c <HAL_GPIO_WritePin>
		break;
 80022c0:	46c0      	nop			; (mov r8, r8)
			//TODO: Error Handling
	}
	HAL_Delay(100);
 80022c2:	2064      	movs	r0, #100	; 0x64
 80022c4:	f7fe f8dc 	bl	8000480 <HAL_Delay>
}
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	48000400 	.word	0x48000400

080022d4 <LED_toggle_effect>:

void LED_toggle_effect(){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 2; i++){
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	e032      	b.n	8002346 <LED_toggle_effect+0x72>
		HAL_Delay(200);
 80022e0:	20c8      	movs	r0, #200	; 0xc8
 80022e2:	f7fe f8cd 	bl	8000480 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	481a      	ldr	r0, [pc, #104]	; (8002354 <LED_toggle_effect+0x80>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	0019      	movs	r1, r3
 80022f0:	f7fe fb3c 	bl	800096c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4816      	ldr	r0, [pc, #88]	; (8002354 <LED_toggle_effect+0x80>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	0019      	movs	r1, r3
 80022fe:	f7fe fb35 	bl	800096c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8002302:	2390      	movs	r3, #144	; 0x90
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	2201      	movs	r2, #1
 8002308:	2120      	movs	r1, #32
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe fb2e 	bl	800096c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8002310:	20c8      	movs	r0, #200	; 0xc8
 8002312:	f7fe f8b5 	bl	8000480 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	480e      	ldr	r0, [pc, #56]	; (8002354 <LED_toggle_effect+0x80>)
 800231c:	2200      	movs	r2, #0
 800231e:	0019      	movs	r1, r3
 8002320:	f7fe fb24 	bl	800096c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	480a      	ldr	r0, [pc, #40]	; (8002354 <LED_toggle_effect+0x80>)
 800232a:	2200      	movs	r2, #0
 800232c:	0019      	movs	r1, r3
 800232e:	f7fe fb1d 	bl	800096c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8002332:	2390      	movs	r3, #144	; 0x90
 8002334:	05db      	lsls	r3, r3, #23
 8002336:	2200      	movs	r2, #0
 8002338:	2120      	movs	r1, #32
 800233a:	0018      	movs	r0, r3
 800233c:	f7fe fb16 	bl	800096c <HAL_GPIO_WritePin>
	for(i = 0; i < 2; i++){
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3301      	adds	r3, #1
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	ddc9      	ble.n	80022e0 <LED_toggle_effect+0xc>
	}
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	48000400 	.word	0x48000400

08002358 <BTN_interrupt_handler>:

static void BTN_interrupt_handler(uint16_t GPIO_PIN){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	0002      	movs	r2, r0
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	801a      	strh	r2, [r3, #0]
	if((*flags) & SIMON_LISTEN_TO_SECUENCE && (*user_sequence_position) < SIMON_MAX_LEVEL){
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <BTN_interrupt_handler+0x88>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	001a      	movs	r2, r3
 800236c:	2304      	movs	r3, #4
 800236e:	4013      	ands	r3, r2
 8002370:	d032      	beq.n	80023d8 <BTN_interrupt_handler+0x80>
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b08      	cmp	r3, #8
 800237a:	dc2d      	bgt.n	80023d8 <BTN_interrupt_handler+0x80>
		switch(GPIO_PIN){
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d004      	beq.n	800238e <BTN_interrupt_handler+0x36>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d00c      	beq.n	80023a2 <BTN_interrupt_handler+0x4a>
 8002388:	2b08      	cmp	r3, #8
 800238a:	d014      	beq.n	80023b6 <BTN_interrupt_handler+0x5e>
			break;
		case GPIO_PIN_3:
			user_sequence[*(user_sequence_position)] = SIMON_BTN_3;
			break;
		default:
			return;
 800238c:	e024      	b.n	80023d8 <BTN_interrupt_handler+0x80>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_1;
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <BTN_interrupt_handler+0x90>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	18d3      	adds	r3, r2, r3
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
			break;
 80023a0:	e013      	b.n	80023ca <BTN_interrupt_handler+0x72>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_2;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <BTN_interrupt_handler+0x90>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	18d3      	adds	r3, r2, r3
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
			break;
 80023b4:	e009      	b.n	80023ca <BTN_interrupt_handler+0x72>
			user_sequence[*(user_sequence_position)] = SIMON_BTN_3;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <BTN_interrupt_handler+0x90>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	18d3      	adds	r3, r2, r3
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
			break;
 80023c8:	46c0      	nop			; (mov r8, r8)
		}
		*(user_sequence_position) += 1;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <BTN_interrupt_handler+0x8c>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	3201      	adds	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
	}
}
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	200000e4 	.word	0x200000e4
 80023e4:	200000ec 	.word	0x200000ec
 80023e8:	200000e8 	.word	0x200000e8

080023ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x44>)
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x44>)
 80023f6:	6992      	ldr	r2, [r2, #24]
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x44>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_MspInit+0x44>)
 800240c:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_MspInit+0x44>)
 800240e:	69d2      	ldr	r2, [r2, #28]
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0549      	lsls	r1, r1, #21
 8002414:	430a      	orrs	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_MspInit+0x44>)
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4013      	ands	r3, r2
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_TIM_PWM_MspInit+0x38>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10d      	bne.n	8002462 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_TIM_PWM_MspInit+0x3c>)
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_TIM_PWM_MspInit+0x3c>)
 800244a:	6992      	ldr	r2, [r2, #24]
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	0109      	lsls	r1, r1, #4
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_TIM_PWM_MspInit+0x3c>)
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	230c      	movs	r3, #12
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	0018      	movs	r0, r3
 8002482:	2314      	movs	r3, #20
 8002484:	001a      	movs	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	f000 f96a 	bl	8002760 <memset>
  if(htim->Instance==TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_TIM_MspPostInit+0x80>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12a      	bne.n	80024ec <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_TIM_MspPostInit+0x84>)
 8002498:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_TIM_MspPostInit+0x84>)
 800249a:	6952      	ldr	r2, [r2, #20]
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0289      	lsls	r1, r1, #10
 80024a0:	430a      	orrs	r2, r1
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_TIM_MspPostInit+0x84>)
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024b2:	230c      	movs	r3, #12
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	0052      	lsls	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	230c      	movs	r3, #12
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2202      	movs	r2, #2
 80024c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	230c      	movs	r3, #12
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	230c      	movs	r3, #12
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024d4:	230c      	movs	r3, #12
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2202      	movs	r2, #2
 80024da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	230c      	movs	r3, #12
 80024de:	18fa      	adds	r2, r7, r3
 80024e0:	2390      	movs	r3, #144	; 0x90
 80024e2:	05db      	lsls	r3, r3, #23
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fe f8c4 	bl	8000674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b008      	add	sp, #32
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40021000 	.word	0x40021000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002524:	f7fd ff96 	bl	8000454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002532:	2008      	movs	r0, #8
 8002534:	f7fe fa38 	bl	80009a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002542:	2010      	movs	r0, #16
 8002544:	f7fe fa30 	bl	80009a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002548:	2020      	movs	r0, #32
 800254a:	f7fe fa2d 	bl	80009a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x50>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x16>
		heap_end = &end;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <_sbrk+0x50>)
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <_sbrk+0x54>)
 8002568:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <_sbrk+0x50>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <_sbrk+0x50>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	18d3      	adds	r3, r2, r3
 8002578:	466a      	mov	r2, sp
 800257a:	4293      	cmp	r3, r2
 800257c:	d907      	bls.n	800258e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800257e:	f000 f883 	bl	8002688 <__errno>
 8002582:	0003      	movs	r3, r0
 8002584:	220c      	movs	r2, #12
 8002586:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002588:	2301      	movs	r3, #1
 800258a:	425b      	negs	r3, r3
 800258c:	e006      	b.n	800259c <_sbrk+0x48>
	}

	heap_end += incr;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <_sbrk+0x50>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	18d2      	adds	r2, r2, r3
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <_sbrk+0x50>)
 8002598:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200000f0 	.word	0x200000f0
 80025a8:	20000144 	.word	0x20000144

080025ac <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <SystemInit+0x70>)
 80025b2:	4a1a      	ldr	r2, [pc, #104]	; (800261c <SystemInit+0x70>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <SystemInit+0x70>)
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <SystemInit+0x70>)
 80025c0:	6852      	ldr	r2, [r2, #4]
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <SystemInit+0x74>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <SystemInit+0x70>)
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <SystemInit+0x70>)
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4915      	ldr	r1, [pc, #84]	; (8002624 <SystemInit+0x78>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <SystemInit+0x70>)
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <SystemInit+0x70>)
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4913      	ldr	r1, [pc, #76]	; (8002628 <SystemInit+0x7c>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <SystemInit+0x70>)
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <SystemInit+0x70>)
 80025e4:	6852      	ldr	r2, [r2, #4]
 80025e6:	4911      	ldr	r1, [pc, #68]	; (800262c <SystemInit+0x80>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <SystemInit+0x70>)
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <SystemInit+0x70>)
 80025f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025f2:	210f      	movs	r1, #15
 80025f4:	438a      	bics	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <SystemInit+0x70>)
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <SystemInit+0x70>)
 80025fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025fe:	490c      	ldr	r1, [pc, #48]	; (8002630 <SystemInit+0x84>)
 8002600:	400a      	ands	r2, r1
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SystemInit+0x70>)
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <SystemInit+0x70>)
 8002608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <SystemInit+0x70>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]

}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	08ffb80c 	.word	0x08ffb80c
 8002624:	fef6ffff 	.word	0xfef6ffff
 8002628:	fffbffff 	.word	0xfffbffff
 800262c:	ffc0ffff 	.word	0xffc0ffff
 8002630:	fffcfe2c 	.word	0xfffcfe2c

08002634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002636:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <LoopForever+0x6>)
  ldr r1, =_edata
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <LoopForever+0xa>)
  ldr r2, =_sidata
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <LoopForever+0xe>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002650:	4c0b      	ldr	r4, [pc, #44]	; (8002680 <LoopForever+0x16>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800265e:	f7ff ffa5 	bl	80025ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002662:	f000 f817 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002666:	f7ff fad5 	bl	8001c14 <main>

0800266a <LoopForever>:

LoopForever:
    b LoopForever
 800266a:	e7fe      	b.n	800266a <LoopForever>
  ldr   r0, =_estack
 800266c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002678:	080029b0 	.word	0x080029b0
  ldr r2, =_sbss
 800267c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002680:	20000144 	.word	0x20000144

08002684 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC1_COMP_IRQHandler>
	...

08002688 <__errno>:
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <__errno+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4770      	bx	lr
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20000004 	.word	0x20000004

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	2600      	movs	r6, #0
 80026a6:	f000 f95b 	bl	8002960 <_init>
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	00b3      	lsls	r3, r6, #2
 80026ba:	58eb      	ldr	r3, [r5, r3]
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	00b3      	lsls	r3, r6, #2
 80026c4:	58eb      	ldr	r3, [r5, r3]
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	080029a8 	.word	0x080029a8
 80026d0:	080029a8 	.word	0x080029a8
 80026d4:	080029a8 	.word	0x080029a8
 80026d8:	080029ac 	.word	0x080029ac

080026dc <_lrand48_r>:
 80026dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026de:	b510      	push	{r4, lr}
 80026e0:	0004      	movs	r4, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <_lrand48_r+0x36>
 80026e6:	2018      	movs	r0, #24
 80026e8:	f000 f830 	bl	800274c <malloc>
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <_lrand48_r+0x4c>)
 80026ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80026f0:	8003      	strh	r3, [r0, #0]
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <_lrand48_r+0x50>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	8043      	strh	r3, [r0, #2]
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <_lrand48_r+0x54>)
 80026fa:	8083      	strh	r3, [r0, #4]
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <_lrand48_r+0x58>)
 80026fe:	80c3      	strh	r3, [r0, #6]
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <_lrand48_r+0x5c>)
 8002702:	8103      	strh	r3, [r0, #8]
 8002704:	2305      	movs	r3, #5
 8002706:	8143      	strh	r3, [r0, #10]
 8002708:	3306      	adds	r3, #6
 800270a:	8183      	strh	r3, [r0, #12]
 800270c:	2300      	movs	r3, #0
 800270e:	6102      	str	r2, [r0, #16]
 8002710:	6143      	str	r3, [r0, #20]
 8002712:	0020      	movs	r0, r4
 8002714:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002716:	f000 f889 	bl	800282c <__dorand48>
 800271a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800271c:	8898      	ldrh	r0, [r3, #4]
 800271e:	885b      	ldrh	r3, [r3, #2]
 8002720:	03c0      	lsls	r0, r0, #15
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	18c0      	adds	r0, r0, r3
 8002726:	bd10      	pop	{r4, pc}
 8002728:	0000330e 	.word	0x0000330e
 800272c:	ffffabcd 	.word	0xffffabcd
 8002730:	00001234 	.word	0x00001234
 8002734:	ffffe66d 	.word	0xffffe66d
 8002738:	ffffdeec 	.word	0xffffdeec

0800273c <lrand48>:
 800273c:	b510      	push	{r4, lr}
 800273e:	4b02      	ldr	r3, [pc, #8]	; (8002748 <lrand48+0xc>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f7ff ffcb 	bl	80026dc <_lrand48_r>
 8002746:	bd10      	pop	{r4, pc}
 8002748:	20000004 	.word	0x20000004

0800274c <malloc>:
 800274c:	b510      	push	{r4, lr}
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <malloc+0x10>)
 8002750:	0001      	movs	r1, r0
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	f000 f80c 	bl	8002770 <_malloc_r>
 8002758:	bd10      	pop	{r4, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	20000004 	.word	0x20000004

08002760 <memset>:
 8002760:	0003      	movs	r3, r0
 8002762:	1882      	adds	r2, r0, r2
 8002764:	4293      	cmp	r3, r2
 8002766:	d100      	bne.n	800276a <memset+0xa>
 8002768:	4770      	bx	lr
 800276a:	7019      	strb	r1, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	e7f9      	b.n	8002764 <memset+0x4>

08002770 <_malloc_r>:
 8002770:	2303      	movs	r3, #3
 8002772:	b570      	push	{r4, r5, r6, lr}
 8002774:	1ccd      	adds	r5, r1, #3
 8002776:	439d      	bics	r5, r3
 8002778:	3508      	adds	r5, #8
 800277a:	0006      	movs	r6, r0
 800277c:	2d0c      	cmp	r5, #12
 800277e:	d21e      	bcs.n	80027be <_malloc_r+0x4e>
 8002780:	250c      	movs	r5, #12
 8002782:	42a9      	cmp	r1, r5
 8002784:	d81d      	bhi.n	80027c2 <_malloc_r+0x52>
 8002786:	0030      	movs	r0, r6
 8002788:	f000 f8e8 	bl	800295c <__malloc_lock>
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <_malloc_r+0xb4>)
 800278e:	6814      	ldr	r4, [r2, #0]
 8002790:	0021      	movs	r1, r4
 8002792:	2900      	cmp	r1, #0
 8002794:	d119      	bne.n	80027ca <_malloc_r+0x5a>
 8002796:	4c24      	ldr	r4, [pc, #144]	; (8002828 <_malloc_r+0xb8>)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <_malloc_r+0x36>
 800279e:	0030      	movs	r0, r6
 80027a0:	f000 f88c 	bl	80028bc <_sbrk_r>
 80027a4:	6020      	str	r0, [r4, #0]
 80027a6:	0029      	movs	r1, r5
 80027a8:	0030      	movs	r0, r6
 80027aa:	f000 f887 	bl	80028bc <_sbrk_r>
 80027ae:	1c43      	adds	r3, r0, #1
 80027b0:	d12c      	bne.n	800280c <_malloc_r+0x9c>
 80027b2:	230c      	movs	r3, #12
 80027b4:	0030      	movs	r0, r6
 80027b6:	6033      	str	r3, [r6, #0]
 80027b8:	f000 f8d1 	bl	800295e <__malloc_unlock>
 80027bc:	e003      	b.n	80027c6 <_malloc_r+0x56>
 80027be:	2d00      	cmp	r5, #0
 80027c0:	dadf      	bge.n	8002782 <_malloc_r+0x12>
 80027c2:	230c      	movs	r3, #12
 80027c4:	6033      	str	r3, [r6, #0]
 80027c6:	2000      	movs	r0, #0
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	680b      	ldr	r3, [r1, #0]
 80027cc:	1b5b      	subs	r3, r3, r5
 80027ce:	d41a      	bmi.n	8002806 <_malloc_r+0x96>
 80027d0:	2b0b      	cmp	r3, #11
 80027d2:	d903      	bls.n	80027dc <_malloc_r+0x6c>
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	18cc      	adds	r4, r1, r3
 80027d8:	6025      	str	r5, [r4, #0]
 80027da:	e003      	b.n	80027e4 <_malloc_r+0x74>
 80027dc:	428c      	cmp	r4, r1
 80027de:	d10e      	bne.n	80027fe <_malloc_r+0x8e>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	0030      	movs	r0, r6
 80027e6:	f000 f8ba 	bl	800295e <__malloc_unlock>
 80027ea:	0020      	movs	r0, r4
 80027ec:	2207      	movs	r2, #7
 80027ee:	300b      	adds	r0, #11
 80027f0:	1d23      	adds	r3, r4, #4
 80027f2:	4390      	bics	r0, r2
 80027f4:	1ac3      	subs	r3, r0, r3
 80027f6:	d0e7      	beq.n	80027c8 <_malloc_r+0x58>
 80027f8:	425a      	negs	r2, r3
 80027fa:	50e2      	str	r2, [r4, r3]
 80027fc:	e7e4      	b.n	80027c8 <_malloc_r+0x58>
 80027fe:	684b      	ldr	r3, [r1, #4]
 8002800:	6063      	str	r3, [r4, #4]
 8002802:	000c      	movs	r4, r1
 8002804:	e7ee      	b.n	80027e4 <_malloc_r+0x74>
 8002806:	000c      	movs	r4, r1
 8002808:	6849      	ldr	r1, [r1, #4]
 800280a:	e7c2      	b.n	8002792 <_malloc_r+0x22>
 800280c:	2303      	movs	r3, #3
 800280e:	1cc4      	adds	r4, r0, #3
 8002810:	439c      	bics	r4, r3
 8002812:	42a0      	cmp	r0, r4
 8002814:	d0e0      	beq.n	80027d8 <_malloc_r+0x68>
 8002816:	1a21      	subs	r1, r4, r0
 8002818:	0030      	movs	r0, r6
 800281a:	f000 f84f 	bl	80028bc <_sbrk_r>
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	d1da      	bne.n	80027d8 <_malloc_r+0x68>
 8002822:	e7c6      	b.n	80027b2 <_malloc_r+0x42>
 8002824:	200000f4 	.word	0x200000f4
 8002828:	200000f8 	.word	0x200000f8

0800282c <__dorand48>:
 800282c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800282e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002830:	0005      	movs	r5, r0
 8002832:	000c      	movs	r4, r1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d115      	bne.n	8002864 <__dorand48+0x38>
 8002838:	2018      	movs	r0, #24
 800283a:	f7ff ff87 	bl	800274c <malloc>
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <__dorand48+0x7c>)
 8002840:	63a8      	str	r0, [r5, #56]	; 0x38
 8002842:	8003      	strh	r3, [r0, #0]
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <__dorand48+0x80>)
 8002846:	2201      	movs	r2, #1
 8002848:	8043      	strh	r3, [r0, #2]
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <__dorand48+0x84>)
 800284c:	8083      	strh	r3, [r0, #4]
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <__dorand48+0x88>)
 8002850:	80c3      	strh	r3, [r0, #6]
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <__dorand48+0x8c>)
 8002854:	8103      	strh	r3, [r0, #8]
 8002856:	2305      	movs	r3, #5
 8002858:	8143      	strh	r3, [r0, #10]
 800285a:	3306      	adds	r3, #6
 800285c:	8183      	strh	r3, [r0, #12]
 800285e:	2300      	movs	r3, #0
 8002860:	6102      	str	r2, [r0, #16]
 8002862:	6143      	str	r3, [r0, #20]
 8002864:	8820      	ldrh	r0, [r4, #0]
 8002866:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8002868:	0002      	movs	r2, r0
 800286a:	88ef      	ldrh	r7, [r5, #6]
 800286c:	89ab      	ldrh	r3, [r5, #12]
 800286e:	437a      	muls	r2, r7
 8002870:	0039      	movs	r1, r7
 8002872:	18d3      	adds	r3, r2, r3
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	892a      	ldrh	r2, [r5, #8]
 8002878:	8866      	ldrh	r6, [r4, #2]
 800287a:	4694      	mov	ip, r2
 800287c:	4371      	muls	r1, r6
 800287e:	4342      	muls	r2, r0
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	188a      	adds	r2, r1, r2
 8002884:	18d2      	adds	r2, r2, r3
 8002886:	88a3      	ldrh	r3, [r4, #4]
 8002888:	0c11      	lsrs	r1, r2, #16
 800288a:	437b      	muls	r3, r7
 800288c:	4667      	mov	r7, ip
 800288e:	437e      	muls	r6, r7
 8002890:	199e      	adds	r6, r3, r6
 8002892:	896b      	ldrh	r3, [r5, #10]
 8002894:	4358      	muls	r0, r3
 8002896:	466b      	mov	r3, sp
 8002898:	1830      	adds	r0, r6, r0
 800289a:	889b      	ldrh	r3, [r3, #4]
 800289c:	1841      	adds	r1, r0, r1
 800289e:	8023      	strh	r3, [r4, #0]
 80028a0:	8062      	strh	r2, [r4, #2]
 80028a2:	80a1      	strh	r1, [r4, #4]
 80028a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	0000330e 	.word	0x0000330e
 80028ac:	ffffabcd 	.word	0xffffabcd
 80028b0:	00001234 	.word	0x00001234
 80028b4:	ffffe66d 	.word	0xffffe66d
 80028b8:	ffffdeec 	.word	0xffffdeec

080028bc <_sbrk_r>:
 80028bc:	2300      	movs	r3, #0
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	4c06      	ldr	r4, [pc, #24]	; (80028dc <_sbrk_r+0x20>)
 80028c2:	0005      	movs	r5, r0
 80028c4:	0008      	movs	r0, r1
 80028c6:	6023      	str	r3, [r4, #0]
 80028c8:	f7ff fe44 	bl	8002554 <_sbrk>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d103      	bne.n	80028d8 <_sbrk_r+0x1c>
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d000      	beq.n	80028d8 <_sbrk_r+0x1c>
 80028d6:	602b      	str	r3, [r5, #0]
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000140 	.word	0x20000140

080028e0 <_srand48_r>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028e4:	0005      	movs	r5, r0
 80028e6:	000c      	movs	r4, r1
 80028e8:	4f12      	ldr	r7, [pc, #72]	; (8002934 <_srand48_r+0x54>)
 80028ea:	4e13      	ldr	r6, [pc, #76]	; (8002938 <_srand48_r+0x58>)
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d113      	bne.n	8002918 <_srand48_r+0x38>
 80028f0:	2018      	movs	r0, #24
 80028f2:	f7ff ff2b 	bl	800274c <malloc>
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <_srand48_r+0x5c>)
 80028f8:	63a8      	str	r0, [r5, #56]	; 0x38
 80028fa:	8043      	strh	r3, [r0, #2]
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_srand48_r+0x60>)
 80028fe:	2201      	movs	r2, #1
 8002900:	8083      	strh	r3, [r0, #4]
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <_srand48_r+0x64>)
 8002904:	8007      	strh	r7, [r0, #0]
 8002906:	8103      	strh	r3, [r0, #8]
 8002908:	2305      	movs	r3, #5
 800290a:	8143      	strh	r3, [r0, #10]
 800290c:	3306      	adds	r3, #6
 800290e:	8183      	strh	r3, [r0, #12]
 8002910:	2300      	movs	r3, #0
 8002912:	6102      	str	r2, [r0, #16]
 8002914:	6143      	str	r3, [r0, #20]
 8002916:	80c6      	strh	r6, [r0, #6]
 8002918:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <_srand48_r+0x64>)
 800291c:	805c      	strh	r4, [r3, #2]
 800291e:	811a      	strh	r2, [r3, #8]
 8002920:	2205      	movs	r2, #5
 8002922:	0c24      	lsrs	r4, r4, #16
 8002924:	815a      	strh	r2, [r3, #10]
 8002926:	3206      	adds	r2, #6
 8002928:	801f      	strh	r7, [r3, #0]
 800292a:	80de      	strh	r6, [r3, #6]
 800292c:	809c      	strh	r4, [r3, #4]
 800292e:	819a      	strh	r2, [r3, #12]
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	0000330e 	.word	0x0000330e
 8002938:	ffffe66d 	.word	0xffffe66d
 800293c:	ffffabcd 	.word	0xffffabcd
 8002940:	00001234 	.word	0x00001234
 8002944:	ffffdeec 	.word	0xffffdeec

08002948 <srand48>:
 8002948:	b510      	push	{r4, lr}
 800294a:	4b03      	ldr	r3, [pc, #12]	; (8002958 <srand48+0x10>)
 800294c:	0001      	movs	r1, r0
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f7ff ffc6 	bl	80028e0 <_srand48_r>
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000004 	.word	0x20000004

0800295c <__malloc_lock>:
 800295c:	4770      	bx	lr

0800295e <__malloc_unlock>:
 800295e:	4770      	bx	lr

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
