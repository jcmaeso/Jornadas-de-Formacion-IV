
Paso 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e8  20000000  08003cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a4  200000e8  08003da8  000200e8  2**2
                  ALLOC
  7 ._user_heap_stack 00001800  2000028c  08003da8  0002028c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001360d  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027a5  00000000  00000000  0003371d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000604a  00000000  00000000  000377f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003beb  00000000  00000000  0003d83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00041425  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002fc0  00000000  00000000  000414a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e8 	.word	0x200000e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c20 	.word	0x08003c20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ec 	.word	0x200000ec
 8000104:	08003c20 	.word	0x08003c20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <HAL_Init+0x24>)
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <HAL_Init+0x24>)
 800040c:	6812      	ldr	r2, [r2, #0]
 800040e:	2110      	movs	r1, #16
 8000410:	430a      	orrs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f809 	bl	800042c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800041a:	f003 f96f 	bl	80036fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800041e:	2300      	movs	r3, #0
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	40022000 	.word	0x40022000

0800042c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000434:	f000 ffc0 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 8000438:	0002      	movs	r2, r0
 800043a:	23fa      	movs	r3, #250	; 0xfa
 800043c:	0099      	lsls	r1, r3, #2
 800043e:	0010      	movs	r0, r2
 8000440:	f7ff fe6a 	bl	8000118 <__udivsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	0018      	movs	r0, r3
 8000448:	f000 f90e 	bl	8000668 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800044c:	6879      	ldr	r1, [r7, #4]
 800044e:	2301      	movs	r3, #1
 8000450:	425b      	negs	r3, r3
 8000452:	2200      	movs	r2, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f000 f8e1 	bl	800061c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}

08000464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  uwTick++;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <HAL_IncTick+0x14>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4b02      	ldr	r3, [pc, #8]	; (8000478 <HAL_IncTick+0x14>)
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200001d4 	.word	0x200001d4

0800047c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  return uwTick;
 8000480:	4b02      	ldr	r3, [pc, #8]	; (800048c <HAL_GetTick+0x10>)
 8000482:	681b      	ldr	r3, [r3, #0]
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	200001d4 	.word	0x200001d4

08000490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000498:	f7ff fff0 	bl	800047c <HAL_GetTick>
 800049c:	0003      	movs	r3, r0
 800049e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	d002      	beq.n	80004b0 <HAL_Delay+0x20>
  {
     wait++;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	f7ff ffe3 	bl	800047c <HAL_GetTick>
 80004b6:	0002      	movs	r2, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1ad2      	subs	r2, r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3f7      	bcc.n	80004b2 <HAL_Delay+0x22>
  {
  }
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <NVIC_EnableIRQ+0x28>)
 80004da:	1dfa      	adds	r2, r7, #7
 80004dc:	7812      	ldrb	r2, [r2, #0]
 80004de:	0011      	movs	r1, r2
 80004e0:	221f      	movs	r2, #31
 80004e2:	400a      	ands	r2, r1
 80004e4:	2101      	movs	r1, #1
 80004e6:	4091      	lsls	r1, r2
 80004e8:	000a      	movs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	e000e100 	.word	0xe000e100

080004f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b7f      	cmp	r3, #127	; 0x7f
 800050c:	d932      	bls.n	8000574 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050e:	4c2f      	ldr	r4, [pc, #188]	; (80005cc <NVIC_SetPriority+0xd4>)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	001a      	movs	r2, r3
 8000516:	230f      	movs	r3, #15
 8000518:	4013      	ands	r3, r2
 800051a:	3b08      	subs	r3, #8
 800051c:	0899      	lsrs	r1, r3, #2
 800051e:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <NVIC_SetPriority+0xd4>)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	0018      	movs	r0, r3
 8000526:	230f      	movs	r3, #15
 8000528:	4003      	ands	r3, r0
 800052a:	3b08      	subs	r3, #8
 800052c:	089b      	lsrs	r3, r3, #2
 800052e:	3306      	adds	r3, #6
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	3304      	adds	r3, #4
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1dfa      	adds	r2, r7, #7
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	0010      	movs	r0, r2
 800053e:	2203      	movs	r2, #3
 8000540:	4002      	ands	r2, r0
 8000542:	00d2      	lsls	r2, r2, #3
 8000544:	20ff      	movs	r0, #255	; 0xff
 8000546:	4090      	lsls	r0, r2
 8000548:	0002      	movs	r2, r0
 800054a:	43d2      	mvns	r2, r2
 800054c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	019b      	lsls	r3, r3, #6
 8000552:	20ff      	movs	r0, #255	; 0xff
 8000554:	4018      	ands	r0, r3
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	001d      	movs	r5, r3
 800055c:	2303      	movs	r3, #3
 800055e:	402b      	ands	r3, r5
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	4098      	lsls	r0, r3
 8000564:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000566:	431a      	orrs	r2, r3
 8000568:	1d8b      	adds	r3, r1, #6
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	18e3      	adds	r3, r4, r3
 800056e:	3304      	adds	r3, #4
 8000570:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000572:	e027      	b.n	80005c4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000574:	4c16      	ldr	r4, [pc, #88]	; (80005d0 <NVIC_SetPriority+0xd8>)
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	4914      	ldr	r1, [pc, #80]	; (80005d0 <NVIC_SetPriority+0xd8>)
 8000580:	1dfa      	adds	r2, r7, #7
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	b252      	sxtb	r2, r2
 8000586:	0892      	lsrs	r2, r2, #2
 8000588:	32c0      	adds	r2, #192	; 0xc0
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	5852      	ldr	r2, [r2, r1]
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	7809      	ldrb	r1, [r1, #0]
 8000592:	0008      	movs	r0, r1
 8000594:	2103      	movs	r1, #3
 8000596:	4001      	ands	r1, r0
 8000598:	00c9      	lsls	r1, r1, #3
 800059a:	20ff      	movs	r0, #255	; 0xff
 800059c:	4088      	lsls	r0, r1
 800059e:	0001      	movs	r1, r0
 80005a0:	43c9      	mvns	r1, r1
 80005a2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	0192      	lsls	r2, r2, #6
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	4010      	ands	r0, r2
 80005ac:	1dfa      	adds	r2, r7, #7
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	0015      	movs	r5, r2
 80005b2:	2203      	movs	r2, #3
 80005b4:	402a      	ands	r2, r5
 80005b6:	00d2      	lsls	r2, r2, #3
 80005b8:	4090      	lsls	r0, r2
 80005ba:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005bc:	430a      	orrs	r2, r1
 80005be:	33c0      	adds	r3, #192	; 0xc0
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	511a      	str	r2, [r3, r4]
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bdb0      	pop	{r4, r5, r7, pc}
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <SysTick_Config+0x40>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d901      	bls.n	80005ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005e6:	2301      	movs	r3, #1
 80005e8:	e010      	b.n	800060c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <SysTick_Config+0x44>)
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	3a01      	subs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	2103      	movs	r1, #3
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff7d 	bl	80004f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SysTick_Config+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SysTick_Config+0x44>)
 8000606:	2207      	movs	r2, #7
 8000608:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800060a:	2300      	movs	r3, #0
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}
 8000614:	00ffffff 	.word	0x00ffffff
 8000618:	e000e010 	.word	0xe000e010

0800061c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	230f      	movs	r3, #15
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	1c02      	adds	r2, r0, #0
 800062c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	230f      	movs	r3, #15
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff5c 	bl	80004f8 <NVIC_SetPriority>
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	0002      	movs	r2, r0
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b25b      	sxtb	r3, r3
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ff36 	bl	80004cc <NVIC_EnableIRQ>
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}

08000668 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff ffae 	bl	80005d4 <SysTick_Config>
 8000678:	0003      	movs	r3, r0
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800069a:	e155      	b.n	8000948 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2101      	movs	r1, #1
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	4091      	lsls	r1, r2
 80006a6:	000a      	movs	r2, r1
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d100      	bne.n	80006b4 <HAL_GPIO_Init+0x30>
 80006b2:	e146      	b.n	8000942 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d003      	beq.n	80006c4 <HAL_GPIO_Init+0x40>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	2b12      	cmp	r3, #18
 80006c2:	d123      	bne.n	800070c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	08da      	lsrs	r2, r3, #3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3208      	adds	r2, #8
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	58d3      	ldr	r3, [r2, r3]
 80006d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2207      	movs	r2, #7
 80006d6:	4013      	ands	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	220f      	movs	r2, #15
 80006dc:	409a      	lsls	r2, r3
 80006de:	0013      	movs	r3, r2
 80006e0:	43da      	mvns	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2107      	movs	r1, #7
 80006f0:	400b      	ands	r3, r1
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0013      	movs	r3, r2
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	08da      	lsrs	r2, r3, #3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3208      	adds	r2, #8
 8000706:	0092      	lsls	r2, r2, #2
 8000708:	6939      	ldr	r1, [r7, #16]
 800070a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	2203      	movs	r2, #3
 8000718:	409a      	lsls	r2, r3
 800071a:	0013      	movs	r3, r2
 800071c:	43da      	mvns	r2, r3
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	4013      	ands	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2203      	movs	r2, #3
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	409a      	lsls	r2, r3
 8000732:	0013      	movs	r3, r2
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4313      	orrs	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d00b      	beq.n	8000760 <HAL_GPIO_Init+0xdc>
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d007      	beq.n	8000760 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000754:	2b11      	cmp	r3, #17
 8000756:	d003      	beq.n	8000760 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b12      	cmp	r3, #18
 800075e:	d130      	bne.n	80007c2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2203      	movs	r2, #3
 800076c:	409a      	lsls	r2, r3
 800076e:	0013      	movs	r3, r2
 8000770:	43da      	mvns	r2, r3
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	68da      	ldr	r2, [r3, #12]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	409a      	lsls	r2, r3
 8000782:	0013      	movs	r3, r2
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	4313      	orrs	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000796:	2201      	movs	r2, #1
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
 800079e:	43da      	mvns	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	2201      	movs	r2, #1
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	2203      	movs	r2, #3
 80007ce:	409a      	lsls	r2, r3
 80007d0:	0013      	movs	r3, r2
 80007d2:	43da      	mvns	r2, r3
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4013      	ands	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	409a      	lsls	r2, r3
 80007e4:	0013      	movs	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	055b      	lsls	r3, r3, #21
 80007fa:	4013      	ands	r3, r2
 80007fc:	d100      	bne.n	8000800 <HAL_GPIO_Init+0x17c>
 80007fe:	e0a0      	b.n	8000942 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	4b57      	ldr	r3, [pc, #348]	; (8000960 <HAL_GPIO_Init+0x2dc>)
 8000802:	4a57      	ldr	r2, [pc, #348]	; (8000960 <HAL_GPIO_Init+0x2dc>)
 8000804:	6992      	ldr	r2, [r2, #24]
 8000806:	2101      	movs	r1, #1
 8000808:	430a      	orrs	r2, r1
 800080a:	619a      	str	r2, [r3, #24]
 800080c:	4b54      	ldr	r3, [pc, #336]	; (8000960 <HAL_GPIO_Init+0x2dc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	2201      	movs	r2, #1
 8000812:	4013      	ands	r3, r2
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000818:	4a52      	ldr	r2, [pc, #328]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	089b      	lsrs	r3, r3, #2
 800081e:	3302      	adds	r3, #2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	589b      	ldr	r3, [r3, r2]
 8000824:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2203      	movs	r2, #3
 800082a:	4013      	ands	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	220f      	movs	r2, #15
 8000830:	409a      	lsls	r2, r3
 8000832:	0013      	movs	r3, r2
 8000834:	43da      	mvns	r2, r3
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	429a      	cmp	r2, r3
 8000844:	d019      	beq.n	800087a <HAL_GPIO_Init+0x1f6>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a47      	ldr	r2, [pc, #284]	; (8000968 <HAL_GPIO_Init+0x2e4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d013      	beq.n	8000876 <HAL_GPIO_Init+0x1f2>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a46      	ldr	r2, [pc, #280]	; (800096c <HAL_GPIO_Init+0x2e8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d00d      	beq.n	8000872 <HAL_GPIO_Init+0x1ee>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a45      	ldr	r2, [pc, #276]	; (8000970 <HAL_GPIO_Init+0x2ec>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d007      	beq.n	800086e <HAL_GPIO_Init+0x1ea>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a44      	ldr	r2, [pc, #272]	; (8000974 <HAL_GPIO_Init+0x2f0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_GPIO_Init+0x1e6>
 8000866:	2304      	movs	r3, #4
 8000868:	e008      	b.n	800087c <HAL_GPIO_Init+0x1f8>
 800086a:	2305      	movs	r3, #5
 800086c:	e006      	b.n	800087c <HAL_GPIO_Init+0x1f8>
 800086e:	2303      	movs	r3, #3
 8000870:	e004      	b.n	800087c <HAL_GPIO_Init+0x1f8>
 8000872:	2302      	movs	r3, #2
 8000874:	e002      	b.n	800087c <HAL_GPIO_Init+0x1f8>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <HAL_GPIO_Init+0x1f8>
 800087a:	2300      	movs	r3, #0
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	2103      	movs	r1, #3
 8000880:	400a      	ands	r2, r1
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	4093      	lsls	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800088c:	4935      	ldr	r1, [pc, #212]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	089b      	lsrs	r3, r3, #2
 8000892:	3302      	adds	r3, #2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	43da      	mvns	r2, r3
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	025b      	lsls	r3, r3, #9
 80008b2:	4013      	ands	r3, r2
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	029b      	lsls	r3, r3, #10
 80008dc:	4013      	ands	r3, r2
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	43da      	mvns	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	035b      	lsls	r3, r3, #13
 8000906:	4013      	ands	r3, r2
 8000908:	d003      	beq.n	8000912 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	43da      	mvns	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	039b      	lsls	r3, r3, #14
 8000930:	4013      	ands	r3, r2
 8000932:	d003      	beq.n	800093c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_GPIO_Init+0x2f4>)
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	40da      	lsrs	r2, r3
 8000950:	1e13      	subs	r3, r2, #0
 8000952:	d000      	beq.n	8000956 <HAL_GPIO_Init+0x2d2>
 8000954:	e6a2      	b.n	800069c <HAL_GPIO_Init+0x18>
  } 
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b006      	add	sp, #24
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000
 8000968:	48000400 	.word	0x48000400
 800096c:	48000800 	.word	0x48000800
 8000970:	48000c00 	.word	0x48000c00
 8000974:	48001000 	.word	0x48001000
 8000978:	40010400 	.word	0x40010400

0800097c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	0008      	movs	r0, r1
 8000986:	0011      	movs	r1, r2
 8000988:	1cbb      	adds	r3, r7, #2
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	1c7b      	adds	r3, r7, #1
 8000990:	1c0a      	adds	r2, r1, #0
 8000992:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000994:	1c7b      	adds	r3, r7, #1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800099c:	1cbb      	adds	r3, r7, #2
 800099e:	881a      	ldrh	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009a4:	e003      	b.n	80009ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009a6:	1cbb      	adds	r3, r7, #2
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	1dba      	adds	r2, r7, #6
 80009ca:	8812      	ldrh	r2, [r2, #0]
 80009cc:	4013      	ands	r3, r2
 80009ce:	d008      	beq.n	80009e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80009d2:	1dba      	adds	r2, r7, #6
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 f827 	bl	8002a30 <HAL_GPIO_EXTI_Callback>
  }
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40010400 	.word	0x40010400

080009f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	4013      	ands	r3, r2
 8000a04:	d100      	bne.n	8000a08 <HAL_RCC_OscConfig+0x18>
 8000a06:	e08d      	b.n	8000b24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a08:	4bc5      	ldr	r3, [pc, #788]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	220c      	movs	r2, #12
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d00e      	beq.n	8000a32 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a14:	4bc2      	ldr	r3, [pc, #776]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	220c      	movs	r2, #12
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d116      	bne.n	8000a4e <HAL_RCC_OscConfig+0x5e>
 8000a20:	4bbf      	ldr	r3, [pc, #764]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	025b      	lsls	r3, r3, #9
 8000a28:	401a      	ands	r2, r3
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d10d      	bne.n	8000a4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a32:	4bbb      	ldr	r3, [pc, #748]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	029b      	lsls	r3, r3, #10
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <HAL_RCC_OscConfig+0x50>
 8000a3e:	e070      	b.n	8000b22 <HAL_RCC_OscConfig+0x132>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <HAL_RCC_OscConfig+0x5a>
 8000a48:	e06b      	b.n	8000b22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e327      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d107      	bne.n	8000a66 <HAL_RCC_OscConfig+0x76>
 8000a56:	4bb2      	ldr	r3, [pc, #712]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a58:	4ab1      	ldr	r2, [pc, #708]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0249      	lsls	r1, r1, #9
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e02f      	b.n	8000ac6 <HAL_RCC_OscConfig+0xd6>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10c      	bne.n	8000a88 <HAL_RCC_OscConfig+0x98>
 8000a6e:	4bac      	ldr	r3, [pc, #688]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a70:	4aab      	ldr	r2, [pc, #684]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	49ab      	ldr	r1, [pc, #684]	; (8000d24 <HAL_RCC_OscConfig+0x334>)
 8000a76:	400a      	ands	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	4ba9      	ldr	r3, [pc, #676]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a7c:	4aa8      	ldr	r2, [pc, #672]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	49a9      	ldr	r1, [pc, #676]	; (8000d28 <HAL_RCC_OscConfig+0x338>)
 8000a82:	400a      	ands	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e01e      	b.n	8000ac6 <HAL_RCC_OscConfig+0xd6>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	d10e      	bne.n	8000aae <HAL_RCC_OscConfig+0xbe>
 8000a90:	4ba3      	ldr	r3, [pc, #652]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a92:	4aa3      	ldr	r2, [pc, #652]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	02c9      	lsls	r1, r1, #11
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	4ba0      	ldr	r3, [pc, #640]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000aa0:	4a9f      	ldr	r2, [pc, #636]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0249      	lsls	r1, r1, #9
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e00b      	b.n	8000ac6 <HAL_RCC_OscConfig+0xd6>
 8000aae:	4b9c      	ldr	r3, [pc, #624]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000ab0:	4a9b      	ldr	r2, [pc, #620]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	499b      	ldr	r1, [pc, #620]	; (8000d24 <HAL_RCC_OscConfig+0x334>)
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	4b99      	ldr	r3, [pc, #612]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000abc:	4a98      	ldr	r2, [pc, #608]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	4999      	ldr	r1, [pc, #612]	; (8000d28 <HAL_RCC_OscConfig+0x338>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d014      	beq.n	8000af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ace:	f7ff fcd5 	bl	800047c <HAL_GetTick>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad8:	f7ff fcd0 	bl	800047c <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e2d9      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	4013      	ands	r3, r2
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0xe8>
 8000af6:	e015      	b.n	8000b24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af8:	f7ff fcc0 	bl	800047c <HAL_GetTick>
 8000afc:	0003      	movs	r3, r0
 8000afe:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b02:	f7ff fcbb 	bl	800047c <HAL_GetTick>
 8000b06:	0002      	movs	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b64      	cmp	r3, #100	; 0x64
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e2c4      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b14:	4b82      	ldr	r3, [pc, #520]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	029b      	lsls	r3, r3, #10
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d1f0      	bne.n	8000b02 <HAL_RCC_OscConfig+0x112>
 8000b20:	e000      	b.n	8000b24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d100      	bne.n	8000b30 <HAL_RCC_OscConfig+0x140>
 8000b2e:	e06c      	b.n	8000c0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b30:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	220c      	movs	r2, #12
 8000b36:	4013      	ands	r3, r2
 8000b38:	d00e      	beq.n	8000b58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b3a:	4b79      	ldr	r3, [pc, #484]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	220c      	movs	r2, #12
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d11f      	bne.n	8000b86 <HAL_RCC_OscConfig+0x196>
 8000b46:	4b76      	ldr	r3, [pc, #472]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	025b      	lsls	r3, r3, #9
 8000b4e:	401a      	ands	r2, r3
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d116      	bne.n	8000b86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b58:	4b71      	ldr	r3, [pc, #452]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d005      	beq.n	8000b6e <HAL_RCC_OscConfig+0x17e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d001      	beq.n	8000b6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e297      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	4a6c      	ldr	r2, [pc, #432]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b70:	4b6b      	ldr	r3, [pc, #428]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	21f8      	movs	r1, #248	; 0xf8
 8000b76:	438b      	bics	r3, r1
 8000b78:	0019      	movs	r1, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b84:	e041      	b.n	8000c0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d024      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b8e:	4b64      	ldr	r3, [pc, #400]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b90:	4a63      	ldr	r2, [pc, #396]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fc6f 	bl	800047c <HAL_GetTick>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba4:	f7ff fc6a 	bl	800047c <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e273      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb6:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d0f1      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000bc2:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	21f8      	movs	r1, #248	; 0xf8
 8000bc8:	438b      	bics	r3, r1
 8000bca:	0019      	movs	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e018      	b.n	8000c0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bd8:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	2101      	movs	r1, #1
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fc4a 	bl	800047c <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bee:	f7ff fc45 	bl	800047c <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e24e      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	d1f1      	bne.n	8000bee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4013      	ands	r3, r2
 8000c12:	d036      	beq.n	8000c82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d019      	beq.n	8000c50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c1c:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c28:	f7ff fc28 	bl	800047c <HAL_GetTick>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c32:	f7ff fc23 	bl	800047c <HAL_GetTick>
 8000c36:	0002      	movs	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e22c      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d0f1      	beq.n	8000c32 <HAL_RCC_OscConfig+0x242>
 8000c4e:	e018      	b.n	8000c82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c56:	2101      	movs	r1, #1
 8000c58:	438a      	bics	r2, r1
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5c:	f7ff fc0e 	bl	800047c <HAL_GetTick>
 8000c60:	0003      	movs	r3, r0
 8000c62:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	e008      	b.n	8000c78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c66:	f7ff fc09 	bl	800047c <HAL_GetTick>
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e212      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d1f1      	bne.n	8000c66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2204      	movs	r2, #4
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d100      	bne.n	8000c8e <HAL_RCC_OscConfig+0x29e>
 8000c8c:	e0b6      	b.n	8000dfc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c8e:	2317      	movs	r3, #23
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	055b      	lsls	r3, r3, #21
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d111      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000ca6:	69d2      	ldr	r2, [r2, #28]
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	055b      	lsls	r3, r3, #21
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cbe:	2317      	movs	r3, #23
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_RCC_OscConfig+0x33c>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d11a      	bne.n	8000d08 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_RCC_OscConfig+0x33c>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_RCC_OscConfig+0x33c>)
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fbcc 	bl	800047c <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cea:	f7ff fbc7 	bl	800047c <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	; 0x64
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e1d0      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_RCC_OscConfig+0x33c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10f      	bne.n	8000d30 <HAL_RCC_OscConfig+0x340>
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000d12:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_RCC_OscConfig+0x330>)
 8000d14:	6a12      	ldr	r2, [r2, #32]
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	621a      	str	r2, [r3, #32]
 8000d1c:	e036      	b.n	8000d8c <HAL_RCC_OscConfig+0x39c>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	fffeffff 	.word	0xfffeffff
 8000d28:	fffbffff 	.word	0xfffbffff
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10c      	bne.n	8000d52 <HAL_RCC_OscConfig+0x362>
 8000d38:	4bc9      	ldr	r3, [pc, #804]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d3a:	4ac9      	ldr	r2, [pc, #804]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d3c:	6a12      	ldr	r2, [r2, #32]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	438a      	bics	r2, r1
 8000d42:	621a      	str	r2, [r3, #32]
 8000d44:	4bc6      	ldr	r3, [pc, #792]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d46:	4ac6      	ldr	r2, [pc, #792]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d48:	6a12      	ldr	r2, [r2, #32]
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	438a      	bics	r2, r1
 8000d4e:	621a      	str	r2, [r3, #32]
 8000d50:	e01c      	b.n	8000d8c <HAL_RCC_OscConfig+0x39c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0x384>
 8000d5a:	4bc1      	ldr	r3, [pc, #772]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d5c:	4ac0      	ldr	r2, [pc, #768]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d5e:	6a12      	ldr	r2, [r2, #32]
 8000d60:	2104      	movs	r1, #4
 8000d62:	430a      	orrs	r2, r1
 8000d64:	621a      	str	r2, [r3, #32]
 8000d66:	4bbe      	ldr	r3, [pc, #760]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d68:	4abd      	ldr	r2, [pc, #756]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d6a:	6a12      	ldr	r2, [r2, #32]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	621a      	str	r2, [r3, #32]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0x39c>
 8000d74:	4bba      	ldr	r3, [pc, #744]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d76:	4aba      	ldr	r2, [pc, #744]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d78:	6a12      	ldr	r2, [r2, #32]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	621a      	str	r2, [r3, #32]
 8000d80:	4bb7      	ldr	r3, [pc, #732]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d82:	4ab7      	ldr	r2, [pc, #732]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000d84:	6a12      	ldr	r2, [r2, #32]
 8000d86:	2104      	movs	r1, #4
 8000d88:	438a      	bics	r2, r1
 8000d8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fb72 	bl	800047c <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9c:	e009      	b.n	8000db2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fb6d 	bl	800047c <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4aae      	ldr	r2, [pc, #696]	; (8001064 <HAL_RCC_OscConfig+0x674>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e175      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db2:	4bab      	ldr	r3, [pc, #684]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x3ae>
 8000dbc:	e013      	b.n	8000de6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fb5d 	bl	800047c <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc6:	e009      	b.n	8000ddc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fb58 	bl	800047c <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	4aa4      	ldr	r2, [pc, #656]	; (8001064 <HAL_RCC_OscConfig+0x674>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e160      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ddc:	4ba0      	ldr	r3, [pc, #640]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	2202      	movs	r2, #2
 8000de2:	4013      	ands	r3, r2
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000de6:	2317      	movs	r3, #23
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df0:	4b9b      	ldr	r3, [pc, #620]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000df2:	4a9b      	ldr	r2, [pc, #620]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000df4:	69d2      	ldr	r2, [r2, #28]
 8000df6:	499c      	ldr	r1, [pc, #624]	; (8001068 <HAL_RCC_OscConfig+0x678>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2210      	movs	r2, #16
 8000e02:	4013      	ands	r3, r2
 8000e04:	d063      	beq.n	8000ece <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d12a      	bne.n	8000e64 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e0e:	4b94      	ldr	r3, [pc, #592]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e10:	4a93      	ldr	r2, [pc, #588]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e14:	2104      	movs	r1, #4
 8000e16:	430a      	orrs	r2, r1
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e1a:	4b91      	ldr	r3, [pc, #580]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e1c:	4a90      	ldr	r2, [pc, #576]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e26:	f7ff fb29 	bl	800047c <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e30:	f7ff fb24 	bl	800047c <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e12d      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e42:	4b87      	ldr	r3, [pc, #540]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d0f1      	beq.n	8000e30 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e4c:	4a84      	ldr	r2, [pc, #528]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e4e:	4b84      	ldr	r3, [pc, #528]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	21f8      	movs	r1, #248	; 0xf8
 8000e54:	438b      	bics	r3, r1
 8000e56:	0019      	movs	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	6353      	str	r3, [r2, #52]	; 0x34
 8000e62:	e034      	b.n	8000ece <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	3305      	adds	r3, #5
 8000e6a:	d111      	bne.n	8000e90 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e6c:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e6e:	4a7c      	ldr	r2, [pc, #496]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e72:	2104      	movs	r1, #4
 8000e74:	438a      	bics	r2, r1
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e78:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e7a:	4b79      	ldr	r3, [pc, #484]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	21f8      	movs	r1, #248	; 0xf8
 8000e80:	438b      	bics	r3, r1
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e8e:	e01e      	b.n	8000ece <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e90:	4b73      	ldr	r3, [pc, #460]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e92:	4a73      	ldr	r2, [pc, #460]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e96:	2104      	movs	r1, #4
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000e9c:	4b70      	ldr	r3, [pc, #448]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000e9e:	4a70      	ldr	r2, [pc, #448]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea8:	f7ff fae8 	bl	800047c <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000eb2:	f7ff fae3 	bl	800047c <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e0ec      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ec4:	4b66      	ldr	r3, [pc, #408]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d1f1      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d05c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ed8:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	220c      	movs	r2, #12
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b0c      	cmp	r3, #12
 8000ee2:	d00e      	beq.n	8000f02 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ee4:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	220c      	movs	r2, #12
 8000eea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d114      	bne.n	8000f1a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ef0:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	23c0      	movs	r3, #192	; 0xc0
 8000ef6:	025b      	lsls	r3, r3, #9
 8000ef8:	401a      	ands	r2, r3
 8000efa:	23c0      	movs	r3, #192	; 0xc0
 8000efc:	025b      	lsls	r3, r3, #9
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d10b      	bne.n	8000f1a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d040      	beq.n	8000f90 <HAL_RCC_OscConfig+0x5a0>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d03c      	beq.n	8000f90 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0c1      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01b      	beq.n	8000f5a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f22:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f24:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff faa4 	bl	800047c <HAL_GetTick>
 8000f34:	0003      	movs	r3, r0
 8000f36:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f3a:	f7ff fa9f 	bl	800047c <HAL_GetTick>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0a8      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f4c:	4b44      	ldr	r3, [pc, #272]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	025b      	lsls	r3, r3, #9
 8000f54:	4013      	ands	r3, r2
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x54a>
 8000f58:	e01b      	b.n	8000f92 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f5c:	4a40      	ldr	r2, [pc, #256]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f60:	4942      	ldr	r1, [pc, #264]	; (800106c <HAL_RCC_OscConfig+0x67c>)
 8000f62:	400a      	ands	r2, r1
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fa89 	bl	800047c <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f70:	f7ff fa84 	bl	800047c <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e08d      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	025b      	lsls	r3, r3, #9
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x580>
 8000f8e:	e000      	b.n	8000f92 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f90:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d100      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5ac>
 8000f9a:	e07f      	b.n	800109c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d100      	bne.n	8000faa <HAL_RCC_OscConfig+0x5ba>
 8000fa8:	e076      	b.n	8001098 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d14b      	bne.n	800104a <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	492d      	ldr	r1, [pc, #180]	; (8001070 <HAL_RCC_OscConfig+0x680>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fa5d 	bl	800047c <HAL_GetTick>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fa58 	bl	800047c <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e061      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	049b      	lsls	r3, r3, #18
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	210f      	movs	r1, #15
 8000fee:	438b      	bics	r3, r1
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ffa:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	491c      	ldr	r1, [pc, #112]	; (8001074 <HAL_RCC_OscConfig+0x684>)
 8001002:	4019      	ands	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	4303      	orrs	r3, r0
 800100e:	430b      	orrs	r3, r1
 8001010:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0449      	lsls	r1, r1, #17
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fa2c 	bl	800047c <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fa27 	bl	800047c <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e030      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	049b      	lsls	r3, r3, #18
 8001044:	4013      	ands	r3, r2
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x63a>
 8001048:	e028      	b.n	800109c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_RCC_OscConfig+0x670>)
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <HAL_RCC_OscConfig+0x680>)
 8001052:	400a      	ands	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fa11 	bl	800047c <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x69a>
 8001060:	40021000 	.word	0x40021000
 8001064:	00001388 	.word	0x00001388
 8001068:	efffffff 	.word	0xefffffff
 800106c:	fffeffff 	.word	0xfffeffff
 8001070:	feffffff 	.word	0xfeffffff
 8001074:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fa00 	bl	800047c <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e009      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_RCC_OscConfig+0x6b8>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	049b      	lsls	r3, r3, #18
 8001092:	4013      	ands	r3, r2
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x688>
 8001096:	e001      	b.n	800109c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b006      	add	sp, #24
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ba:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	401a      	ands	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d211      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c8:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 80010ca:	4a76      	ldr	r2, [pc, #472]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	0011      	movs	r1, r2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010da:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	401a      	ands	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d7      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2202      	movs	r2, #2
 80010f2:	4013      	ands	r3, r2
 80010f4:	d009      	beq.n	800110a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f6:	4a6c      	ldr	r2, [pc, #432]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 80010f8:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	21f0      	movs	r1, #240	; 0xf0
 80010fe:	438b      	bics	r3, r1
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	430b      	orrs	r3, r1
 8001108:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	d100      	bne.n	8001116 <HAL_RCC_ClockConfig+0x6a>
 8001114:	e089      	b.n	800122a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d120      	bne.n	800116c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0b6      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d107      	bne.n	8001146 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001136:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	049b      	lsls	r3, r3, #18
 800113e:	4013      	ands	r3, r2
 8001140:	d114      	bne.n	800116c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0aa      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	d108      	bne.n	800116c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e09e      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e097      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116c:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 800116e:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2103      	movs	r1, #3
 8001174:	438b      	bics	r3, r1
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	430b      	orrs	r3, r1
 800117e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff f97c 	bl	800047c <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d111      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	e009      	b.n	80011a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001192:	f7ff f973 	bl	800047c <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	4a43      	ldr	r2, [pc, #268]	; (80012ac <HAL_RCC_ClockConfig+0x200>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e07a      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	220c      	movs	r2, #12
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d1ef      	bne.n	8001192 <HAL_RCC_ClockConfig+0xe6>
 80011b2:	e03a      	b.n	800122a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d111      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011bc:	e009      	b.n	80011d2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011be:	f7ff f95d 	bl	800047c <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_RCC_ClockConfig+0x200>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e064      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	220c      	movs	r2, #12
 80011d8:	4013      	ands	r3, r2
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d1ef      	bne.n	80011be <HAL_RCC_ClockConfig+0x112>
 80011de:	e024      	b.n	800122a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d11b      	bne.n	8001220 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80011e8:	e009      	b.n	80011fe <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ea:	f7ff f947 	bl	800047c <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <HAL_RCC_ClockConfig+0x200>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e04e      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	220c      	movs	r2, #12
 8001204:	4013      	ands	r3, r2
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d1ef      	bne.n	80011ea <HAL_RCC_ClockConfig+0x13e>
 800120a:	e00e      	b.n	800122a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff f936 	bl	800047c <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_RCC_ClockConfig+0x200>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e03d      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	401a      	ands	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d911      	bls.n	800125c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	438a      	bics	r2, r1
 8001242:	0011      	movs	r1, r2
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x1f8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	401a      	ands	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e01f      	b.n	800129c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	4013      	ands	r3, r2
 8001264:	d008      	beq.n	8001278 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4910      	ldr	r1, [pc, #64]	; (80012b0 <HAL_RCC_ClockConfig+0x204>)
 800126e:	4019      	ands	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	430b      	orrs	r3, r1
 8001276:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001278:	f000 f820 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 800127c:	0001      	movs	r1, r0
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	220f      	movs	r2, #15
 8001286:	4013      	ands	r3, r2
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_RCC_ClockConfig+0x208>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	000a      	movs	r2, r1
 800128e:	40da      	lsrs	r2, r3
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x20c>)
 8001292:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff f8c9 	bl	800042c <HAL_InitTick>
  
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40022000 	.word	0x40022000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	00001388 	.word	0x00001388
 80012b0:	fffff8ff 	.word	0xfffff8ff
 80012b4:	08003ca0 	.word	0x08003ca0
 80012b8:	20000080 	.word	0x20000080

080012bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08f      	sub	sp, #60	; 0x3c
 80012c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012c2:	2314      	movs	r3, #20
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80012c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012ca:	c313      	stmia	r3!, {r0, r1, r4}
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4a35      	ldr	r2, [pc, #212]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xec>)
 80012d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012d6:	c313      	stmia	r3!, {r0, r1, r4}
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_RCC_GetSysClockFreq+0xf0>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d006      	beq.n	800130e <HAL_RCC_GetSysClockFreq+0x52>
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d043      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0xd0>
 8001304:	2b04      	cmp	r3, #4
 8001306:	d144      	bne.n	8001392 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800130c:	e044      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	220f      	movs	r2, #15
 8001314:	4013      	ands	r3, r2
 8001316:	2214      	movs	r2, #20
 8001318:	18ba      	adds	r2, r7, r2
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_RCC_GetSysClockFreq+0xf0>)
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	220f      	movs	r2, #15
 8001324:	4013      	ands	r3, r2
 8001326:	1d3a      	adds	r2, r7, #4
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	23c0      	movs	r3, #192	; 0xc0
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	401a      	ands	r2, r3
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	429a      	cmp	r2, r3
 800133a:	d109      	bne.n	8001350 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800133c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001340:	f7fe feea 	bl	8000118 <__udivsi3>
 8001344:	0003      	movs	r3, r0
 8001346:	001a      	movs	r2, r3
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	4353      	muls	r3, r2
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
 800134e:	e01a      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	401a      	ands	r2, r3
 8001358:	23c0      	movs	r3, #192	; 0xc0
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	429a      	cmp	r2, r3
 800135e:	d109      	bne.n	8001374 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001364:	f7fe fed8 	bl	8000118 <__udivsi3>
 8001368:	0003      	movs	r3, r0
 800136a:	001a      	movs	r2, r3
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	4353      	muls	r3, r2
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
 8001372:	e008      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001378:	f7fe fece 	bl	8000118 <__udivsi3>
 800137c:	0003      	movs	r3, r0
 800137e:	001a      	movs	r2, r3
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	4353      	muls	r3, r2
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800138a:	e005      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001390:	e002      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001396:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b00f      	add	sp, #60	; 0x3c
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	08003c38 	.word	0x08003c38
 80013a8:	08003c48 	.word	0x08003c48
 80013ac:	40021000 	.word	0x40021000
 80013b0:	007a1200 	.word	0x007a1200
 80013b4:	02dc6c00 	.word	0x02dc6c00

080013b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000080 	.word	0x20000080

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013d0:	f7ff fff2 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013d4:	0001      	movs	r1, r0
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	2207      	movs	r2, #7
 80013de:	4013      	ands	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	40d9      	lsrs	r1, r3
 80013e6:	000b      	movs	r3, r1
}    
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08003cb0 	.word	0x08003cb0

080013f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001414:	e08e      	b.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2317      	movs	r3, #23
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b6e      	ldr	r3, [pc, #440]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	055b      	lsls	r3, r3, #21
 8001426:	4013      	ands	r3, r2
 8001428:	d111      	bne.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800142c:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800142e:	69d2      	ldr	r2, [r2, #28]
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0549      	lsls	r1, r1, #21
 8001434:	430a      	orrs	r2, r1
 8001436:	61da      	str	r2, [r3, #28]
 8001438:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	055b      	lsls	r3, r3, #21
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2317      	movs	r3, #23
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4013      	ands	r3, r2
 8001458:	d11a      	bne.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b60      	ldr	r3, [pc, #384]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800145c:	4a5f      	ldr	r2, [pc, #380]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0049      	lsls	r1, r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001468:	f7ff f808 	bl	800047c <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7ff f803 	bl	800047c <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0a4      	b.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4013      	ands	r3, r2
 800148e:	d0f0      	beq.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	23c0      	movs	r3, #192	; 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d034      	beq.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	401a      	ands	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d02c      	beq.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014bc:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014be:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014c0:	6a12      	ldr	r2, [r2, #32]
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0249      	lsls	r1, r1, #9
 80014c6:	430a      	orrs	r2, r1
 80014c8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014cc:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014ce:	6a12      	ldr	r2, [r2, #32]
 80014d0:	4944      	ldr	r1, [pc, #272]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7fe ffca 	bl	800047c <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e009      	b.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7fe ffc5 	bl	800047c <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e065      	b.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800150c:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4933      	ldr	r1, [pc, #204]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001514:	4019      	ands	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	430b      	orrs	r3, r1
 800151c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800151e:	2317      	movs	r3, #23
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800152c:	69d2      	ldr	r2, [r2, #28]
 800152e:	492f      	ldr	r1, [pc, #188]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001530:	400a      	ands	r2, r1
 8001532:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	d009      	beq.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	2103      	movs	r1, #3
 8001546:	438b      	bics	r3, r1
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	430b      	orrs	r3, r1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d008      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800155c:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4923      	ldr	r1, [pc, #140]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001564:	4019      	ands	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	430b      	orrs	r3, r1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2220      	movs	r2, #32
 8001574:	4013      	ands	r3, r2
 8001576:	d009      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	2110      	movs	r1, #16
 8001580:	438b      	bics	r3, r1
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	430b      	orrs	r3, r1
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	029b      	lsls	r3, r3, #10
 8001594:	4013      	ands	r3, r2
 8001596:	d009      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	438b      	bics	r3, r1
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	d009      	beq.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	438b      	bics	r3, r1
 80015c2:	0019      	movs	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b006      	add	sp, #24
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007000 	.word	0x40007000
 80015e0:	fffffcff 	.word	0xfffffcff
 80015e4:	fffeffff 	.word	0xfffeffff
 80015e8:	00001388 	.word	0x00001388
 80015ec:	efffffff 	.word	0xefffffff
 80015f0:	fffcffff 	.word	0xfffcffff

080015f4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e01e      	b.n	8001644 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	223d      	movs	r2, #61	; 0x3d
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d107      	bne.n	8001622 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	223c      	movs	r2, #60	; 0x3c
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0018      	movs	r0, r3
 800161e:	f002 f891 	bl	8003744 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	223d      	movs	r2, #61	; 0x3d
 8001626:	2102      	movs	r1, #2
 8001628:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	0019      	movs	r1, r3
 8001634:	0010      	movs	r0, r2
 8001636:	f000 fa63 	bl	8001b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	223d      	movs	r2, #61	; 0x3d
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	68d2      	ldr	r2, [r2, #12]
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	68d2      	ldr	r2, [r2, #12]
 8001692:	2101      	movs	r1, #1
 8001694:	438a      	bics	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_TIM_Base_Stop_IT+0x4c>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	d10d      	bne.n	80016c0 <HAL_TIM_Base_Stop_IT+0x40>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_TIM_Base_Stop_IT+0x50>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	d107      	bne.n	80016c0 <HAL_TIM_Base_Stop_IT+0x40>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	00001111 	.word	0x00001111
 80016d0:	00000444 	.word	0x00000444

080016d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d124      	bne.n	8001734 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d11d      	bne.n	8001734 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4252      	negs	r2, r2
 8001700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2203      	movs	r2, #3
 8001710:	4013      	ands	r3, r2
 8001712:	d004      	beq.n	800171e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	0018      	movs	r0, r3
 8001718:	f000 f9da 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 800171c:	e007      	b.n	800172e <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f9cd 	bl	8001ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	0018      	movs	r0, r3
 800172a:	f000 f9d9 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	2b04      	cmp	r3, #4
 8001740:	d125      	bne.n	800178e <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	2b04      	cmp	r3, #4
 800174e:	d11e      	bne.n	800178e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2205      	movs	r2, #5
 8001756:	4252      	negs	r2, r2
 8001758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 f9ad 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 8001776:	e007      	b.n	8001788 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	0018      	movs	r0, r3
 800177c:	f000 f9a0 	bl	8001ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0018      	movs	r0, r3
 8001784:	f000 f9ac 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2208      	movs	r2, #8
 8001796:	4013      	ands	r3, r2
 8001798:	2b08      	cmp	r3, #8
 800179a:	d124      	bne.n	80017e6 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d11d      	bne.n	80017e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2209      	movs	r2, #9
 80017b0:	4252      	negs	r2, r2
 80017b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	d004      	beq.n	80017d0 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 f981 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 80017ce:	e007      	b.n	80017e0 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f974 	bl	8001ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f980 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2210      	movs	r2, #16
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d125      	bne.n	8001840 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2210      	movs	r2, #16
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2211      	movs	r2, #17
 8001808:	4252      	negs	r2, r2
 800180a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2208      	movs	r2, #8
 8001810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	23c0      	movs	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f954 	bl	8001ad0 <HAL_TIM_IC_CaptureCallback>
 8001828:	e007      	b.n	800183a <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	f000 f947 	bl	8001ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f953 	bl	8001ae0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10f      	bne.n	800186e <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2202      	movs	r2, #2
 8001862:	4252      	negs	r2, r2
 8001864:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f001 f8f3 	bl	8002a54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	4013      	ands	r3, r2
 8001878:	2b80      	cmp	r3, #128	; 0x80
 800187a:	d10f      	bne.n	800189c <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	4013      	ands	r3, r2
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d108      	bne.n	800189c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2281      	movs	r2, #129	; 0x81
 8001890:	4252      	negs	r2, r2
 8001892:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 faa9 	bl	8001dee <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d10f      	bne.n	80018ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d108      	bne.n	80018ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2241      	movs	r2, #65	; 0x41
 80018be:	4252      	negs	r2, r2
 80018c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 f913 	bl	8001af0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2220      	movs	r2, #32
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d10f      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d108      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2221      	movs	r2, #33	; 0x21
 80018ec:	4252      	negs	r2, r2
 80018ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fa73 	bl	8001dde <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223c      	movs	r2, #60	; 0x3c
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_TIM_ConfigClockSource+0x1c>
 8001918:	2302      	movs	r3, #2
 800191a:	e0ca      	b.n	8001ab2 <HAL_TIM_ConfigClockSource+0x1b2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	223c      	movs	r2, #60	; 0x3c
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	223d      	movs	r2, #61	; 0x3d
 8001928:	2102      	movs	r1, #2
 800192a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2277      	movs	r2, #119	; 0x77
 8001938:	4393      	bics	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_TIM_ConfigClockSource+0x1bc>)
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b40      	cmp	r3, #64	; 0x40
 8001952:	d100      	bne.n	8001956 <HAL_TIM_ConfigClockSource+0x56>
 8001954:	e078      	b.n	8001a48 <HAL_TIM_ConfigClockSource+0x148>
 8001956:	d80e      	bhi.n	8001976 <HAL_TIM_ConfigClockSource+0x76>
 8001958:	2b10      	cmp	r3, #16
 800195a:	d100      	bne.n	800195e <HAL_TIM_ConfigClockSource+0x5e>
 800195c:	e08b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
 800195e:	d803      	bhi.n	8001968 <HAL_TIM_ConfigClockSource+0x68>
 8001960:	2b00      	cmp	r3, #0
 8001962:	d100      	bne.n	8001966 <HAL_TIM_ConfigClockSource+0x66>
 8001964:	e080      	b.n	8001a68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001966:	e09b      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001968:	2b20      	cmp	r3, #32
 800196a:	d100      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x6e>
 800196c:	e08a      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x184>
 800196e:	2b30      	cmp	r3, #48	; 0x30
 8001970:	d100      	bne.n	8001974 <HAL_TIM_ConfigClockSource+0x74>
 8001972:	e08e      	b.n	8001a92 <HAL_TIM_ConfigClockSource+0x192>
    break;
 8001974:	e094      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001976:	2b70      	cmp	r3, #112	; 0x70
 8001978:	d017      	beq.n	80019aa <HAL_TIM_ConfigClockSource+0xaa>
 800197a:	d804      	bhi.n	8001986 <HAL_TIM_ConfigClockSource+0x86>
 800197c:	2b50      	cmp	r3, #80	; 0x50
 800197e:	d043      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0x108>
 8001980:	2b60      	cmp	r3, #96	; 0x60
 8001982:	d051      	beq.n	8001a28 <HAL_TIM_ConfigClockSource+0x128>
    break;
 8001984:	e08c      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	0152      	lsls	r2, r2, #5
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_TIM_ConfigClockSource+0x98>
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	0192      	lsls	r2, r2, #6
 8001992:	4293      	cmp	r3, r2
 8001994:	d024      	beq.n	80019e0 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 8001996:	e083      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	6892      	ldr	r2, [r2, #8]
 80019a2:	2107      	movs	r1, #7
 80019a4:	438a      	bics	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
    break;
 80019a8:	e07a      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f000 f9ab 	bl	8001d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2277      	movs	r2, #119	; 0x77
 80019ca:	4393      	bics	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2277      	movs	r2, #119	; 0x77
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	609a      	str	r2, [r3, #8]
    break;
 80019de:	e05f      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f000 f990 	bl	8001d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	01c9      	lsls	r1, r1, #7
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
    break;
 8001a06:	e04b      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	001a      	movs	r2, r3
 8001a16:	f000 f8f5 	bl	8001c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2150      	movs	r1, #80	; 0x50
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f957 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a26:	e03b      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	001a      	movs	r2, r3
 8001a36:	f000 f917 	bl	8001c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2160      	movs	r1, #96	; 0x60
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 f947 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a46:	e02b      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	001a      	movs	r2, r3
 8001a56:	f000 f8d5 	bl	8001c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2140      	movs	r1, #64	; 0x40
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 f937 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a66:	e01b      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f930 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a74:	e014      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f929 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a82:	e00d      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2120      	movs	r1, #32
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f922 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a90:	e006      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2130      	movs	r1, #48	; 0x30
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f91b 	bl	8001cd4 <TIM_ITRx_SetConfig>
    break;
 8001a9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	223d      	movs	r2, #61	; 0x3d
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	223c      	movs	r2, #60	; 0x3c
 8001aac:	2100      	movs	r1, #0
 8001aae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b004      	add	sp, #16
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	ffff00ff 	.word	0xffff00ff

08001ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <TIM_Base_SetConfig+0xe8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d008      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d003      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a30      	ldr	r2, [pc, #192]	; (8001bec <TIM_Base_SetConfig+0xec>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d108      	bne.n	8001b40 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2270      	movs	r2, #112	; 0x70
 8001b32:	4393      	bics	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <TIM_Base_SetConfig+0xe8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d018      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d013      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a25      	ldr	r2, [pc, #148]	; (8001bec <TIM_Base_SetConfig+0xec>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00f      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <TIM_Base_SetConfig+0xf0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00b      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <TIM_Base_SetConfig+0xf4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <TIM_Base_SetConfig+0xf8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d003      	beq.n	8001b7a <TIM_Base_SetConfig+0x7a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <TIM_Base_SetConfig+0xfc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d108      	bne.n	8001b8c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <TIM_Base_SetConfig+0x100>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	4393      	bics	r3, r2
 8001b92:	001a      	movs	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <TIM_Base_SetConfig+0xe8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00b      	beq.n	8001bd2 <TIM_Base_SetConfig+0xd2>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <TIM_Base_SetConfig+0xf4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <TIM_Base_SetConfig+0xd2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <TIM_Base_SetConfig+0xf8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <TIM_Base_SetConfig+0xd2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <TIM_Base_SetConfig+0xfc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d103      	bne.n	8001bda <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	615a      	str	r2, [r3, #20]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40002000 	.word	0x40002000
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40014400 	.word	0x40014400
 8001bfc:	40014800 	.word	0x40014800
 8001c00:	fffffcff 	.word	0xfffffcff

08001c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4393      	bics	r3, r2
 8001c26:	001a      	movs	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	22f0      	movs	r2, #240	; 0xf0
 8001c36:	4393      	bics	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	220a      	movs	r2, #10
 8001c48:	4393      	bics	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	621a      	str	r2, [r3, #32]
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	2210      	movs	r2, #16
 8001c82:	4393      	bics	r3, r2
 8001c84:	001a      	movs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <TIM_TI2_ConfigInputStage+0x68>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	031b      	lsls	r3, r3, #12
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	22a0      	movs	r2, #160	; 0xa0
 8001cac:	4393      	bics	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	621a      	str	r2, [r3, #32]
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b006      	add	sp, #24
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	ffff0fff 	.word	0xffff0fff

08001cd4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	000a      	movs	r2, r1
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2270      	movs	r2, #112	; 0x70
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cf4:	1cbb      	adds	r3, r7, #2
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	001a      	movs	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <TIM_ETR_SetConfig+0x40>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	021a      	lsls	r2, r3, #8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b006      	add	sp, #24
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	ffff00ff 	.word	0xffff00ff

08001d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223c      	movs	r2, #60	; 0x3c
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e032      	b.n	8001dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	223c      	movs	r2, #60	; 0x3c
 8001d74:	2101      	movs	r1, #1
 8001d76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	223d      	movs	r2, #61	; 0x3d
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	6852      	ldr	r2, [r2, #4]
 8001d8a:	2170      	movs	r1, #112	; 0x70
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	6851      	ldr	r1, [r2, #4]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	438a      	bics	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	6891      	ldr	r1, [r2, #8]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	6852      	ldr	r2, [r2, #4]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	223d      	movs	r2, #61	; 0x3d
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	223c      	movs	r2, #60	; 0x3c
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e047      	b.n	8001ea2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2269      	movs	r2, #105	; 0x69
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2268      	movs	r2, #104	; 0x68
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f001 fcb3 	bl	8003794 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2269      	movs	r2, #105	; 0x69
 8001e32:	2124      	movs	r1, #36	; 0x24
 8001e34:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	438a      	bics	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f8d5 	bl	8001ff8 <UART_SetConfig>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e024      	b.n	8001ea2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fa84 	bl	8002370 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	6852      	ldr	r2, [r2, #4]
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_UART_Init+0xac>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	212a      	movs	r1, #42	; 0x2a
 8001e84:	438a      	bics	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 fb14 	bl	80024c8 <UART_CheckIdleState>
 8001ea0:	0003      	movs	r3, r0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	ffffb7ff 	.word	0xffffb7ff

08001eb0 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2269      	movs	r2, #105	; 0x69
 8001ec8:	5c9b      	ldrb	r3, [r3, r2]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d000      	beq.n	8001ed2 <HAL_UART_Transmit+0x22>
 8001ed0:	e08c      	b.n	8001fec <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_UART_Transmit+0x30>
 8001ed8:	1dbb      	adds	r3, r7, #6
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e084      	b.n	8001fee <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	015b      	lsls	r3, r3, #5
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d109      	bne.n	8001f04 <HAL_UART_Transmit+0x54>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e074      	b.n	8001fee <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2268      	movs	r2, #104	; 0x68
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Transmit+0x62>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e06d      	b.n	8001fee <HAL_UART_Transmit+0x13e>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2268      	movs	r2, #104	; 0x68
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2269      	movs	r2, #105	; 0x69
 8001f24:	2121      	movs	r1, #33	; 0x21
 8001f26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f28:	f7fe faa8 	bl	800047c <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1dba      	adds	r2, r7, #6
 8001f34:	2150      	movs	r1, #80	; 0x50
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1dba      	adds	r2, r7, #6
 8001f3e:	2152      	movs	r1, #82	; 0x52
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001f44:	e035      	b.n	8001fb2 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2252      	movs	r2, #82	; 0x52
 8001f4a:	5a9b      	ldrh	r3, [r3, r2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b299      	uxth	r1, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2252      	movs	r2, #82	; 0x52
 8001f56:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0013      	movs	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	f000 fb07 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e03d      	b.n	8001fee <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d111      	bne.n	8001fa2 <HAL_UART_Transmit+0xf2>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	8812      	ldrh	r2, [r2, #0]
 8001f92:	05d2      	lsls	r2, r2, #23
 8001f94:	0dd2      	lsrs	r2, r2, #23
 8001f96:	b292      	uxth	r2, r2
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e007      	b.n	8001fb2 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c59      	adds	r1, r3, #1
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2252      	movs	r2, #82	; 0x52
 8001fb6:	5a9b      	ldrh	r3, [r3, r2]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1c3      	bne.n	8001f46 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	f000 fad4 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e00a      	b.n	8001fee <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2269      	movs	r2, #105	; 0x69
 8001fdc:	2120      	movs	r1, #32
 8001fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2268      	movs	r2, #104	; 0x68
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002004:	2317      	movs	r3, #23
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2210      	movs	r2, #16
 800200a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800200c:	230a      	movs	r3, #10
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002014:	2314      	movs	r3, #20
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800201c:	2313      	movs	r3, #19
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	49c0      	ldr	r1, [pc, #768]	; (8002348 <UART_SetConfig+0x350>)
 8002048:	4011      	ands	r1, r2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	6852      	ldr	r2, [r2, #4]
 800205a:	49bc      	ldr	r1, [pc, #752]	; (800234c <UART_SetConfig+0x354>)
 800205c:	4011      	ands	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68d2      	ldr	r2, [r2, #12]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	6892      	ldr	r2, [r2, #8]
 800207c:	49b4      	ldr	r1, [pc, #720]	; (8002350 <UART_SetConfig+0x358>)
 800207e:	4011      	ands	r1, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4ab2      	ldr	r2, [pc, #712]	; (8002354 <UART_SetConfig+0x35c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d125      	bne.n	80020dc <UART_SetConfig+0xe4>
 8002090:	4bb1      	ldr	r3, [pc, #708]	; (8002358 <UART_SetConfig+0x360>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2203      	movs	r2, #3
 8002096:	4013      	ands	r3, r2
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00f      	beq.n	80020bc <UART_SetConfig+0xc4>
 800209c:	d304      	bcc.n	80020a8 <UART_SetConfig+0xb0>
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d011      	beq.n	80020c6 <UART_SetConfig+0xce>
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d005      	beq.n	80020b2 <UART_SetConfig+0xba>
 80020a6:	e013      	b.n	80020d0 <UART_SetConfig+0xd8>
 80020a8:	2317      	movs	r3, #23
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e064      	b.n	800217c <UART_SetConfig+0x184>
 80020b2:	2317      	movs	r3, #23
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e05f      	b.n	800217c <UART_SetConfig+0x184>
 80020bc:	2317      	movs	r3, #23
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2204      	movs	r2, #4
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e05a      	b.n	800217c <UART_SetConfig+0x184>
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2208      	movs	r2, #8
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e055      	b.n	800217c <UART_SetConfig+0x184>
 80020d0:	2317      	movs	r3, #23
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2210      	movs	r2, #16
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	e04f      	b.n	800217c <UART_SetConfig+0x184>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a9e      	ldr	r2, [pc, #632]	; (800235c <UART_SetConfig+0x364>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d132      	bne.n	800214c <UART_SetConfig+0x154>
 80020e6:	4b9c      	ldr	r3, [pc, #624]	; (8002358 <UART_SetConfig+0x360>)
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	23c0      	movs	r3, #192	; 0xc0
 80020ec:	029b      	lsls	r3, r3, #10
 80020ee:	4013      	ands	r3, r2
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0252      	lsls	r2, r2, #9
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d019      	beq.n	800212c <UART_SetConfig+0x134>
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	0252      	lsls	r2, r2, #9
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d802      	bhi.n	8002106 <UART_SetConfig+0x10e>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <UART_SetConfig+0x120>
 8002104:	e01c      	b.n	8002140 <UART_SetConfig+0x148>
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	0292      	lsls	r2, r2, #10
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <UART_SetConfig+0x13e>
 800210e:	22c0      	movs	r2, #192	; 0xc0
 8002110:	0292      	lsls	r2, r2, #10
 8002112:	4293      	cmp	r3, r2
 8002114:	d005      	beq.n	8002122 <UART_SetConfig+0x12a>
 8002116:	e013      	b.n	8002140 <UART_SetConfig+0x148>
 8002118:	2317      	movs	r3, #23
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e02c      	b.n	800217c <UART_SetConfig+0x184>
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e027      	b.n	800217c <UART_SetConfig+0x184>
 800212c:	2317      	movs	r3, #23
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2204      	movs	r2, #4
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e022      	b.n	800217c <UART_SetConfig+0x184>
 8002136:	2317      	movs	r3, #23
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2208      	movs	r2, #8
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e01d      	b.n	800217c <UART_SetConfig+0x184>
 8002140:	2317      	movs	r3, #23
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2210      	movs	r2, #16
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	e017      	b.n	800217c <UART_SetConfig+0x184>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a83      	ldr	r2, [pc, #524]	; (8002360 <UART_SetConfig+0x368>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d104      	bne.n	8002160 <UART_SetConfig+0x168>
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e00d      	b.n	800217c <UART_SetConfig+0x184>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <UART_SetConfig+0x36c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d104      	bne.n	8002174 <UART_SetConfig+0x17c>
 800216a:	2317      	movs	r3, #23
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e003      	b.n	800217c <UART_SetConfig+0x184>
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2210      	movs	r2, #16
 800217a:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	429a      	cmp	r2, r3
 8002186:	d000      	beq.n	800218a <UART_SetConfig+0x192>
 8002188:	e07b      	b.n	8002282 <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 800218a:	2317      	movs	r3, #23
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d01c      	beq.n	80021ce <UART_SetConfig+0x1d6>
 8002194:	dc02      	bgt.n	800219c <UART_SetConfig+0x1a4>
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <UART_SetConfig+0x1ae>
 800219a:	e04f      	b.n	800223c <UART_SetConfig+0x244>
 800219c:	2b04      	cmp	r3, #4
 800219e:	d027      	beq.n	80021f0 <UART_SetConfig+0x1f8>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d039      	beq.n	8002218 <UART_SetConfig+0x220>
 80021a4:	e04a      	b.n	800223c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021a6:	f7ff f911 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80021aa:	0003      	movs	r3, r0
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	18d2      	adds	r2, r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f7fd ffab 	bl	8000118 <__udivsi3>
 80021c2:	0003      	movs	r3, r0
 80021c4:	001a      	movs	r2, r3
 80021c6:	2314      	movs	r3, #20
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	801a      	strh	r2, [r3, #0]
        break;
 80021cc:	e03b      	b.n	8002246 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	4a64      	ldr	r2, [pc, #400]	; (8002368 <UART_SetConfig+0x370>)
 80021d6:	189a      	adds	r2, r3, r2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0019      	movs	r1, r3
 80021de:	0010      	movs	r0, r2
 80021e0:	f7fd ff9a 	bl	8000118 <__udivsi3>
 80021e4:	0003      	movs	r3, r0
 80021e6:	001a      	movs	r2, r3
 80021e8:	2314      	movs	r3, #20
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	801a      	strh	r2, [r3, #0]
        break;
 80021ee:	e02a      	b.n	8002246 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021f0:	f7ff f864 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 80021f4:	0003      	movs	r3, r0
 80021f6:	005a      	lsls	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	18d2      	adds	r2, r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f7fd ff86 	bl	8000118 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	001a      	movs	r2, r3
 8002210:	2314      	movs	r3, #20
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	801a      	strh	r2, [r3, #0]
        break;
 8002216:	e016      	b.n	8002246 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	0252      	lsls	r2, r2, #9
 8002222:	189a      	adds	r2, r3, r2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	0019      	movs	r1, r3
 800222a:	0010      	movs	r0, r2
 800222c:	f7fd ff74 	bl	8000118 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	001a      	movs	r2, r3
 8002234:	2314      	movs	r3, #20
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	801a      	strh	r2, [r3, #0]
        break;
 800223a:	e004      	b.n	8002246 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800223c:	2313      	movs	r3, #19
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
        break;
 8002244:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002246:	230a      	movs	r3, #10
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2214      	movs	r2, #20
 800224c:	18ba      	adds	r2, r7, r2
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	210f      	movs	r1, #15
 8002252:	438a      	bics	r2, r1
 8002254:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002256:	2314      	movs	r3, #20
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	105b      	asrs	r3, r3, #1
 800225e:	b29b      	uxth	r3, r3
 8002260:	2207      	movs	r2, #7
 8002262:	4013      	ands	r3, r2
 8002264:	b299      	uxth	r1, r3
 8002266:	230a      	movs	r3, #10
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	220a      	movs	r2, #10
 800226c:	18ba      	adds	r2, r7, r2
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	220a      	movs	r2, #10
 800227a:	18ba      	adds	r2, r7, r2
 800227c:	8812      	ldrh	r2, [r2, #0]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	e05b      	b.n	800233a <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 8002282:	2317      	movs	r3, #23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d01b      	beq.n	80022c4 <UART_SetConfig+0x2cc>
 800228c:	dc02      	bgt.n	8002294 <UART_SetConfig+0x29c>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <UART_SetConfig+0x2a6>
 8002292:	e04d      	b.n	8002330 <UART_SetConfig+0x338>
 8002294:	2b04      	cmp	r3, #4
 8002296:	d026      	beq.n	80022e6 <UART_SetConfig+0x2ee>
 8002298:	2b08      	cmp	r3, #8
 800229a:	d037      	beq.n	800230c <UART_SetConfig+0x314>
 800229c:	e048      	b.n	8002330 <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681c      	ldr	r4, [r3, #0]
 80022a2:	f7ff f893 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80022a6:	0002      	movs	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	18d2      	adds	r2, r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	0019      	movs	r1, r3
 80022b6:	0010      	movs	r0, r2
 80022b8:	f7fd ff2e 	bl	8000118 <__udivsi3>
 80022bc:	0003      	movs	r3, r0
 80022be:	b29b      	uxth	r3, r3
 80022c0:	60e3      	str	r3, [r4, #12]
        break;
 80022c2:	e03a      	b.n	800233a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	4a27      	ldr	r2, [pc, #156]	; (800236c <UART_SetConfig+0x374>)
 80022d0:	189a      	adds	r2, r3, r2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0019      	movs	r1, r3
 80022d8:	0010      	movs	r0, r2
 80022da:	f7fd ff1d 	bl	8000118 <__udivsi3>
 80022de:	0003      	movs	r3, r0
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	60e3      	str	r3, [r4, #12]
        break;
 80022e4:	e029      	b.n	800233a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681c      	ldr	r4, [r3, #0]
 80022ea:	f7fe ffe7 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 80022ee:	0002      	movs	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	18d2      	adds	r2, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0019      	movs	r1, r3
 80022fe:	0010      	movs	r0, r2
 8002300:	f7fd ff0a 	bl	8000118 <__udivsi3>
 8002304:	0003      	movs	r3, r0
 8002306:	b29b      	uxth	r3, r3
 8002308:	60e3      	str	r3, [r4, #12]
        break;
 800230a:	e016      	b.n	800233a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	0212      	lsls	r2, r2, #8
 800231a:	189a      	adds	r2, r3, r2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0019      	movs	r1, r3
 8002322:	0010      	movs	r0, r2
 8002324:	f7fd fef8 	bl	8000118 <__udivsi3>
 8002328:	0003      	movs	r3, r0
 800232a:	b29b      	uxth	r3, r3
 800232c:	60e3      	str	r3, [r4, #12]
        break;
 800232e:	e004      	b.n	800233a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002330:	2313      	movs	r3, #19
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
        break;
 8002338:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800233a:	2313      	movs	r3, #19
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	781b      	ldrb	r3, [r3, #0]

}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b007      	add	sp, #28
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	efff69f3 	.word	0xefff69f3
 800234c:	ffffcfff 	.word	0xffffcfff
 8002350:	fffff4ff 	.word	0xfffff4ff
 8002354:	40013800 	.word	0x40013800
 8002358:	40021000 	.word	0x40021000
 800235c:	40004400 	.word	0x40004400
 8002360:	40004800 	.word	0x40004800
 8002364:	40004c00 	.word	0x40004c00
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d00a      	beq.n	8002398 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	4945      	ldr	r1, [pc, #276]	; (80024a4 <UART_AdvFeatureConfig+0x134>)
 800238e:	4011      	ands	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d00a      	beq.n	80023b8 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	6852      	ldr	r2, [r2, #4]
 80023ac:	493e      	ldr	r1, [pc, #248]	; (80024a8 <UART_AdvFeatureConfig+0x138>)
 80023ae:	4011      	ands	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d00a      	beq.n	80023d8 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	4937      	ldr	r1, [pc, #220]	; (80024ac <UART_AdvFeatureConfig+0x13c>)
 80023ce:	4011      	ands	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2208      	movs	r2, #8
 80023de:	4013      	ands	r3, r2
 80023e0:	d00a      	beq.n	80023f8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	6852      	ldr	r2, [r2, #4]
 80023ec:	4930      	ldr	r1, [pc, #192]	; (80024b0 <UART_AdvFeatureConfig+0x140>)
 80023ee:	4011      	ands	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2210      	movs	r2, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	d00a      	beq.n	8002418 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	6892      	ldr	r2, [r2, #8]
 800240c:	4929      	ldr	r1, [pc, #164]	; (80024b4 <UART_AdvFeatureConfig+0x144>)
 800240e:	4011      	ands	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2220      	movs	r2, #32
 800241e:	4013      	ands	r3, r2
 8002420:	d00a      	beq.n	8002438 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	6892      	ldr	r2, [r2, #8]
 800242c:	4922      	ldr	r1, [pc, #136]	; (80024b8 <UART_AdvFeatureConfig+0x148>)
 800242e:	4011      	ands	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	4013      	ands	r3, r2
 8002440:	d01b      	beq.n	800247a <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	491b      	ldr	r1, [pc, #108]	; (80024bc <UART_AdvFeatureConfig+0x14c>)
 800244e:	4011      	ands	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	035b      	lsls	r3, r3, #13
 8002460:	429a      	cmp	r2, r3
 8002462:	d10a      	bne.n	800247a <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	6852      	ldr	r2, [r2, #4]
 800246e:	4914      	ldr	r1, [pc, #80]	; (80024c0 <UART_AdvFeatureConfig+0x150>)
 8002470:	4011      	ands	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	4013      	ands	r3, r2
 8002482:	d00a      	beq.n	800249a <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	6852      	ldr	r2, [r2, #4]
 800248e:	490d      	ldr	r1, [pc, #52]	; (80024c4 <UART_AdvFeatureConfig+0x154>)
 8002490:	4011      	ands	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  }
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	fffdffff 	.word	0xfffdffff
 80024a8:	fffeffff 	.word	0xfffeffff
 80024ac:	fffbffff 	.word	0xfffbffff
 80024b0:	ffff7fff 	.word	0xffff7fff
 80024b4:	ffffefff 	.word	0xffffefff
 80024b8:	ffffdfff 	.word	0xffffdfff
 80024bc:	ffefffff 	.word	0xffefffff
 80024c0:	ff9fffff 	.word	0xff9fffff
 80024c4:	fff7ffff 	.word	0xfff7ffff

080024c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80024da:	f7fd ffcf 	bl	800047c <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <UART_CheckIdleState+0xa4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <UART_CheckIdleState+0x2e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <UART_CheckIdleState+0xa8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d129      	bne.n	800254a <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	4013      	ands	r3, r2
 8002500:	2b08      	cmp	r3, #8
 8002502:	d10d      	bne.n	8002520 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	0399      	lsls	r1, r3, #14
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <UART_CheckIdleState+0xac>)
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0013      	movs	r3, r2
 8002512:	2200      	movs	r2, #0
 8002514:	f000 f830 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e021      	b.n	8002564 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	2b04      	cmp	r3, #4
 800252c:	d10d      	bne.n	800254a <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	03d9      	lsls	r1, r3, #15
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <UART_CheckIdleState+0xac>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	0013      	movs	r3, r2
 800253c:	2200      	movs	r2, #0
 800253e:	f000 f81b 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e00c      	b.n	8002564 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2269      	movs	r2, #105	; 0x69
 800254e:	2120      	movs	r1, #32
 8002550:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	226a      	movs	r2, #106	; 0x6a
 8002556:	2120      	movs	r1, #32
 8002558:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2268      	movs	r2, #104	; 0x68
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40013800 	.word	0x40013800
 8002570:	40004400 	.word	0x40004400
 8002574:	01ffffff 	.word	0x01ffffff

08002578 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002588:	e02b      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	3301      	adds	r3, #1
 800258e:	d028      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002596:	f7fd ff71 	bl	800047c <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d91d      	bls.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <UART_WaitOnFlagUntilTimeout+0x94>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6892      	ldr	r2, [r2, #8]
 80025c0:	2101      	movs	r1, #1
 80025c2:	438a      	bics	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2269      	movs	r2, #105	; 0x69
 80025ca:	2120      	movs	r1, #32
 80025cc:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	226a      	movs	r2, #106	; 0x6a
 80025d2:	2120      	movs	r1, #32
 80025d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2268      	movs	r2, #104	; 0x68
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	425a      	negs	r2, r3
 80025f2:	4153      	adcs	r3, r2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	001a      	movs	r2, r3
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0c4      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffe5f 	.word	0xfffffe5f

08002610 <fsm_fire>:
	free(fsm);
	return 1;
}

void fsm_fire(fsm_t* this)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	fsm_trans_t* t;
	for (t = this->tt; t->orig_state >= 0; ++t) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e01d      	b.n	800265c <fsm_fire+0x4c>
		if ((this->current_state == t->orig_state) && t->in(this)) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d114      	bne.n	8002656 <fsm_fire+0x46>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	0010      	movs	r0, r2
 8002634:	4798      	blx	r3
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d00d      	beq.n	8002656 <fsm_fire+0x46>
			this->current_state = t->dest_state;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
			if (t->out)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00d      	beq.n	8002666 <fsm_fire+0x56>
				t->out(this);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	0010      	movs	r0, r2
 8002652:	4798      	blx	r3
			break;
 8002654:	e007      	b.n	8002666 <fsm_fire+0x56>
	for (t = this->tt; t->orig_state >= 0; ++t) {
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3310      	adds	r3, #16
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	dadd      	bge.n	8002620 <fsm_fire+0x10>
		}
	}
}
 8002664:	e000      	b.n	8002668 <fsm_fire+0x58>
			break;
 8002666:	46c0      	nop			; (mov r8, r8)
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b004      	add	sp, #16
 800266e:	bd80      	pop	{r7, pc}

08002670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002676:	f7fd fec5 	bl	8000404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267a:	f000 f82d 	bl	80026d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800267e:	f000 f917 	bl	80028b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002682:	f000 f8e5 	bl	8002850 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002686:	f000 f887 	bl	8002798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 //HAL_TIM_Base_Start_IT(&htim1); //Start the timer
  HAL_TIM_Base_Init(&htim1);
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <main+0x5c>)
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe ffb1 	bl	80015f4 <HAL_TIM_Base_Init>
  //HAL_TIM_Base_Start_IT(&htim1);
	//LED Test
  //uart_printf("Begin! \n");
	simon_t* simon = simon_init(&htim1,HAL_GetTick());
 8002692:	f7fd fef3 	bl	800047c <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	001a      	movs	r2, r3
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <main+0x5c>)
 800269c:	0011      	movs	r1, r2
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 fb94 	bl	8002dcc <simon_init>
 80026a4:	0003      	movs	r3, r0
 80026a6:	607b      	str	r3, [r7, #4]
	_IRQ_BTN_handler = simon->_IRQ_Handlers[0];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <main+0x60>)
 80026b0:	601a      	str	r2, [r3, #0]
	_IRQ_TMR_handler = simon->_IRQ_Handlers[1];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <main+0x64>)
 80026ba:	601a      	str	r2, [r3, #0]
	//simon->game_flags |= 0x01;
	//Generic FSM type holder
	/* En caso de que haya mas de 1 maquina de estados podemos meterlas todas
	 dentro de un array del tipo fsm, de esta forma podemos hacer el bucle while generico para disparar
	 todas las maquinas de estados */
	fsm_t* simon_fsm = (fsm_t*)simon;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		fsm_fire(simon_fsm);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7ff ffa4 	bl	8002610 <fsm_fire>
 80026c8:	e7fa      	b.n	80026c0 <main+0x50>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	200001d8 	.word	0x200001d8
 80026d0:	20000104 	.word	0x20000104
 80026d4:	20000108 	.word	0x20000108

080026d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b098      	sub	sp, #96	; 0x60
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	232c      	movs	r3, #44	; 0x2c
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	0018      	movs	r0, r3
 80026e4:	2334      	movs	r3, #52	; 0x34
 80026e6:	001a      	movs	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f001 f9c3 	bl	8003a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ee:	231c      	movs	r3, #28
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	0018      	movs	r0, r3
 80026f4:	2310      	movs	r3, #16
 80026f6:	001a      	movs	r2, r3
 80026f8:	2100      	movs	r1, #0
 80026fa:	f001 f9bb 	bl	8003a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026fe:	003b      	movs	r3, r7
 8002700:	0018      	movs	r0, r3
 8002702:	231c      	movs	r3, #28
 8002704:	001a      	movs	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	f001 f9b4 	bl	8003a74 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800270c:	232c      	movs	r3, #44	; 0x2c
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002714:	232c      	movs	r3, #44	; 0x2c
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800271c:	232c      	movs	r3, #44	; 0x2c
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2210      	movs	r2, #16
 8002722:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002724:	232c      	movs	r3, #44	; 0x2c
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272c:	232c      	movs	r3, #44	; 0x2c
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	0018      	movs	r0, r3
 8002732:	f7fe f95d 	bl	80009f0 <HAL_RCC_OscConfig>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800273a:	f000 f9ad 	bl	8002a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273e:	231c      	movs	r3, #28
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2207      	movs	r2, #7
 8002744:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002746:	231c      	movs	r3, #28
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800274e:	231c      	movs	r3, #28
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002756:	231c      	movs	r3, #28
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800275e:	231c      	movs	r3, #28
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2100      	movs	r1, #0
 8002764:	0018      	movs	r0, r3
 8002766:	f7fe fca1 	bl	80010ac <HAL_RCC_ClockConfig>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800276e:	f000 f993 	bl	8002a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002772:	003b      	movs	r3, r7
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002778:	003b      	movs	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277e:	003b      	movs	r3, r7
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe fe39 	bl	80013f8 <HAL_RCCEx_PeriphCLKConfig>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800278a:	f000 f985 	bl	8002a98 <Error_Handler>
  }
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b018      	add	sp, #96	; 0x60
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	2308      	movs	r3, #8
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	0018      	movs	r0, r3
 80027a4:	2310      	movs	r3, #16
 80027a6:	001a      	movs	r2, r3
 80027a8:	2100      	movs	r1, #0
 80027aa:	f001 f963 	bl	8003a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ae:	003b      	movs	r3, r7
 80027b0:	0018      	movs	r0, r3
 80027b2:	2308      	movs	r3, #8
 80027b4:	001a      	movs	r2, r3
 80027b6:	2100      	movs	r1, #0
 80027b8:	f001 f95c 	bl	8003a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <MX_TIM1_Init+0xac>)
 80027c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2999;
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027c4:	4a20      	ldr	r2, [pc, #128]	; (8002848 <MX_TIM1_Init+0xb0>)
 80027c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 53332;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <MX_TIM1_Init+0xb4>)
 80027d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_TIM1_Init+0xa8>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe ff03 	bl	80015f4 <HAL_TIM_Base_Init>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80027f2:	f000 f951 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f6:	2308      	movs	r3, #8
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	0152      	lsls	r2, r2, #5
 80027fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002800:	2308      	movs	r3, #8
 8002802:	18fa      	adds	r2, r7, r3
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_TIM1_Init+0xa8>)
 8002806:	0011      	movs	r1, r2
 8002808:	0018      	movs	r0, r3
 800280a:	f7ff f879 	bl	8001900 <HAL_TIM_ConfigClockSource>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002812:	f000 f941 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	003b      	movs	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281c:	003b      	movs	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002822:	003a      	movs	r2, r7
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_TIM1_Init+0xa8>)
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fa95 	bl	8001d58 <HAL_TIMEx_MasterConfigSynchronization>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002832:	f000 f931 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	200001d8 	.word	0x200001d8
 8002844:	40012c00 	.word	0x40012c00
 8002848:	00000bb7 	.word	0x00000bb7
 800284c:	0000d054 	.word	0x0000d054

08002850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <MX_USART2_UART_Init+0x5c>)
 8002858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800285c:	2296      	movs	r2, #150	; 0x96
 800285e:	0212      	lsls	r2, r2, #8
 8002860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff fab3 	bl	8001e00 <HAL_UART_Init>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800289e:	f000 f8fb 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000218 	.word	0x20000218
 80028ac:	40004400 	.word	0x40004400

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	230c      	movs	r3, #12
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	0018      	movs	r0, r3
 80028bc:	2314      	movs	r3, #20
 80028be:	001a      	movs	r2, r3
 80028c0:	2100      	movs	r1, #0
 80028c2:	f001 f8d7 	bl	8003a74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028ca:	6952      	ldr	r2, [r2, #20]
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0289      	lsls	r1, r1, #10
 80028d0:	430a      	orrs	r2, r1
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028e4:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028e6:	6952      	ldr	r2, [r2, #20]
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	02c9      	lsls	r1, r1, #11
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <MX_GPIO_Init+0x16c>)
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	02db      	lsls	r3, r3, #11
 80028f8:	4013      	ands	r3, r2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <MX_GPIO_Init+0x16c>)
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <MX_GPIO_Init+0x16c>)
 8002902:	6952      	ldr	r2, [r2, #20]
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	0309      	lsls	r1, r1, #12
 8002908:	430a      	orrs	r2, r1
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <MX_GPIO_Init+0x16c>)
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	031b      	lsls	r3, r3, #12
 8002914:	4013      	ands	r3, r2
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800291a:	2390      	movs	r3, #144	; 0x90
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	2200      	movs	r2, #0
 8002920:	21f3      	movs	r1, #243	; 0xf3
 8002922:	0018      	movs	r0, r3
 8002924:	f7fe f82a 	bl	800097c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002928:	493d      	ldr	r1, [pc, #244]	; (8002a20 <MX_GPIO_Init+0x170>)
 800292a:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <MX_GPIO_Init+0x174>)
 800292c:	2200      	movs	r2, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f7fe f824 	bl	800097c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002934:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <MX_GPIO_Init+0x178>)
 8002936:	2200      	movs	r2, #0
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	0018      	movs	r0, r3
 800293c:	f7fe f81e 	bl	800097c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002940:	230c      	movs	r3, #12
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	22f3      	movs	r2, #243	; 0xf3
 8002946:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	230c      	movs	r3, #12
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2201      	movs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	230c      	movs	r3, #12
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	230c      	movs	r3, #12
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	230c      	movs	r3, #12
 8002962:	18fa      	adds	r2, r7, r3
 8002964:	2390      	movs	r3, #144	; 0x90
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f7fd fe8a 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002970:	230c      	movs	r3, #12
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <MX_GPIO_Init+0x170>)
 8002976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	230c      	movs	r3, #12
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	2201      	movs	r2, #1
 800297e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	230c      	movs	r3, #12
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	230c      	movs	r3, #12
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	230c      	movs	r3, #12
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <MX_GPIO_Init+0x174>)
 8002996:	0019      	movs	r1, r3
 8002998:	0010      	movs	r0, r2
 800299a:	f7fd fe73 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800299e:	230c      	movs	r3, #12
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	230c      	movs	r3, #12
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	230c      	movs	r3, #12
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	230c      	movs	r3, #12
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029be:	230c      	movs	r3, #12
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <MX_GPIO_Init+0x178>)
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f7fd fe5c 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029cc:	230c      	movs	r3, #12
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2238      	movs	r2, #56	; 0x38
 80029d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d4:	230c      	movs	r3, #12
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <MX_GPIO_Init+0x17c>)
 80029da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	230c      	movs	r3, #12
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	230c      	movs	r3, #12
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <MX_GPIO_Init+0x174>)
 80029ea:	0019      	movs	r1, r3
 80029ec:	0010      	movs	r0, r2
 80029ee:	f7fd fe49 	bl	8000684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2006      	movs	r0, #6
 80029f8:	f7fd fe10 	bl	800061c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80029fc:	2006      	movs	r0, #6
 80029fe:	f7fd fe23 	bl	8000648 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2007      	movs	r0, #7
 8002a08:	f7fd fe08 	bl	800061c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a0c:	2007      	movs	r0, #7
 8002a0e:	f7fd fe1b 	bl	8000648 <HAL_NVIC_EnableIRQ>

}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b008      	add	sp, #32
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	00000341 	.word	0x00000341
 8002a24:	48000400 	.word	0x48000400
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	10110000 	.word	0x10110000

08002a30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	0002      	movs	r2, r0
 8002a38:	1dbb      	adds	r3, r7, #6
 8002a3a:	801a      	strh	r2, [r3, #0]
	_IRQ_BTN_handler(&GPIO_Pin);
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_GPIO_EXTI_Callback+0x20>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1dba      	adds	r2, r7, #6
 8002a42:	0010      	movs	r0, r2
 8002a44:	4798      	blx	r3
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	20000104 	.word	0x20000104

08002a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d10c      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x2e>
		uart_printf("Interrumpo \r\n");
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 ff8c 	bl	8003988 <uart_printf>
		if(_IRQ_TMR_handler != 0x00)
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x2e>
			_IRQ_TMR_handler(htim);
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	0010      	movs	r0, r2
 8002a80:	4798      	blx	r3
	}
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	200001d8 	.word	0x200001d8
 8002a90:	08003c58 	.word	0x08003c58
 8002a94:	20000108 	.word	0x20000108

08002a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <input_condition_func_start_level>:
		{CHECK_USER_SEQUENCE,input_condition_func_user_sequence_right,START_LEVEL,output_func_update_level},
		{CHECK_USER_SEQUENCE,input_condition_func_user_sequence_wrong,WAIT_START,output_func_restore},
		{-1, NULL, -1, NULL }
};

static int input_condition_func_start_level(fsm_t* fsm){
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
	return (game_data->game_flags & SIMON_GAME_ON);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	7c1b      	ldrb	r3, [r3, #16]
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4013      	ands	r3, r2
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <input_condition_launch_level>:

static int input_condition_launch_level(fsm_t* fsm){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
	return game_data->level <= SIMON_MAX_LEVEL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2209      	movs	r2, #9
 8002ad2:	0fd8      	lsrs	r0, r3, #31
 8002ad4:	17d1      	asrs	r1, r2, #31
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	4148      	adcs	r0, r1
 8002ada:	0003      	movs	r3, r0
 8002adc:	b2db      	uxtb	r3, r3
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b004      	add	sp, #16
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <input_condition_game_win>:

static int input_condition_game_win(fsm_t* fsm){
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
	return game_data->level > SIMON_MAX_LEVEL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2201      	movs	r2, #1
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	dc01      	bgt.n	8002b00 <input_condition_game_win+0x1a>
 8002afc:	2300      	movs	r3, #0
 8002afe:	1c1a      	adds	r2, r3, #0
 8002b00:	b2d3      	uxtb	r3, r2
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <input_condition_check_sequence_len>:

static int input_condition_check_sequence_len(fsm_t* fsm){
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
	return game_data->user_sequence_position >= game_data->level;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	17d0      	asrs	r0, r2, #31
 8002b20:	0fd9      	lsrs	r1, r3, #31
 8002b22:	429a      	cmp	r2, r3
 8002b24:	4148      	adcs	r0, r1
 8002b26:	0003      	movs	r3, r0
 8002b28:	b2db      	uxtb	r3, r3
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <input_condition_func_user_sequence_right>:


static int input_condition_func_user_sequence_right(fsm_t* fsm){
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
	return (game_data->game_flags & SIMON_SECUENCE_RIGHT);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	7c1b      	ldrb	r3, [r3, #16]
 8002b42:	001a      	movs	r2, r3
 8002b44:	2308      	movs	r3, #8
 8002b46:	4013      	ands	r3, r2
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <input_condition_func_user_sequence_wrong>:

static int input_condition_func_user_sequence_wrong(fsm_t* fsm){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
	return !(game_data->game_flags & SIMON_SECUENCE_RIGHT);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	7c1b      	ldrb	r3, [r3, #16]
 8002b60:	001a      	movs	r2, r3
 8002b62:	2308      	movs	r3, #8
 8002b64:	4013      	ands	r3, r2
 8002b66:	425a      	negs	r2, r3
 8002b68:	4153      	adcs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <input_condition_check_timeout>:

static int input_condition_check_timeout(fsm_t* fsm){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]
	return (game_data->game_flags & SIMON_TIMEOUT);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	001a      	movs	r2, r3
 8002b86:	2310      	movs	r3, #16
 8002b88:	4013      	ands	r3, r2

}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <output_func_update_level>:


static void  output_func_update_level(fsm_t* fsm){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	uart_printf("START_LEVEL \n");
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <output_func_update_level+0x48>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fef2 	bl	8003988 <uart_printf>
	simon_t* game_data = (simon_t*)fsm;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
	game_data->level++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
	game_data->game_flags ^= SIMON_SECUENCE_RIGHT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	7c1b      	ldrb	r3, [r3, #16]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	4053      	eors	r3, r2
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	741a      	strb	r2, [r3, #16]
	simon_generate_random_sequence(game_data);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f890 	bl	8002ce8 <simon_generate_random_sequence>
	Display_number(game_data->level);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 fd4f 	bl	8003670 <Display_number>
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	08003c68 	.word	0x08003c68

08002be0 <output_func_launch_level>:

static void  output_func_launch_level(fsm_t* fsm){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	uart_printf("WAIT_USER_SEQUENCE! \n");
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <output_func_launch_level+0x38>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fecc 	bl	8003988 <uart_printf>
	simon_t* game_data = (simon_t*)fsm;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]
	simon_display_leds(game_data);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f89d 	bl	8002d36 <simon_display_leds>
	game_data->game_flags |= SIMON_LISTEN_TO_SECUENCE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	7c1b      	ldrb	r3, [r3, #16]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	741a      	strb	r2, [r3, #16]
	TIM1_launch();
 8002c0a:	f000 fd4b 	bl	80036a4 <TIM1_launch>
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	08003c78 	.word	0x08003c78

08002c1c <output_func_check_sequence>:

static void  output_func_check_sequence(fsm_t* fsm){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	uart_printf("WAIT_USER_SEQUENCE! \n");
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <output_func_check_sequence+0x3c>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 feae 	bl	8003988 <uart_printf>
	TIM1_stop();
 8002c2c:	f000 fd46 	bl	80036bc <TIM1_stop>
	simon_t* game_data = (simon_t*)fsm;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
	game_data->game_flags ^= SIMON_LISTEN_TO_SECUENCE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	7c1b      	ldrb	r3, [r3, #16]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4053      	eors	r3, r2
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	741a      	strb	r2, [r3, #16]
	game_data->user_sequence_position = 0;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c
	simon_check_user_sequence(game_data);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 f895 	bl	8002d7a <simon_check_user_sequence>
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	08003c78 	.word	0x08003c78

08002c5c <output_func_restore>:

static void  output_func_restore(fsm_t* fsm){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	uart_printf("WAIT_START! \n");
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <output_func_restore+0x2c>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 fe8e 	bl	8003988 <uart_printf>
	simon_t* game_data = (simon_t*)fsm;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
	game_data->level = 0;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
	game_data->game_flags = 0;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	741a      	strb	r2, [r3, #16]
	Display_show_e();
 8002c7c:	f000 fc6e 	bl	800355c <Display_show_e>
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08003c90 	.word	0x08003c90

08002c8c <output_func_win_secuence>:

static void  output_func_win_secuence(fsm_t* fsm){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	simon_t* game_data = (simon_t*)fsm;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
	game_data->level = 0;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
	game_data->game_flags = 0;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	741a      	strb	r2, [r3, #16]
	LED_win_effect();
 8002ca4:	f000 f9b4 	bl	8003010 <LED_win_effect>
	Display_show_a();
 8002ca8:	f000 fcb0 	bl	800360c <Display_show_a>
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <output_func_timeout>:

static void  output_func_timeout(fsm_t* fsm){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	TIM1_stop();
 8002cbc:	f000 fcfe 	bl	80036bc <TIM1_stop>
	uart_printf("WAIT_START! \n");
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <output_func_timeout+0x30>)
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 fe60 	bl	8003988 <uart_printf>
	simon_t* game_data = (simon_t*)fsm;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60fb      	str	r3, [r7, #12]
	game_data->level = 0;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
	game_data->game_flags = 0;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	741a      	strb	r2, [r3, #16]
	Display_show_e();
 8002cd8:	f000 fc40 	bl	800355c <Display_show_e>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08003c90 	.word	0x08003c90

08002ce8 <simon_generate_random_sequence>:


static void simon_generate_random_sequence(simon_t* game_data){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < game_data->level; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e016      	b.n	8002d24 <simon_generate_random_sequence+0x3c>
		game_data->led_sequence[i] = nrand48(RTC_get_tick())%3;
 8002cf6:	f000 f9d9 	bl	80030ac <RTC_get_tick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 ff29 	bl	8003b54 <nrand48>
 8002d02:	0003      	movs	r3, r0
 8002d04:	2103      	movs	r1, #3
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7fd fb76 	bl	80003f8 <__aeabi_idivmod>
 8002d0c:	000b      	movs	r3, r1
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3304      	adds	r3, #4
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	6019      	str	r1, [r3, #0]
	for(i = 0; i < game_data->level; i++)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dce3      	bgt.n	8002cf6 <simon_generate_random_sequence+0xe>
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <simon_display_leds>:

static void simon_display_leds(simon_t* game_data){
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < game_data->level; i++){
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e00f      	b.n	8002d64 <simon_display_leds+0x2e>
		LED_display(game_data->led_sequence[i],game_data->display_speed);
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	18d3      	adds	r3, r2, r3
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	0019      	movs	r1, r3
 8002d58:	0010      	movs	r0, r2
 8002d5a:	f000 f8cf 	bl	8002efc <LED_display>
	for(int i = 0; i < game_data->level; i++){
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	dcea      	bgt.n	8002d44 <simon_display_leds+0xe>
	}
	LED_toggle_effect();
 8002d6e:	f000 f901 	bl	8002f74 <LED_toggle_effect>
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <simon_check_user_sequence>:

static void simon_check_user_sequence(simon_t* game_data){
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < game_data->level;i++){
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e010      	b.n	8002daa <simon_check_user_sequence+0x30>
		if(game_data->user_sequence[i] != game_data->led_sequence[i]){
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	320e      	adds	r2, #14
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	58d2      	ldr	r2, [r2, r3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3304      	adds	r3, #4
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	18cb      	adds	r3, r1, r3
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10f      	bne.n	8002dc4 <simon_check_user_sequence+0x4a>
	for(i = 0; i < game_data->level;i++){
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dce9      	bgt.n	8002d88 <simon_check_user_sequence+0xe>
			return;
		}
	}
	game_data->game_flags |= SIMON_SECUENCE_RIGHT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7c1b      	ldrb	r3, [r3, #16]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	741a      	strb	r2, [r3, #16]
 8002dc2:	e000      	b.n	8002dc6 <simon_check_user_sequence+0x4c>
			return;
 8002dc4:	46c0      	nop			; (mov r8, r8)
}
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <simon_init>:


simon_t* simon_init(void* htim, long int random_seed){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
	static simon_t game_data[1];
	game_data->fsm.tt = simon_transition_table;
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <simon_init+0x3c>)
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <simon_init+0x40>)
 8002dda:	605a      	str	r2, [r3, #4]
	game_data->level = 0;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <simon_init+0x3c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
	game_data->display_speed = 2;
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <simon_init+0x3c>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	60da      	str	r2, [r3, #12]
	game_data->_IRQ_Handlers = simon_LL_init(htim,&game_data->game_flags,game_data->user_sequence,&game_data->user_sequence_position);
 8002de8:	4909      	ldr	r1, [pc, #36]	; (8002e10 <simon_init+0x44>)
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <simon_init+0x48>)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <simon_init+0x4c>)
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f814 	bl	8002e1c <simon_LL_init>
 8002df4:	0002      	movs	r2, r0
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <simon_init+0x3c>)
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
	Display_show_p();
 8002dfa:	f000 fbdb 	bl	80035b4 <Display_show_p>
	return game_data;
 8002dfe:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <simon_init+0x3c>)
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000010c 	.word	0x2000010c
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	2000011c 	.word	0x2000011c
 8002e14:	20000144 	.word	0x20000144
 8002e18:	20000168 	.word	0x20000168

08002e1c <simon_LL_init>:
	IRQ_fcn_t irq_fcns[2];
}simonLL_t;

static simonLL_t simonLL[1];

IRQ_fcn_t* simon_LL_init(void* _htim,uint8_t* _flags, int* _user_sequence, int* _user_sequence_position){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
	simonLL->flags = _flags;
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	601a      	str	r2, [r3, #0]
	simonLL->user_sequence = _user_sequence;
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
	simonLL->user_sequence_position = _user_sequence_position;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]
	//Inicializamos las listas con el orden de los GPIO que queremos
	simonLL->GPIO_bank_list[0] = GPIOB;
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <simon_LL_init+0xa8>)
 8002e40:	60da      	str	r2, [r3, #12]
	simonLL->GPIO_pin_list[0] = GPIO_PIN_9;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	839a      	strh	r2, [r3, #28]
	simonLL->GPIO_bank_list[1] = GPIOB;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <simon_LL_init+0xa8>)
 8002e4e:	611a      	str	r2, [r3, #16]
	simonLL->GPIO_pin_list[1] = GPIO_PIN_8;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	0052      	lsls	r2, r2, #1
 8002e56:	83da      	strh	r2, [r3, #30]
	simonLL->GPIO_bank_list[2] = GPIOA;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e5a:	2290      	movs	r2, #144	; 0x90
 8002e5c:	05d2      	lsls	r2, r2, #23
 8002e5e:	615a      	str	r2, [r3, #20]
	simonLL->GPIO_pin_list[2] = GPIO_PIN_5;
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e62:	2220      	movs	r2, #32
 8002e64:	841a      	strh	r2, [r3, #32]
	simonLL->show_fcns[0] = Display_show_zero;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <simon_LL_init+0xac>)
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
	simonLL->show_fcns[1] = Display_show_one;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <simon_LL_init+0xb0>)
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
	simonLL->show_fcns[2] = Display_show_two;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <simon_LL_init+0xb4>)
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
	simonLL->show_fcns[3] = Display_show_three;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <simon_LL_init+0xb8>)
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
	simonLL->show_fcns[4] = Display_show_four;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <simon_LL_init+0xbc>)
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34
	simonLL->show_fcns[5] = Display_show_five;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <simon_LL_init+0xc0>)
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
	simonLL->show_fcns[6] = Display_show_six;
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <simon_LL_init+0xc4>)
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	simonLL->show_fcns[7] = Display_show_seven;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e92:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <simon_LL_init+0xc8>)
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
	simonLL->show_fcns[8] = Display_show_eigth;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e98:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <simon_LL_init+0xcc>)
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
	simonLL->show_fcns[9] = Display_show_nine;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <simon_LL_init+0xa4>)
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <simon_LL_init+0xd0>)
 8002ea0:	649a      	str	r2, [r3, #72]	; 0x48
	simonLL->htim = (TIM_HandleTypeDef*)_htim;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <simon_LL_init+0xa4>)
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	619a      	str	r2, [r3, #24]
	simonLL->show_fcns[0] = BTN_interrupt_handler;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <simon_LL_init+0xa4>)
 8002eaa:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <simon_LL_init+0xd4>)
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
	simonLL->show_fcns[1] = TIM1_interrupt_handler;
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <simon_LL_init+0xa4>)
 8002eb0:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <simon_LL_init+0xd8>)
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
	return simonLL->show_fcns;
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <simon_LL_init+0xdc>)
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	20000170 	.word	0x20000170
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	080031f9 	.word	0x080031f9
 8002ecc:	0800325d 	.word	0x0800325d
 8002ed0:	08003289 	.word	0x08003289
 8002ed4:	080032e1 	.word	0x080032e1
 8002ed8:	08003339 	.word	0x08003339
 8002edc:	08003381 	.word	0x08003381
 8002ee0:	080033d9 	.word	0x080033d9
 8002ee4:	0800344d 	.word	0x0800344d
 8002ee8:	08003489 	.word	0x08003489
 8002eec:	080034f9 	.word	0x080034f9
 8002ef0:	080030c9 	.word	0x080030c9
 8002ef4:	080036d5 	.word	0x080036d5
 8002ef8:	20000194 	.word	0x20000194

08002efc <LED_display>:

void LED_display(int led_number,int display_speed){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(simonLL->GPIO_bank_list[led_number],simonLL->GPIO_pin_list[led_number],GPIO_PIN_SET);
 8002f06:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <LED_display+0x74>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	18d3      	adds	r3, r2, r3
 8002f10:	3304      	adds	r3, #4
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <LED_display+0x74>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	3304      	adds	r3, #4
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	0019      	movs	r1, r3
 8002f26:	f7fd fd29 	bl	800097c <HAL_GPIO_WritePin>
	HAL_Delay(2000/display_speed);
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	23fa      	movs	r3, #250	; 0xfa
 8002f2e:	00d8      	lsls	r0, r3, #3
 8002f30:	f7fd f97c 	bl	800022c <__divsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd faaa 	bl	8000490 <HAL_Delay>
	HAL_GPIO_WritePin(simonLL->GPIO_bank_list[led_number],simonLL->GPIO_pin_list[led_number],GPIO_PIN_RESET);
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <LED_display+0x74>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3302      	adds	r3, #2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	3304      	adds	r3, #4
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <LED_display+0x74>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	3304      	adds	r3, #4
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	f7fd fd0e 	bl	800097c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f60:	2064      	movs	r0, #100	; 0x64
 8002f62:	f7fd fa95 	bl	8000490 <HAL_Delay>
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000170 	.word	0x20000170

08002f74 <LED_toggle_effect>:

void LED_toggle_effect(){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
	int i,j;
	for(i = 0; i < 2; i++){
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	e03e      	b.n	8002ffe <LED_toggle_effect+0x8a>
		HAL_Delay(200);
 8002f80:	20c8      	movs	r0, #200	; 0xc8
 8002f82:	f7fd fa85 	bl	8000490 <HAL_Delay>
		for(j = 0; j < N_LEDS; j++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	e014      	b.n	8002fb6 <LED_toggle_effect+0x42>
			HAL_GPIO_WritePin(simonLL->GPIO_bank_list[j],simonLL->GPIO_pin_list[j],GPIO_PIN_SET);
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <LED_toggle_effect+0x98>)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	3302      	adds	r3, #2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	3304      	adds	r3, #4
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	; (800300c <LED_toggle_effect+0x98>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	18d3      	adds	r3, r2, r3
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	0019      	movs	r1, r3
 8002fac:	f7fd fce6 	bl	800097c <HAL_GPIO_WritePin>
		for(j = 0; j < N_LEDS; j++)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	dde7      	ble.n	8002f8c <LED_toggle_effect+0x18>
		HAL_Delay(200);
 8002fbc:	20c8      	movs	r0, #200	; 0xc8
 8002fbe:	f7fd fa67 	bl	8000490 <HAL_Delay>
		for(j = 0; j < N_LEDS; j++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	e014      	b.n	8002ff2 <LED_toggle_effect+0x7e>
			HAL_GPIO_WritePin(simonLL->GPIO_bank_list[j],simonLL->GPIO_pin_list[j],GPIO_PIN_RESET);
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <LED_toggle_effect+0x98>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	; (800300c <LED_toggle_effect+0x98>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	18d3      	adds	r3, r2, r3
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	f7fd fcc8 	bl	800097c <HAL_GPIO_WritePin>
		for(j = 0; j < N_LEDS; j++)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	dde7      	ble.n	8002fc8 <LED_toggle_effect+0x54>
	for(i = 0; i < 2; i++){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	ddbd      	ble.n	8002f80 <LED_toggle_effect+0xc>
	}
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000170 	.word	0x20000170

08003010 <LED_win_effect>:

void LED_win_effect(){
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
	int i,j;
	for(i = 0; i < 2; i++){
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	e03e      	b.n	800309a <LED_win_effect+0x8a>
		for(j = 0; j < N_LEDS; j++){
 800301c:	2300      	movs	r3, #0
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	e017      	b.n	8003052 <LED_win_effect+0x42>
			HAL_GPIO_WritePin(simonLL->GPIO_bank_list[j],simonLL->GPIO_pin_list[j],GPIO_PIN_SET);
 8003022:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <LED_win_effect+0x98>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	3302      	adds	r3, #2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	3304      	adds	r3, #4
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <LED_win_effect+0x98>)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	3304      	adds	r3, #4
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	0019      	movs	r1, r3
 8003042:	f7fd fc9b 	bl	800097c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8003046:	20c8      	movs	r0, #200	; 0xc8
 8003048:	f7fd fa22 	bl	8000490 <HAL_Delay>
		for(j = 0; j < N_LEDS; j++){
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	dde4      	ble.n	8003022 <LED_win_effect+0x12>
		}
		for(j = 2; j >= 0; j--){
 8003058:	2302      	movs	r3, #2
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	e017      	b.n	800308e <LED_win_effect+0x7e>
			HAL_GPIO_WritePin(simonLL->GPIO_bank_list[j],simonLL->GPIO_pin_list[j],GPIO_PIN_RESET);
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <LED_win_effect+0x98>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	3302      	adds	r3, #2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	3304      	adds	r3, #4
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <LED_win_effect+0x98>)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	3304      	adds	r3, #4
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	0019      	movs	r1, r3
 800307e:	f7fd fc7d 	bl	800097c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8003082:	20c8      	movs	r0, #200	; 0xc8
 8003084:	f7fd fa04 	bl	8000490 <HAL_Delay>
		for(j = 2; j >= 0; j--){
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3b01      	subs	r3, #1
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	dae4      	bge.n	800305e <LED_win_effect+0x4e>
	for(i = 0; i < 2; i++){
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b01      	cmp	r3, #1
 800309e:	ddbd      	ble.n	800301c <LED_win_effect+0xc>
		}
	}
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000170 	.word	0x20000170

080030ac <RTC_get_tick>:

unsigned short int* RTC_get_tick(){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	static unsigned short int tick;
	tick = HAL_GetTick();
 80030b0:	f7fd f9e4 	bl	800047c <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b02      	ldr	r3, [pc, #8]	; (80030c4 <RTC_get_tick+0x18>)
 80030ba:	801a      	strh	r2, [r3, #0]
	return &tick;
 80030bc:	4b01      	ldr	r3, [pc, #4]	; (80030c4 <RTC_get_tick+0x18>)
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200001c4 	.word	0x200001c4

080030c8 <BTN_interrupt_handler>:

static void BTN_interrupt_handler(void* _GPIO_PIN){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	uint16_t GPIO_PIN = *((uint16_t*)_GPIO_PIN);
 80030d0:	230e      	movs	r3, #14
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	801a      	strh	r2, [r3, #0]
	if(!((*simonLL->flags) & SIMON_GAME_ON)){
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <BTN_interrupt_handler+0xb0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	001a      	movs	r2, r3
 80030e2:	2301      	movs	r3, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d109      	bne.n	80030fc <BTN_interrupt_handler+0x34>
		(*simonLL->flags) |= SIMON_GAME_ON;
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <BTN_interrupt_handler+0xb0>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <BTN_interrupt_handler+0xb0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2101      	movs	r1, #1
 80030f4:	430b      	orrs	r3, r1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	7013      	strb	r3, [r2, #0]
		return;
 80030fa:	e03a      	b.n	8003172 <BTN_interrupt_handler+0xaa>
	}
	if((*simonLL->flags) & SIMON_LISTEN_TO_SECUENCE && (*simonLL->user_sequence_position) < SIMON_MAX_LEVEL){
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <BTN_interrupt_handler+0xb0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	001a      	movs	r2, r3
 8003104:	2304      	movs	r3, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d033      	beq.n	8003172 <BTN_interrupt_handler+0xaa>
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <BTN_interrupt_handler+0xb0>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b08      	cmp	r3, #8
 8003112:	dc2e      	bgt.n	8003172 <BTN_interrupt_handler+0xaa>
		switch(GPIO_PIN){
 8003114:	230e      	movs	r3, #14
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d004      	beq.n	8003128 <BTN_interrupt_handler+0x60>
 800311e:	2b20      	cmp	r3, #32
 8003120:	d00c      	beq.n	800313c <BTN_interrupt_handler+0x74>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d014      	beq.n	8003150 <BTN_interrupt_handler+0x88>
			break;
		case GPIO_PIN_3:
			simonLL->user_sequence[*(simonLL->user_sequence_position)] = SIMON_BTN_3;
			break;
		default:
			return;
 8003126:	e024      	b.n	8003172 <BTN_interrupt_handler+0xaa>
			simonLL->user_sequence[*(simonLL->user_sequence_position)] = SIMON_BTN_1;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <BTN_interrupt_handler+0xb0>)
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <BTN_interrupt_handler+0xb0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
			break;
 800313a:	e013      	b.n	8003164 <BTN_interrupt_handler+0x9c>
			simonLL->user_sequence[*(simonLL->user_sequence_position)] = SIMON_BTN_2;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <BTN_interrupt_handler+0xb0>)
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <BTN_interrupt_handler+0xb0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
			break;
 800314e:	e009      	b.n	8003164 <BTN_interrupt_handler+0x9c>
			simonLL->user_sequence[*(simonLL->user_sequence_position)] = SIMON_BTN_3;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <BTN_interrupt_handler+0xb0>)
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <BTN_interrupt_handler+0xb0>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	18d3      	adds	r3, r2, r3
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
			break;
 8003162:	46c0      	nop			; (mov r8, r8)
		}
		*(simonLL->user_sequence_position) += 1;
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <BTN_interrupt_handler+0xb0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <BTN_interrupt_handler+0xb0>)
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	3201      	adds	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
	}
}
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000170 	.word	0x20000170

0800317c <Display_clear>:
 * 7 Segment Display
 * */



static void Display_clear(){
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //Segmento 1
 8003180:	2390      	movs	r3, #144	; 0x90
 8003182:	05db      	lsls	r3, r3, #23
 8003184:	2200      	movs	r2, #0
 8003186:	2140      	movs	r1, #64	; 0x40
 8003188:	0018      	movs	r0, r3
 800318a:	f7fd fbf7 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //Segmento 2
 800318e:	2390      	movs	r3, #144	; 0x90
 8003190:	05db      	lsls	r3, r3, #23
 8003192:	2200      	movs	r2, #0
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	0018      	movs	r0, r3
 8003198:	f7fd fbf0 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //Segmento 3
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <Display_clear+0x74>)
 800319e:	2200      	movs	r2, #0
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd fbea 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Segmento Punto
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <Display_clear+0x78>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7fd fbe4 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //Segmento 4
 80031b4:	2390      	movs	r3, #144	; 0x90
 80031b6:	05db      	lsls	r3, r3, #23
 80031b8:	2200      	movs	r2, #0
 80031ba:	2101      	movs	r1, #1
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd fbdd 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //Segmento 5
 80031c2:	2390      	movs	r3, #144	; 0x90
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	2200      	movs	r2, #0
 80031c8:	2102      	movs	r1, #2
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fd fbd6 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Segmento 6
 80031d0:	2390      	movs	r3, #144	; 0x90
 80031d2:	05db      	lsls	r3, r3, #23
 80031d4:	2200      	movs	r2, #0
 80031d6:	2110      	movs	r1, #16
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd fbcf 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Segmento 7
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <Display_clear+0x74>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	2101      	movs	r1, #1
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd fbc9 	bl	800097c <HAL_GPIO_WritePin>
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	48000400 	.word	0x48000400
 80031f4:	48000800 	.word	0x48000800

080031f8 <Display_show_zero>:

static void Display_show_zero(){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	Display_clear();
 80031fc:	f7ff ffbe 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003200:	2390      	movs	r3, #144	; 0x90
 8003202:	05db      	lsls	r3, r3, #23
 8003204:	2201      	movs	r2, #1
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	0018      	movs	r0, r3
 800320a:	f7fd fbb7 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 800320e:	2390      	movs	r3, #144	; 0x90
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	2201      	movs	r2, #1
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0018      	movs	r0, r3
 8003218:	f7fd fbb0 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <Display_show_zero+0x60>)
 800321e:	2201      	movs	r2, #1
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	0018      	movs	r0, r3
 8003224:	f7fd fbaa 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 8003228:	2390      	movs	r3, #144	; 0x90
 800322a:	05db      	lsls	r3, r3, #23
 800322c:	2201      	movs	r2, #1
 800322e:	2101      	movs	r1, #1
 8003230:	0018      	movs	r0, r3
 8003232:	f7fd fba3 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 8003236:	2390      	movs	r3, #144	; 0x90
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	2201      	movs	r2, #1
 800323c:	2110      	movs	r1, #16
 800323e:	0018      	movs	r0, r3
 8003240:	f7fd fb9c 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <Display_show_zero+0x60>)
 8003246:	2201      	movs	r2, #1
 8003248:	2101      	movs	r1, #1
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd fb96 	bl	800097c <HAL_GPIO_WritePin>
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	48000400 	.word	0x48000400

0800325c <Display_show_one>:

static void Display_show_one(){
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	Display_clear();
 8003260:	f7ff ff8c 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 8003264:	2390      	movs	r3, #144	; 0x90
 8003266:	05db      	lsls	r3, r3, #23
 8003268:	2201      	movs	r2, #1
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd fb85 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <Display_show_one+0x28>)
 8003274:	2201      	movs	r2, #1
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	0018      	movs	r0, r3
 800327a:	f7fd fb7f 	bl	800097c <HAL_GPIO_WritePin>
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	48000400 	.word	0x48000400

08003288 <Display_show_two>:

static void Display_show_two(){
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	Display_clear();
 800328c:	f7ff ff76 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003290:	2390      	movs	r3, #144	; 0x90
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	2201      	movs	r2, #1
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	0018      	movs	r0, r3
 800329a:	f7fd fb6f 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 800329e:	2390      	movs	r3, #144	; 0x90
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	2201      	movs	r2, #1
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd fb68 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 80032ac:	2390      	movs	r3, #144	; 0x90
 80032ae:	05db      	lsls	r3, r3, #23
 80032b0:	2201      	movs	r2, #1
 80032b2:	2101      	movs	r1, #1
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fd fb61 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 80032ba:	2390      	movs	r3, #144	; 0x90
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	2201      	movs	r2, #1
 80032c0:	2102      	movs	r1, #2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fd fb5a 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <Display_show_two+0x54>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	2101      	movs	r1, #1
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fd fb54 	bl	800097c <HAL_GPIO_WritePin>
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	48000400 	.word	0x48000400

080032e0 <Display_show_three>:

static void Display_show_three(){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	Display_clear();
 80032e4:	f7ff ff4a 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 80032e8:	2390      	movs	r3, #144	; 0x90
 80032ea:	05db      	lsls	r3, r3, #23
 80032ec:	2201      	movs	r2, #1
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fd fb43 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 80032f6:	2390      	movs	r3, #144	; 0x90
 80032f8:	05db      	lsls	r3, r3, #23
 80032fa:	2201      	movs	r2, #1
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	0018      	movs	r0, r3
 8003300:	f7fd fb3c 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <Display_show_three+0x54>)
 8003306:	2201      	movs	r2, #1
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	0018      	movs	r0, r3
 800330c:	f7fd fb36 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 8003310:	2390      	movs	r3, #144	; 0x90
 8003312:	05db      	lsls	r3, r3, #23
 8003314:	2201      	movs	r2, #1
 8003316:	2101      	movs	r1, #1
 8003318:	0018      	movs	r0, r3
 800331a:	f7fd fb2f 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 800331e:	2390      	movs	r3, #144	; 0x90
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	2201      	movs	r2, #1
 8003324:	2102      	movs	r1, #2
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd fb28 	bl	800097c <HAL_GPIO_WritePin>
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	48000400 	.word	0x48000400

08003338 <Display_show_four>:

static void Display_show_four(){
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	Display_clear();
 800333c:	f7ff ff1e 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 8003340:	2390      	movs	r3, #144	; 0x90
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	2201      	movs	r2, #1
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	0018      	movs	r0, r3
 800334a:	f7fd fb17 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <Display_show_four+0x44>)
 8003350:	2201      	movs	r2, #1
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	0018      	movs	r0, r3
 8003356:	f7fd fb11 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 800335a:	2390      	movs	r3, #144	; 0x90
 800335c:	05db      	lsls	r3, r3, #23
 800335e:	2201      	movs	r2, #1
 8003360:	2102      	movs	r1, #2
 8003362:	0018      	movs	r0, r3
 8003364:	f7fd fb0a 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 8003368:	2390      	movs	r3, #144	; 0x90
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	2201      	movs	r2, #1
 800336e:	2110      	movs	r1, #16
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fb03 	bl	800097c <HAL_GPIO_WritePin>
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	48000400 	.word	0x48000400

08003380 <Display_show_five>:

static void Display_show_five(){
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	Display_clear();
 8003384:	f7ff fefa 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003388:	2390      	movs	r3, #144	; 0x90
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	2201      	movs	r2, #1
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	0018      	movs	r0, r3
 8003392:	f7fd faf3 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <Display_show_five+0x54>)
 8003398:	2201      	movs	r2, #1
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	0018      	movs	r0, r3
 800339e:	f7fd faed 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 80033a2:	2390      	movs	r3, #144	; 0x90
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	2201      	movs	r2, #1
 80033a8:	2101      	movs	r1, #1
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7fd fae6 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 80033b0:	2390      	movs	r3, #144	; 0x90
 80033b2:	05db      	lsls	r3, r3, #23
 80033b4:	2201      	movs	r2, #1
 80033b6:	2102      	movs	r1, #2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd fadf 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 80033be:	2390      	movs	r3, #144	; 0x90
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	2201      	movs	r2, #1
 80033c4:	2110      	movs	r1, #16
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fd fad8 	bl	800097c <HAL_GPIO_WritePin>
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	48000400 	.word	0x48000400

080033d8 <Display_show_six>:

static void Display_show_six(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	Display_clear();
 80033dc:	f7ff fece 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 80033e0:	2390      	movs	r3, #144	; 0x90
 80033e2:	05db      	lsls	r3, r3, #23
 80033e4:	2201      	movs	r2, #1
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd fac7 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <Display_show_six+0x6c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	2140      	movs	r1, #64	; 0x40
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fac1 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //Segmento Punto
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <Display_show_six+0x70>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	0018      	movs	r0, r3
 8003402:	f7fd fabb 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 8003406:	2390      	movs	r3, #144	; 0x90
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	2201      	movs	r2, #1
 800340c:	2101      	movs	r1, #1
 800340e:	0018      	movs	r0, r3
 8003410:	f7fd fab4 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 8003414:	2390      	movs	r3, #144	; 0x90
 8003416:	05db      	lsls	r3, r3, #23
 8003418:	2201      	movs	r2, #1
 800341a:	2102      	movs	r1, #2
 800341c:	0018      	movs	r0, r3
 800341e:	f7fd faad 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 8003422:	2390      	movs	r3, #144	; 0x90
 8003424:	05db      	lsls	r3, r3, #23
 8003426:	2201      	movs	r2, #1
 8003428:	2110      	movs	r1, #16
 800342a:	0018      	movs	r0, r3
 800342c:	f7fd faa6 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <Display_show_six+0x6c>)
 8003432:	2201      	movs	r2, #1
 8003434:	2101      	movs	r1, #1
 8003436:	0018      	movs	r0, r3
 8003438:	f7fd faa0 	bl	800097c <HAL_GPIO_WritePin>
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	48000400 	.word	0x48000400
 8003448:	48000800 	.word	0x48000800

0800344c <Display_show_seven>:

static void Display_show_seven(){
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	Display_clear();
 8003450:	f7ff fe94 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003454:	2390      	movs	r3, #144	; 0x90
 8003456:	05db      	lsls	r3, r3, #23
 8003458:	2201      	movs	r2, #1
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	0018      	movs	r0, r3
 800345e:	f7fd fa8d 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 8003462:	2390      	movs	r3, #144	; 0x90
 8003464:	05db      	lsls	r3, r3, #23
 8003466:	2201      	movs	r2, #1
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0018      	movs	r0, r3
 800346c:	f7fd fa86 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <Display_show_seven+0x38>)
 8003472:	2201      	movs	r2, #1
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	0018      	movs	r0, r3
 8003478:	f7fd fa80 	bl	800097c <HAL_GPIO_WritePin>
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	48000400 	.word	0x48000400

08003488 <Display_show_eigth>:

static void Display_show_eigth(){
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	Display_clear();
 800348c:	f7ff fe76 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003490:	2390      	movs	r3, #144	; 0x90
 8003492:	05db      	lsls	r3, r3, #23
 8003494:	2201      	movs	r2, #1
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fa6f 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 800349e:	2390      	movs	r3, #144	; 0x90
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	2201      	movs	r2, #1
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7fd fa68 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <Display_show_eigth+0x6c>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	2140      	movs	r1, #64	; 0x40
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7fd fa62 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 80034b8:	2390      	movs	r3, #144	; 0x90
 80034ba:	05db      	lsls	r3, r3, #23
 80034bc:	2201      	movs	r2, #1
 80034be:	2101      	movs	r1, #1
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7fd fa5b 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 80034c6:	2390      	movs	r3, #144	; 0x90
 80034c8:	05db      	lsls	r3, r3, #23
 80034ca:	2201      	movs	r2, #1
 80034cc:	2102      	movs	r1, #2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fd fa54 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 80034d4:	2390      	movs	r3, #144	; 0x90
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	2201      	movs	r2, #1
 80034da:	2110      	movs	r1, #16
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fd fa4d 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <Display_show_eigth+0x6c>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	2101      	movs	r1, #1
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fd fa47 	bl	800097c <HAL_GPIO_WritePin>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	48000400 	.word	0x48000400

080034f8 <Display_show_nine>:

static void Display_show_nine(){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	Display_clear();
 80034fc:	f7ff fe3e 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003500:	2390      	movs	r3, #144	; 0x90
 8003502:	05db      	lsls	r3, r3, #23
 8003504:	2201      	movs	r2, #1
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	0018      	movs	r0, r3
 800350a:	f7fd fa37 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 800350e:	2390      	movs	r3, #144	; 0x90
 8003510:	05db      	lsls	r3, r3, #23
 8003512:	2201      	movs	r2, #1
 8003514:	2180      	movs	r1, #128	; 0x80
 8003516:	0018      	movs	r0, r3
 8003518:	f7fd fa30 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <Display_show_nine+0x60>)
 800351e:	2201      	movs	r2, #1
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	0018      	movs	r0, r3
 8003524:	f7fd fa2a 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 8003528:	2390      	movs	r3, #144	; 0x90
 800352a:	05db      	lsls	r3, r3, #23
 800352c:	2201      	movs	r2, #1
 800352e:	2101      	movs	r1, #1
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fa23 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 8003536:	2390      	movs	r3, #144	; 0x90
 8003538:	05db      	lsls	r3, r3, #23
 800353a:	2201      	movs	r2, #1
 800353c:	2102      	movs	r1, #2
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd fa1c 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 8003544:	2390      	movs	r3, #144	; 0x90
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	2201      	movs	r2, #1
 800354a:	2110      	movs	r1, #16
 800354c:	0018      	movs	r0, r3
 800354e:	f7fd fa15 	bl	800097c <HAL_GPIO_WritePin>
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	48000400 	.word	0x48000400

0800355c <Display_show_e>:

void Display_show_e(){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	Display_clear();
 8003560:	f7ff fe0c 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003564:	2390      	movs	r3, #144	; 0x90
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	2201      	movs	r2, #1
 800356a:	2140      	movs	r1, #64	; 0x40
 800356c:	0018      	movs	r0, r3
 800356e:	f7fd fa05 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 4
 8003572:	2390      	movs	r3, #144	; 0x90
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	2201      	movs	r2, #1
 8003578:	2101      	movs	r1, #1
 800357a:	0018      	movs	r0, r3
 800357c:	f7fd f9fe 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 8003580:	2390      	movs	r3, #144	; 0x90
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	2201      	movs	r2, #1
 8003586:	2102      	movs	r1, #2
 8003588:	0018      	movs	r0, r3
 800358a:	f7fd f9f7 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 800358e:	2390      	movs	r3, #144	; 0x90
 8003590:	05db      	lsls	r3, r3, #23
 8003592:	2201      	movs	r2, #1
 8003594:	2110      	movs	r1, #16
 8003596:	0018      	movs	r0, r3
 8003598:	f7fd f9f0 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <Display_show_e+0x54>)
 800359e:	2201      	movs	r2, #1
 80035a0:	2101      	movs	r1, #1
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fd f9ea 	bl	800097c <HAL_GPIO_WritePin>
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	48000400 	.word	0x48000400

080035b4 <Display_show_p>:

void Display_show_p(){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	Display_clear();
 80035b8:	f7ff fde0 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 80035bc:	2390      	movs	r3, #144	; 0x90
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	2201      	movs	r2, #1
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd f9d9 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 80035ca:	2390      	movs	r3, #144	; 0x90
 80035cc:	05db      	lsls	r3, r3, #23
 80035ce:	2201      	movs	r2, #1
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fd f9d2 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 80035d8:	2390      	movs	r3, #144	; 0x90
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	2201      	movs	r2, #1
 80035de:	2102      	movs	r1, #2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fd f9cb 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 80035e6:	2390      	movs	r3, #144	; 0x90
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	2201      	movs	r2, #1
 80035ec:	2110      	movs	r1, #16
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd f9c4 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <Display_show_p+0x54>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	2101      	movs	r1, #1
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fd f9be 	bl	800097c <HAL_GPIO_WritePin>
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	48000400 	.word	0x48000400

0800360c <Display_show_a>:

void Display_show_a(){
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	Display_clear();
 8003610:	f7ff fdb4 	bl	800317c <Display_clear>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 1
 8003614:	2390      	movs	r3, #144	; 0x90
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	2201      	movs	r2, #1
 800361a:	2140      	movs	r1, #64	; 0x40
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd f9ad 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Segmento 2
 8003622:	2390      	movs	r3, #144	; 0x90
 8003624:	05db      	lsls	r3, r3, #23
 8003626:	2201      	movs	r2, #1
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	0018      	movs	r0, r3
 800362c:	f7fd f9a6 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //Segmento 3
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <Display_show_a+0x60>)
 8003632:	2201      	movs	r2, #1
 8003634:	2140      	movs	r1, #64	; 0x40
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd f9a0 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //Segmento 5
 800363c:	2390      	movs	r3, #144	; 0x90
 800363e:	05db      	lsls	r3, r3, #23
 8003640:	2201      	movs	r2, #1
 8003642:	2102      	movs	r1, #2
 8003644:	0018      	movs	r0, r3
 8003646:	f7fd f999 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Segmento 6
 800364a:	2390      	movs	r3, #144	; 0x90
 800364c:	05db      	lsls	r3, r3, #23
 800364e:	2201      	movs	r2, #1
 8003650:	2110      	movs	r1, #16
 8003652:	0018      	movs	r0, r3
 8003654:	f7fd f992 	bl	800097c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Segmento 7
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <Display_show_a+0x60>)
 800365a:	2201      	movs	r2, #1
 800365c:	2101      	movs	r1, #1
 800365e:	0018      	movs	r0, r3
 8003660:	f7fd f98c 	bl	800097c <HAL_GPIO_WritePin>
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	48000400 	.word	0x48000400

08003670 <Display_number>:

void Display_number(int number){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	if(number > 9 || number < 0){
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b09      	cmp	r3, #9
 800367c:	dc0b      	bgt.n	8003696 <Display_number+0x26>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db08      	blt.n	8003696 <Display_number+0x26>
		return; //TODO: Error Handling
	}
	simonLL->show_fcns[number]();
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <Display_number+0x30>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3308      	adds	r3, #8
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	3304      	adds	r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4798      	blx	r3
 8003694:	e000      	b.n	8003698 <Display_number+0x28>
		return; //TODO: Error Handling
 8003696:	46c0      	nop			; (mov r8, r8)
}
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	20000170 	.word	0x20000170

080036a4 <TIM1_launch>:
	Display_clear();
}

//Timer Functions

void TIM1_launch(){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(simonLL->htim);
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <TIM1_launch+0x14>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7fd ffcd 	bl	800164c <HAL_TIM_Base_Start_IT>
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000170 	.word	0x20000170

080036bc <TIM1_stop>:

void TIM1_stop(){
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(simonLL->htim);
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <TIM1_stop+0x14>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7fd ffdb 	bl	8001680 <HAL_TIM_Base_Stop_IT>
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000170 	.word	0x20000170

080036d4 <TIM1_interrupt_handler>:

static void TIM1_interrupt_handler(void* htim){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	(*simonLL->flags) |= SIMON_TIMEOUT;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <TIM1_interrupt_handler+0x24>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <TIM1_interrupt_handler+0x24>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2110      	movs	r1, #16
 80036e8:	430b      	orrs	r3, r1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	7013      	strb	r3, [r2, #0]
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000170 	.word	0x20000170

080036fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <HAL_MspInit+0x44>)
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <HAL_MspInit+0x44>)
 8003706:	6992      	ldr	r2, [r2, #24]
 8003708:	2101      	movs	r1, #1
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_MspInit+0x44>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_MspInit+0x44>)
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <HAL_MspInit+0x44>)
 800371e:	69d2      	ldr	r2, [r2, #28]
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	0549      	lsls	r1, r1, #21
 8003724:	430a      	orrs	r2, r1
 8003726:	61da      	str	r2, [r3, #28]
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_MspInit+0x44>)
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	055b      	lsls	r3, r3, #21
 8003730:	4013      	ands	r3, r2
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b002      	add	sp, #8
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_TIM_Base_MspInit+0x48>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d115      	bne.n	8003782 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_TIM_Base_MspInit+0x4c>)
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <HAL_TIM_Base_MspInit+0x4c>)
 800375a:	6992      	ldr	r2, [r2, #24]
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0109      	lsls	r1, r1, #4
 8003760:	430a      	orrs	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_TIM_Base_MspInit+0x4c>)
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	200d      	movs	r0, #13
 8003778:	f7fc ff50 	bl	800061c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800377c:	200d      	movs	r0, #13
 800377e:	f7fc ff63 	bl	8000648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b004      	add	sp, #16
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	2314      	movs	r3, #20
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	0018      	movs	r0, r3
 80037a2:	2314      	movs	r3, #20
 80037a4:	001a      	movs	r2, r3
 80037a6:	2100      	movs	r1, #0
 80037a8:	f000 f964 	bl	8003a74 <memset>
  if(huart->Instance==USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_UART_MspInit+0x9c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d137      	bne.n	8003826 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037b6:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037ba:	69d2      	ldr	r2, [r2, #28]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0289      	lsls	r1, r1, #10
 80037c0:	430a      	orrs	r2, r1
 80037c2:	61da      	str	r2, [r3, #28]
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	029b      	lsls	r3, r3, #10
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037d6:	6952      	ldr	r2, [r2, #20]
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	0289      	lsls	r1, r1, #10
 80037dc:	430a      	orrs	r2, r1
 80037de:	615a      	str	r2, [r3, #20]
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <HAL_UART_MspInit+0xa0>)
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037ee:	2314      	movs	r3, #20
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2314      	movs	r3, #20
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2202      	movs	r2, #2
 80037fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2314      	movs	r3, #20
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003806:	2314      	movs	r3, #20
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2203      	movs	r2, #3
 800380c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800380e:	2314      	movs	r3, #20
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	2314      	movs	r3, #20
 8003818:	18fa      	adds	r2, r7, r3
 800381a:	2390      	movs	r3, #144	; 0x90
 800381c:	05db      	lsls	r3, r3, #23
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f7fc ff2f 	bl	8000684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b00a      	add	sp, #40	; 0x28
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40004400 	.word	0x40004400
 8003834:	40021000 	.word	0x40021000

08003838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <HardFault_Handler+0x4>

08003848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003860:	f7fc fe00 	bl	8000464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800386e:	2008      	movs	r0, #8
 8003870:	f7fd f8a2 	bl	80009b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800387e:	2010      	movs	r0, #16
 8003880:	f7fd f89a 	bl	80009b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003884:	2020      	movs	r0, #32
 8003886:	f7fd f897 	bl	80009b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003896:	0018      	movs	r0, r3
 8003898:	f7fd ff1c 	bl	80016d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	200001d8 	.word	0x200001d8

080038a8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <_sbrk+0x50>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <_sbrk+0x16>
		heap_end = &end;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <_sbrk+0x50>)
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <_sbrk+0x54>)
 80038bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <_sbrk+0x50>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <_sbrk+0x50>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	18d3      	adds	r3, r2, r3
 80038cc:	466a      	mov	r2, sp
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d907      	bls.n	80038e2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038d2:	f000 f89b 	bl	8003a0c <__errno>
 80038d6:	0003      	movs	r3, r0
 80038d8:	220c      	movs	r2, #12
 80038da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80038dc:	2301      	movs	r3, #1
 80038de:	425b      	negs	r3, r3
 80038e0:	e006      	b.n	80038f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <_sbrk+0x50>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	18d2      	adds	r2, r2, r3
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <_sbrk+0x50>)
 80038ec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b004      	add	sp, #16
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200001c8 	.word	0x200001c8
 80038fc:	2000028c 	.word	0x2000028c

08003900 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <SystemInit+0x70>)
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <SystemInit+0x70>)
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <SystemInit+0x70>)
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <SystemInit+0x70>)
 8003914:	6852      	ldr	r2, [r2, #4]
 8003916:	4917      	ldr	r1, [pc, #92]	; (8003974 <SystemInit+0x74>)
 8003918:	400a      	ands	r2, r1
 800391a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <SystemInit+0x70>)
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <SystemInit+0x70>)
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4915      	ldr	r1, [pc, #84]	; (8003978 <SystemInit+0x78>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <SystemInit+0x70>)
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <SystemInit+0x70>)
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	4913      	ldr	r1, [pc, #76]	; (800397c <SystemInit+0x7c>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <SystemInit+0x70>)
 8003936:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <SystemInit+0x70>)
 8003938:	6852      	ldr	r2, [r2, #4]
 800393a:	4911      	ldr	r1, [pc, #68]	; (8003980 <SystemInit+0x80>)
 800393c:	400a      	ands	r2, r1
 800393e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <SystemInit+0x70>)
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <SystemInit+0x70>)
 8003944:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003946:	210f      	movs	r1, #15
 8003948:	438a      	bics	r2, r1
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <SystemInit+0x70>)
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <SystemInit+0x70>)
 8003950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <SystemInit+0x84>)
 8003954:	400a      	ands	r2, r1
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <SystemInit+0x70>)
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <SystemInit+0x70>)
 800395c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800395e:	2101      	movs	r1, #1
 8003960:	438a      	bics	r2, r1
 8003962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <SystemInit+0x70>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]

}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	08ffb80c 	.word	0x08ffb80c
 8003978:	fef6ffff 	.word	0xfef6ffff
 800397c:	fffbffff 	.word	0xfffbffff
 8003980:	ffc0ffff 	.word	0xffc0ffff
 8003984:	fffcfe2c 	.word	0xfffcfe2c

08003988 <uart_printf>:
#include <string.h>
#include "stm32f0xx_hal.h"

extern UART_HandleTypeDef huart2;

void uart_printf(char* str){
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 0xFFFF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fc fbb8 	bl	8000108 <strlen>
 8003998:	0003      	movs	r3, r0
 800399a:	b29a      	uxth	r2, r3
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <uart_printf+0x28>)
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4804      	ldr	r0, [pc, #16]	; (80039b4 <uart_printf+0x2c>)
 80039a2:	f7fe fa85 	bl	8001eb0 <HAL_UART_Transmit>
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	0000ffff 	.word	0x0000ffff
 80039b4:	20000218 	.word	0x20000218

080039b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039bc:	480d      	ldr	r0, [pc, #52]	; (80039f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <LoopForever+0xe>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c4:	e002      	b.n	80039cc <LoopCopyDataInit>

080039c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ca:	3304      	adds	r3, #4

080039cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d0:	d3f9      	bcc.n	80039c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039d4:	4c0b      	ldr	r4, [pc, #44]	; (8003a04 <LoopForever+0x16>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d8:	e001      	b.n	80039de <LoopFillZerobss>

080039da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039dc:	3204      	adds	r2, #4

080039de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e0:	d3fb      	bcc.n	80039da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80039e2:	f7ff ff8d 	bl	8003900 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80039e6:	f000 f817 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ea:	f7fe fe41 	bl	8002670 <main>

080039ee <LoopForever>:

LoopForever:
    b LoopForever
 80039ee:	e7fe      	b.n	80039ee <LoopForever>
  ldr   r0, =_estack
 80039f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80039f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f8:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80039fc:	08003cc0 	.word	0x08003cc0
  ldr r2, =_sbss
 8003a00:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8003a04:	2000028c 	.word	0x2000028c

08003a08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a08:	e7fe      	b.n	8003a08 <ADC1_COMP_IRQHandler>
	...

08003a0c <__errno>:
 8003a0c:	4b01      	ldr	r3, [pc, #4]	; (8003a14 <__errno+0x8>)
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	4770      	bx	lr
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	20000084 	.word	0x20000084

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	4d0c      	ldr	r5, [pc, #48]	; (8003a50 <__libc_init_array+0x38>)
 8003a1e:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	2600      	movs	r6, #0
 8003a2a:	f000 f8f9 	bl	8003c20 <_init>
 8003a2e:	4d0a      	ldr	r5, [pc, #40]	; (8003a58 <__libc_init_array+0x40>)
 8003a30:	4c0a      	ldr	r4, [pc, #40]	; (8003a5c <__libc_init_array+0x44>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	00b3      	lsls	r3, r6, #2
 8003a3e:	58eb      	ldr	r3, [r5, r3]
 8003a40:	4798      	blx	r3
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	00b3      	lsls	r3, r6, #2
 8003a48:	58eb      	ldr	r3, [r5, r3]
 8003a4a:	4798      	blx	r3
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08003cb8 	.word	0x08003cb8
 8003a54:	08003cb8 	.word	0x08003cb8
 8003a58:	08003cb8 	.word	0x08003cb8
 8003a5c:	08003cbc 	.word	0x08003cbc

08003a60 <malloc>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <malloc+0x10>)
 8003a64:	0001      	movs	r1, r0
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f000 f80c 	bl	8003a84 <_malloc_r>
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	20000084 	.word	0x20000084

08003a74 <memset>:
 8003a74:	0003      	movs	r3, r0
 8003a76:	1882      	adds	r2, r0, r2
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <memset+0xa>
 8003a7c:	4770      	bx	lr
 8003a7e:	7019      	strb	r1, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	e7f9      	b.n	8003a78 <memset+0x4>

08003a84 <_malloc_r>:
 8003a84:	2303      	movs	r3, #3
 8003a86:	b570      	push	{r4, r5, r6, lr}
 8003a88:	1ccd      	adds	r5, r1, #3
 8003a8a:	439d      	bics	r5, r3
 8003a8c:	3508      	adds	r5, #8
 8003a8e:	0006      	movs	r6, r0
 8003a90:	2d0c      	cmp	r5, #12
 8003a92:	d21e      	bcs.n	8003ad2 <_malloc_r+0x4e>
 8003a94:	250c      	movs	r5, #12
 8003a96:	42a9      	cmp	r1, r5
 8003a98:	d81d      	bhi.n	8003ad6 <_malloc_r+0x52>
 8003a9a:	0030      	movs	r0, r6
 8003a9c:	f000 f8be 	bl	8003c1c <__malloc_lock>
 8003aa0:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <_malloc_r+0xb4>)
 8003aa2:	6814      	ldr	r4, [r2, #0]
 8003aa4:	0021      	movs	r1, r4
 8003aa6:	2900      	cmp	r1, #0
 8003aa8:	d119      	bne.n	8003ade <_malloc_r+0x5a>
 8003aaa:	4c24      	ldr	r4, [pc, #144]	; (8003b3c <_malloc_r+0xb8>)
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <_malloc_r+0x36>
 8003ab2:	0030      	movs	r0, r6
 8003ab4:	f000 f8a0 	bl	8003bf8 <_sbrk_r>
 8003ab8:	6020      	str	r0, [r4, #0]
 8003aba:	0029      	movs	r1, r5
 8003abc:	0030      	movs	r0, r6
 8003abe:	f000 f89b 	bl	8003bf8 <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d12c      	bne.n	8003b20 <_malloc_r+0x9c>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	0030      	movs	r0, r6
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	f000 f8a7 	bl	8003c1e <__malloc_unlock>
 8003ad0:	e003      	b.n	8003ada <_malloc_r+0x56>
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	dadf      	bge.n	8003a96 <_malloc_r+0x12>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	2000      	movs	r0, #0
 8003adc:	bd70      	pop	{r4, r5, r6, pc}
 8003ade:	680b      	ldr	r3, [r1, #0]
 8003ae0:	1b5b      	subs	r3, r3, r5
 8003ae2:	d41a      	bmi.n	8003b1a <_malloc_r+0x96>
 8003ae4:	2b0b      	cmp	r3, #11
 8003ae6:	d903      	bls.n	8003af0 <_malloc_r+0x6c>
 8003ae8:	600b      	str	r3, [r1, #0]
 8003aea:	18cc      	adds	r4, r1, r3
 8003aec:	6025      	str	r5, [r4, #0]
 8003aee:	e003      	b.n	8003af8 <_malloc_r+0x74>
 8003af0:	428c      	cmp	r4, r1
 8003af2:	d10e      	bne.n	8003b12 <_malloc_r+0x8e>
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	0030      	movs	r0, r6
 8003afa:	f000 f890 	bl	8003c1e <__malloc_unlock>
 8003afe:	0020      	movs	r0, r4
 8003b00:	2207      	movs	r2, #7
 8003b02:	300b      	adds	r0, #11
 8003b04:	1d23      	adds	r3, r4, #4
 8003b06:	4390      	bics	r0, r2
 8003b08:	1ac3      	subs	r3, r0, r3
 8003b0a:	d0e7      	beq.n	8003adc <_malloc_r+0x58>
 8003b0c:	425a      	negs	r2, r3
 8003b0e:	50e2      	str	r2, [r4, r3]
 8003b10:	e7e4      	b.n	8003adc <_malloc_r+0x58>
 8003b12:	684b      	ldr	r3, [r1, #4]
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	000c      	movs	r4, r1
 8003b18:	e7ee      	b.n	8003af8 <_malloc_r+0x74>
 8003b1a:	000c      	movs	r4, r1
 8003b1c:	6849      	ldr	r1, [r1, #4]
 8003b1e:	e7c2      	b.n	8003aa6 <_malloc_r+0x22>
 8003b20:	2303      	movs	r3, #3
 8003b22:	1cc4      	adds	r4, r0, #3
 8003b24:	439c      	bics	r4, r3
 8003b26:	42a0      	cmp	r0, r4
 8003b28:	d0e0      	beq.n	8003aec <_malloc_r+0x68>
 8003b2a:	1a21      	subs	r1, r4, r0
 8003b2c:	0030      	movs	r0, r6
 8003b2e:	f000 f863 	bl	8003bf8 <_sbrk_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d1da      	bne.n	8003aec <_malloc_r+0x68>
 8003b36:	e7c6      	b.n	8003ac6 <_malloc_r+0x42>
 8003b38:	200001cc 	.word	0x200001cc
 8003b3c:	200001d0 	.word	0x200001d0

08003b40 <_nrand48_r>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	000c      	movs	r4, r1
 8003b44:	f000 f810 	bl	8003b68 <__dorand48>
 8003b48:	88a0      	ldrh	r0, [r4, #4]
 8003b4a:	8863      	ldrh	r3, [r4, #2]
 8003b4c:	03c0      	lsls	r0, r0, #15
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	18c0      	adds	r0, r0, r3
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <nrand48>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <nrand48+0x10>)
 8003b58:	0001      	movs	r1, r0
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	f7ff fff0 	bl	8003b40 <_nrand48_r>
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	20000084 	.word	0x20000084

08003b68 <__dorand48>:
 8003b68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6c:	0005      	movs	r5, r0
 8003b6e:	000c      	movs	r4, r1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d115      	bne.n	8003ba0 <__dorand48+0x38>
 8003b74:	2018      	movs	r0, #24
 8003b76:	f7ff ff73 	bl	8003a60 <malloc>
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <__dorand48+0x7c>)
 8003b7c:	63a8      	str	r0, [r5, #56]	; 0x38
 8003b7e:	8003      	strh	r3, [r0, #0]
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <__dorand48+0x80>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	8043      	strh	r3, [r0, #2]
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <__dorand48+0x84>)
 8003b88:	8083      	strh	r3, [r0, #4]
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <__dorand48+0x88>)
 8003b8c:	80c3      	strh	r3, [r0, #6]
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <__dorand48+0x8c>)
 8003b90:	8103      	strh	r3, [r0, #8]
 8003b92:	2305      	movs	r3, #5
 8003b94:	8143      	strh	r3, [r0, #10]
 8003b96:	3306      	adds	r3, #6
 8003b98:	8183      	strh	r3, [r0, #12]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6102      	str	r2, [r0, #16]
 8003b9e:	6143      	str	r3, [r0, #20]
 8003ba0:	8820      	ldrh	r0, [r4, #0]
 8003ba2:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	88ef      	ldrh	r7, [r5, #6]
 8003ba8:	89ab      	ldrh	r3, [r5, #12]
 8003baa:	437a      	muls	r2, r7
 8003bac:	0039      	movs	r1, r7
 8003bae:	18d3      	adds	r3, r2, r3
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	892a      	ldrh	r2, [r5, #8]
 8003bb4:	8866      	ldrh	r6, [r4, #2]
 8003bb6:	4694      	mov	ip, r2
 8003bb8:	4371      	muls	r1, r6
 8003bba:	4342      	muls	r2, r0
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	188a      	adds	r2, r1, r2
 8003bc0:	18d2      	adds	r2, r2, r3
 8003bc2:	88a3      	ldrh	r3, [r4, #4]
 8003bc4:	0c11      	lsrs	r1, r2, #16
 8003bc6:	437b      	muls	r3, r7
 8003bc8:	4667      	mov	r7, ip
 8003bca:	437e      	muls	r6, r7
 8003bcc:	199e      	adds	r6, r3, r6
 8003bce:	896b      	ldrh	r3, [r5, #10]
 8003bd0:	4358      	muls	r0, r3
 8003bd2:	466b      	mov	r3, sp
 8003bd4:	1830      	adds	r0, r6, r0
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	1841      	adds	r1, r0, r1
 8003bda:	8023      	strh	r3, [r4, #0]
 8003bdc:	8062      	strh	r2, [r4, #2]
 8003bde:	80a1      	strh	r1, [r4, #4]
 8003be0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	0000330e 	.word	0x0000330e
 8003be8:	ffffabcd 	.word	0xffffabcd
 8003bec:	00001234 	.word	0x00001234
 8003bf0:	ffffe66d 	.word	0xffffe66d
 8003bf4:	ffffdeec 	.word	0xffffdeec

08003bf8 <_sbrk_r>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b570      	push	{r4, r5, r6, lr}
 8003bfc:	4c06      	ldr	r4, [pc, #24]	; (8003c18 <_sbrk_r+0x20>)
 8003bfe:	0005      	movs	r5, r0
 8003c00:	0008      	movs	r0, r1
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	f7ff fe50 	bl	80038a8 <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_sbrk_r+0x1c>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <_sbrk_r+0x1c>
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20000288 	.word	0x20000288

08003c1c <__malloc_lock>:
 8003c1c:	4770      	bx	lr

08003c1e <__malloc_unlock>:
 8003c1e:	4770      	bx	lr

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
